	SPACE	4,10
**	$INDLB	-  INDEXED LOAD BYTE
*
*	BYTE INDEXED LOAD PRIMITIVE
*
*	ENTRY:	HL = BASE ADDRESS
*		(RET) = FULL WORD RELOCATION
*	EXIT:	A = ( HL + (RET) )
*	USES:	A

$INDLB	XCHG				; DE = BASE
	XTHL				; SAVE	.DE.
	PUSH	D			; SAVE	BASE
	PUSH	B			; SAVE	.BC.

	MOV	C,M
	INX	H
	MOV	B,M			; BC = OFFSET
	INX	H			; HL =	.RET.

	XCHG				; HL = BASE
	DAD	B			; HL = BASE + OFFSET
	MOV	A,M			; A  = ( BASE + OFFSET )
	XCHG				; HL =	.RET.

	POP	B			; RESTORE  .BC.
	POP	D			; RESTORE  BASE
	XTHL				; HL = .DE. ; (SP) = .RET.
	XCHG				; DE = .DE. ; HL = BASE
	RET
	SPACE	4,10
**	$INDS	-  INDEXED STORE
*
*	INDEXED STORE PRIMITIVE.
*
*	ENTRY:	HL = BASE ADDRESS
*		DE = VALUE TO STORE
*	EXIT:	( HL + (RET) ) = DE
*	USES:	NONE

$INDS	CALL	XCHGBC
	XTHL				; SAVE	.BC.
	PUSH	D
	CALL	ILDEHL			; DE = OFFSET
	CALL	XCHGBC			; BC = .RET.
	XCHG				; DE = BASE ; HL = OFFSET
	DAD	D			; HL = BASE + OFFSET
	XCHG
	XTHL				; SAVE	BASE
	XCHG				; DE = VALUE
	CALL	ISDEHL
	POP	H			; HL = BASE
	CALL	XCHGBC
	XTHL				; RESTORE  .BC.
	JMP	XCHGBC
	SPACE	4,10
**	$INDSB	-  INDEXED BYTE STORE
*
*	INDEXED BYTE STORE.
*
*	ENTRY:	A = VALUE TO STORE
*		HL = BASE ADDRESS
*		(RET) = OFFSET
*	EXIT:	NONE
*	USES:	PSW

$INDSB	XCHG				; DE = BASE
	XTHL				; SAVE	.DE.
	PUSH	D			; SAVE	BASE
	PUSH	B			; SAVE	.BC.

	MOV	C,M
	INX	H
	MOV	B,M			; BC = OFFSET
	INX	H			; HL =	.RET.

	XCHG				; HL = BASE
	DAD	B			; HL = BASE + OFFSET
	MOV	M,A			; ( BASE + OFFSET ) = A
	XCHG

	POP	B			; RESTORE  .BC.
	POP	D			; RESTORE  BASE
	XTHL				; HL = .DE. ; (SP) = .RET.
	XCHG				; DE = .DE. ; HL = BASE
	RET
