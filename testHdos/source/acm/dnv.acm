	SPACE	4,10
**	$DNV - DECODE NUMERIC VALUE.
*
*	$DNV DECODES A NUMERIC VALUE (IN THE FORM OF AN ASCII STRING)
*	INTO A BINARY NUMBER. THE MAXIMUM MAGNITUDE IS
*	65535D.
*
*	THE NUMBER MAY CONTAIN A POSTRADIX OF 'B' (BINARY)
*	'O' OR 'Q' (OCTAL) OR 'D' (DECIMAL)
*
*	ENTRY	(HL) = ADDRESS OF FIRST BYTE OF NUMBER
*		(A) = DEFAULT BASE (2 FOR BINARY, 10 FOR DECIMAL, ETC.)
*	EXIT	'C' CLEAR IF OK
*		 (HL) ADVANCED PAST NUMBER (AND POSTRADIX)
*		 (DE) = VALUE
*		'C' SET IF ERROR
*	USES	ALL

$DNV	STA	$DNVA			; SET DEFAULT BASE
	MOV	B,H
	MOV	C,L			; (BC) = TEXT ADDRESS

*	SCAN FOR POSTRADIX

$DNV1	MOV	A,M
	CALL	$CVD.			; CHECK FOR VALID DECIMAL DIGIT
	INX	H
	JNC	$DNV1			; MORE TO GO
	DCX	H			; REMOVE EXTRA INCREMENT
	MOV	A,C
	CMP	L			; SEE IF THERE WERE ANY NUMBERS
	STC				; ASSUME NOT
	RE				; ERROR

*	OUT OF NUMBERS. SEE IF POSTRADIX FOLLOWS

	MOV	A,M			; (A) = PROPOSED POSTRADIX
	PUSH	H			; SAVE END ADDRESS
	LXI	H,$DNVB
	ANA	A
	JZ	$DNV2			; NO POSTRADIX
	CALL	$TBLS
	MOV	A,M
	JNE	$DNV2			; NOT POSTRADIX
	POP	H
	INX	H			; SKIP POSTRADIX
	PUSH	H
	STA	$DNVA			; SET NEW POSTRADIX

$DNV2	LXI	D,0			; (DE) = ACCUMULATOR

*	BUILD NUMBER

$DNV3	LDA	$DNVA			; (A) = BASE
	PUSH	PSW			; SAVE BASE
	CALL	$MU86			; MULTIPLY
	POP	D			; (D) = BASE
	JC	$DNV4			; OVERFLOW
	LDAX	B			; (A) = DIGIT
	SUI	'0'
	INX	B
	CMP	D			; COMPARE TO BASE
	CMC
	JC	$DNV4			; TOO LARGE A DIGIT
	CALL	$DADA.			; ADD TO VALUE
	XCHG				; (DE) = VALUE
	LDAX	B
	CALL	$CVD.
	JNC	$DNV3			; MORE TO GO
	ANA	A			; CLEAR CARRY
$DNV4	POP	H			; RESTORE POINTER
	RET				; EXIT

$DNVA	DB	0			; DEFAULT BASE

$DNVB	DB	'B',2			; POSTRADIX TABLE
	DB	'O',8
	DB	'Q',8
	DB	'D',10
	DB	0
