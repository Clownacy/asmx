INCHAR	SPACE	4,12
**	INCHAR - INPUT CHARACTER
*
*	INPUT CHARACTER FROM SPECIFIED DEVICE
*
*	ENTRY	NONE
*
*	EXIT	(PSW) = 'Z' CLEAR IF THERE IS A CHARACTER
*			(A) = CHARACTER
*		      = 'Z' SET   IF THERE IS NOT A CHARACTER
*
*	USES	(PSW)
*

INCHAR	EQU   *
	PUSH  H
	LDA   D.PORT
	MOV   H,A

*	CHECK FOR DATA

	IF	H84IO

	MVI   L,UR.LSR
	CALL  IN
	ANI   UC.DR				'Z' SET IF THERE IS DATA
	JZ    INC1				NO DATA
	MVI   L,UR.RBR
	CALL  IN
	JMP   INC2

	ELSE

	MVI   L,USR
	CALL  IN
	ANI   USR.RXR				'Z' SET IF THERE IS NO DATA
	JZ    INC1				NO DATA
	MVI   L,UDR
	CALL  IN
	ANA   A					IGNORE NULL CHARACTERS
	JMP   INC2

	ENDIF
	
INC1	STC

INC2	POP   H
	RET
OUTCHAR	SPACE	4,12
**	OUTCHAR - OUTPUT CHARACTER
*
*	OUTPUT CHARACTER TO SPECIFIED DEVICE
*
*	ENTRY	(A)   = CHARACTER
*
*	EXIT	NONE
*
*	USES	(PSW)
*

OUTCHAR	EQU   *
	PUSH  H

	PUSH  PSW
	LDA   D.PORT
	MOV   H,A

	IF	H84IO

	MVI   L,UR.LSR
	CALL  WAIT			WAIT FOR THE HAND-SHAKE!
OUTC0	LDA   S.CAADR+1
	ANA   A
	JNZ   OUTC1			IF  CTL-Z,-A,-B,-C HIT
	CALL  IN
	ANI   UC.THE
	JZ    OUTC0			IF  NOT READY FOR TRANSMIT
	POP   PSW
	MVI   L,UR.THR
	CALL  OUT
	JMP   OUTC2

	ELSE

	MVI   L,USR
	CALL  WAIT			WAIT FOR THE HAND-SHAKE
OUTC0	LDA   S.CAADR+1
	ANA   A
	JNZ   OUTC1			IF  CTL-Z,-A,-B,-C HIT
	CALL  IN
	ANI   USR.TXR
	JZ    OUTC0			IF  NOT READY FOR TRANSMIT
	POP   PSW
	MVI   L,UDR
	CALL  OUT
	JMP   OUTC2

	ENDIF

OUTC1	POP   PSW

OUTC2	POP   H
	RET
	IF	H84IO
I8250	SPACE	4,10
**	I8250 - INITIALIZE 8250
*
*	INITIALIZE AN 8250 PORT.  STOLEN AS CAP FROM CONSL. DRIVER.
*
*	ENTRY	(A)         =  PORT ADDRESS
*		(HL)[0-14]  =  NEW BAUD RATE
*		(HL)[15]    =  1 IF TWO STOP BITS
*
*	EXIT	NONE
*
*	USES	(A)
*

I8250	EQU   *
	PUSH  D

	XCHG
	MOV   H,A
	MVI   L,UR.IER
	XRA   A
	CALL  OUT
	MVI   L,UR.MCR
	MVI   A,UC.LOO
	CALL  OUT		SET LOOP-BACK
	MVI   L,UR.LCR
	MVI   A,UC.DLA
	CALL  OUT
	MVI   L,UR.DLL
	MOV   A,E
	CALL  OUT
	MVI   L,UR.DLM
	MOV   A,D
	ANI   177Q
	CALL  OUT
	MVI   L,UR.LCR
	MOV   A,D
	RLC
	RLC
	RLC
	ERRNZ UC.2SB-4
	ANI   UC.2SB
	ORI   UC.8BW				8 BIT WORDS
	CALL  OUT
	MVI   L,UR.RBR
	CALL  IN				REMOVE GARBAGE
	MVI   A,AC.DLY
	CALL  .DLY
	MVI   L,UR.MCR
	CALL  IN
	ANI   377Q-UC.LOO
	CALL  OUT		TURN OFF LOOP-BACK

	POP   D
	RET
	ELSE
I8251	SPACE	4,10
**	I8251 - INITIALIZE 8251
*
*	INITIALIZE AN 8251 PORT
*
*	ENTRY	(A)      = PORT ADDRESS
*		(HL)[15] = 1 IF TWO STOP BITS
*
*	EXIT	NONE
*
*	USES	ALL
*

I8251	EQU   *
	XCHG
	MOV   H,A
	MVI   L,USR
	MOV   A,D
	ANI   200Q				(A) = 200Q IF TWO STOP BITS
	ERRNZ	200Q+UMI.1B-UMI.2B
	ORI   UMI.1B+UMI.L8+UMI.16X
	STA   I8251.B
	LXI   B,I8251.A
I8251.1	LDAX  B
	CPI   #377Q
	JZ    I8251.2
	CALL  OUT
	INX   B
	JMP   I8251.1
I8251.2	MVI   A,UCI.ER+UCI.TE+UCI.RE
	CALL  OUT
	MVI   L,UDR
	JMP   IN
I8251.A DB	0,0,0,0,0,0
	DB	UCI.IR
I8251.B	DB	0				CONFIGURATION BYTE
	DB	377Q
	ENDIF
IN	SPACE	4,12
**	IN - INPUT
*
*	INPUT BYTE FROM SPECIFIED PORT
*
*	ENTRY	(H)   = PORT ADDRESS
*		(L)   = OFFSET
*
*	EXIT	(A)   = BYTE READ
*
*	USES	(PSW)
*

IN	EQU   *
	MOV   A,H
	ADD   L
	STA   IN.ADD
	IN    *-*
IN.ADD	EQU   *-1
	RET
OUT	SPACE	4,12
**	OUT - OUTPUT
*
*	OUTPUT BYTE TO SPECIFIED PORT
*
*	ENTRY	(A)   = BYTE TO BE WRITTEN
*		(H)   = PORT ADDRESS
*		(L)   = OFFSET
*
*	EXIT	NONE
*
*	USES	NONE
*

OUT	EQU   *
	PUSH  PSW
	MOV   A,H
	ADD   L
	STA   OUT.ADD
	POP   PSW
	OUT   *-*
OUT.ADD	EQU   *-1
	RET
