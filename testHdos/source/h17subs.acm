	SPACE	4,10
**	$COMP - COMPARE TWO CHARACTER STRINGS.
*
*	$COMP COMPARES TWO BYTE STRINGS.
*
*	ENTRY	(C) = COMPARE COUNT
*		(DE) = FWA OF STRING #1
*		(HL) = FWA OF STRING #2
*	EXIT	'Z' CLEAR, IS MIS-MATCH
*		 (C) = LENGTH REMAINING
*		 (DE) = ADDRESS OF MISMATCH IN STRING#1
*		 (HL) = ADDRESS OF MISMATCH IN STRING #2
*		'Z' SET, HAVE MATCH
*		 (C) = 0
*		 (DE) = (DE) + (0C)
*		 (HL) = (HL) + (0C)
*	USES	A,F,C,D,E,H,L

$COMP	EQU	30060A		IN H17 ROM
	SPACE	4,10
**	$DADA - PERFORM (H,L) = (H,L) + (0,A)
*
*	ENTRY	(H,L) = BEFORE VALUE
*		(A) = BEFORE VALUE
*	EXIT	(H,L) = (H,L) + (0,A)
*		'C' SET IF OVERFLOW
*	USES	F,H,L

$DADA	EQU	30072A		IN H17 ROM
	SPACE	4,10
**	$DADA. - ADD (0,A) TO (H,L)
*
*	ENTRY	NONE
*	EXIT	(HL) = (HL) + (0A)
*	USES	A,F,H,L

$DADA.	EQU	30101A		IN H17 ROM
	SPACE	4,10
**	$DU66 - UNSIGNED 16 / 16 DIVIDE.
*
*	(HL) = (BC)/(DE)
*
*	ENTRY	(BC), (DE) PRESET
*	EXIT	(HL) = RESULT
*		(DE) = REMAINDER
*	USES	ALL

$DU66	EQU	30106A		IN H17 ROM
	SPACE	4,10
**	$HLIHL - LOAD HL INDIRECT THROUGH HL.
*
*	(HL) = ((HL))
*
*	ENTRY	NONE
*	EXIT	NONE
*	USES	A,H,L

$HLIHL	EQU	30211A		IN H17 ROM
	SPACE	4,10
**	$CDEHL - COMPARE (DE) TO (HL)
*
*	$CDEHL COMPARES (DE) TO (HL) FOR EQUALITY.
*
*	ENTRY	NONE
*	EXIT	'Z' SET IF (DE) = (HL)
*	USES	A,F

$CDEHL	EQU	30216A		IN H17 ROM
	SPACE	4,10
**	$CHL - COMPLEMENT (HL).
*
*	(HL) = -(HL)		TWO'S COMPLEMENT
*
*	ENTRY	NONE
*	EXIT	NONE
*	USES	A,F,H,L

$CHL	EQU	30224A		IN H17 ROM
	SPACE	4,10
**	$INDL - INDEXED LOAD.
*
*	$INDL LOADS DE WITH THE TWO BYTES AT (HL)+DISPLACMENT
*
*	THIS ACTS AS AN INDEXED FULL WORD LOAD.
*
*	(DE) = ( (HL) + DSPLACEMENT )
*
*	ENTRY	((RET)) = DISPLACMENT (FULL WORD)
*		(HL) = TABLE ADDRESS
*	EXIT	TO (RET+2)
*	USES	A,F,D,E

$INDL	EQU	30234A		IN H17 ROM
	SPACE	4,10
**	$MOVE - MOVE DATA
*
*	$MOVE MOVES A BLOCK OF BYTES TO A NEW MEMORY ADDRESS.
*	IF THE MOVE IS TO A LOWER ADDRESS, THE BYTES ARE MOVED FROM
*	FIRST TO LAST.
*
*	IF THE MOVE IS TO A HIGHER ADDRESS, THE BYTES ARE MOVED FROM
*	LAST TO FIRST.
*
*	THIS IS DONE SO THAT AN OVERLAPED MOVE WILL NOT 'RIPPLE'.
*
*	ENTRY	(BC) = COUNT
*		(DE) = FROM
*		(HL) = TO
*	EXIT	MOVED
*		(DE) = ADDRESS OF NEXT FROM BYTE
*		(HL) = ADDRESS OF NEXT *TO* BYTE
*		'C' CLEAR
*	USES	ALL

$MOVE	EQU	30252A		IN H17 ROM
	SPACE	4,10
**	$MU10 - MULTIPLY UNSIGNED 16 BIT QUANTITY BY 10
*
*	(HL) = (DE) * 10
*
*	ENTRY:	(DE) = MULTIPLIER
*	EXIT:	'C' CLEAR IF OK
*		 (HL) = PRODUCT
*		'C' SET IF ERROR
*	USES:	F,D,E,H,L

$MU10	EQU	30324A		IN H17 ROM
	SPACE	4,10
**	$MU66 - UNSIGNED 16 X 16 MULTIPLY.
*
*	ENTRY:	(BC) = MULTIPLICAND
*		(DE) = MULTIPLIER
*	EXIT:	(HL) = RESULT
*		'Z' SET IF NOT OVERFLOW
*	USES:	ALL

$MU66	EQU	30337A		IN H17 ROM
	SPACE	4,10
**	$MU86 - MULTIPLY 8 X 16 UNSIGNED.
*
*	$MU86 MULTIPLIES A 16 BIT VALUE BY AN 8 BIT VALUE.
*
*	ENTRY	(A) = MULTIPLIER
*		(DE) = MULTIPLICAND
*	EXIT	(HL) = RESULT
*		'Z' SET IF NOT OVERFLOW
*	USES	A,F,H,L

$MU86	EQU	31007A		IN H17 ROM
	SPACE	4,10
**	$RSTALL - RESTORE ALL REGISTERS.
*
*	$RSTALL RESTORES ALL THE REGISTERS OFF THE STACK, AND
*	RETURNS TO THE PREVIOUS CALLER.
*
*	ENTRY	(SP) = PSW
*		(SP+2) = BC
*		(SP+4) = DE
*		(SP+6) = HL
*		(SP+8) = RET
*	EXIT	TO *RET*, REGISTERS RESTORED
*	USES	ALL

$RSTALL	EQU	31047A		IN H17 ROM
	SPACE	4,10
**	$SAVALL - SAVE ALL REGISTERS ON STACK.
*
*	$SAVALL SAVES ALL THE REGISTERS ON THE STACK.
*
*	ENTRY	NONE
*	EXIT	(SP) = PSW
*		(SP+2) = BC
*		(SP+4) = DE
*		(SP+6) = HL
*	USES	H,L

$SAVALL	EQU	31054A		IN H17 ROM
	SPACE	  4,10
**	$TJMP - TABLE JUMP.
*
*	USAGE
*
*	CALL	  $TJMP 	   (A) = INDEX
*	DW	  ADDR1
*	.	    .
*	.	    .
*	.	    .
*	DW	  ADDRN
*
*	ENTRY	  (A) = INDEX
*	EXIT	  TO PROCESSOR
*		 (A) = INDEX*2
*	USES	  NONE.

$TJMP	EQU	31061A		IN H17 ROM, (A) = INDEX*2

$TJMP.	EQU	31062A		IN H17 ROM
	SPACE	4,10
**	$TBRA - BRANCH RELATIVE THROUGH TABLE.
*
*	$TBRA USES THE SUPPLIED INDEX TO SELECT A BYTE FROM THE
*	JUMP TABLE. THE CONTENTS OF THIS BYTE ARE ADDED TO THE
*	ADDRESS OF THE BYTE, YIELDING THE PROCESSOR ADDRESS.
*
*	CALL	$TBRA
*	DB	LAB1-*		; INDEX = 0 FOR LAB1
*	DB	LAB2-*		; INDEX = 1 FOR LAB2
*	DB	LABN-*		; INDEX = N-1 FOR LABN
*
*	ENTRY:	(A) = INDEX
*		(RET) = TABLE FWA
*	EXIT:	TO COMPUTED ADDRESS
*	USES:	F,H,L

$TBRA	EQU	31076A		IN H17 ROM
	SPACE	4,10
**	$TBLS - TABLE SEARCH
*
*	TABLE FORMAT
*
*	DB	KEY1,VAL1,
*	.	.
*	.	.
*	DB	KEYN,VALN
*	DB	0
*
*	ENTRY	(A) = PATTERN
*		(H,L) = TABLE FWA
*	EXIT	(A) = PATTERN IF FOUND
*		'Z' SET IF FOUND
*		'Z' CLEAR IF NOT FOUND OR PATTERN=0
*	USES	A,F,H,L

	IF	H17TBLS
$TBLS	EQU	31111A		IN H17 ROM
	ELSE
$TBLS	PUSH	B		REPLACEMENT FOR H17 ROM
	CPI	0
	JZ	TBL2
	MOV	B,A
TBL1	MOV	A,M		(A) = CHARACTER
	INX	H
	CMP	B
	JZ	TBL3		IF MATCH
	ANA	A
	INX	H		SKIP PAST
	JNZ	TBL1		IF NOT END OF TABLE
	DCX	H
	DCX	H
	XRA	A		SET TO ZERO FOR OLD USERS
TBL2	CPI	1		CLEAR ZERO

*	DONE

TBL3	POP	B
	RET
	ENDIF
	SPACE	4,10
**	$TYPTX - TYPE TEXT.
*
*	$TYPTX IS CALLED TO TYPE A BLOCK OF TEXT ON THE SYSTEM CONSOLE.
*
*	A BYTE WITH THE 200Q BIT SET IS THE LAST BYTE IN THE MESSAGE.
*
*	ENTRY	(RET) = TEXT
*	EXIT	TO (RET+LENGTH)
*	USES	A,F

$TYPTX	EQU	31136A		IN H17 ROM

$TYPTX.	EQU	31144A		IN H17 ROM
	SPACE	4,10
**	$UDD - UNPACK DECIMAL DIGITS.
*
*	UDD CONVERTS A 16 BIT VALUE INTO A SPECIFIED NUMBER OF
*	DECIMAL DIGITS. THE RESULT IS ZERO FILLED.
*
*	ENTRY	(B,C) = ADDRESS VALUE
*		(A) = DIGIT COUNT
*		(H,L) = MEMORY ADDRESS
*	EXIT	(HL) = (HL) + (A)
*	USES	ALL

$UDD	EQU	31157A		IN H17 ROM
	SPACE	4,10
**	$ZERO - ZERO MEMORY
*
*	$ZERO ZEROS A BLOCK OF MEMORY.
*
*	ENTRY	(HL) = ADDRESS
*		(B) = COUNT
*	EXIT	(A) = 0
*	USES	A,B,F,H,L

$ZERO	EQU	31212A		IN H17 ROM
	SPACE	4,10
**	8 CONSTANT ZERO BYTES.

$ZEROS	EQU	31320A		IN H17 ROM
	SPACE	4,10
**	$REL - RELOCATE CODE.
*
*	REL PROCESSES A RELOCATION LIST.
*
*	ENTRY:	(BC) = DISPLACEMENT FROM ASSEMBLED ADDRESS
*		(DE) = RELOCATION FACTOR (FROM CURRENT ADDRESS)
*		(HL) = FWA RELOCATION LIST
*	EXIT:	NONE
*	USES:	ALL
*
*	IF (DE) WILL BE EQUAL TO (BC), CALL $REL.

$REL.	EQU	33175A		IN H17 ROM

$REL	EQU	33177A		IN H17 ROM
	SPACE	4,10
**	BOOT - BOOT CODE.
*
*	ENTERED TO BOOT DISK SYSTEM.

BOOT	EQU	37014A		IN H17 ROM
