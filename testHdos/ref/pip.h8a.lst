0000                    	TITLE	'PIP/Plus - PERIPHERAL INTERCHANGE PROGRAM'
0000                    	STL	'INTRODUCTION'

0000                    	LON	LCI

                        ***	PIP - PERIHPERAL INTERCHANGE PROGRAM
                        *
                        *	J.G. LETWIN, 11/1977 FOR *HEATH* COMPANY
                        *
                        *	COPYRIGHT 1977 BY HEATH COMPANY
                        *
                        *	G.A. Chandler,	78/09	Maintenence Release
                        *			79/04
                        *			79/11	50.05.00
                        *			80	50.06.00
                        *			80/09	 /2.0a/
                        *			80/10	 /2.0b/
                        *	W.G. Parrott,	81-84	Patches
                        *
                        *			86/08	Released into Public Domain
                        *				 by Heath Company,
                        *				 August 16, 1986.

                        ***	PIP/Plus - PERIPHERAL INTERCHANGE PROGRAM
                        *
                        *	W.G. Parrott,	85-86	 /3.0a/
                        *	R.L. Musgrave,	85-86	 /3.0a/

      = 0000            CUSTOM	EQU	0	;REVISION #

      = 0000            TRUE	EQU	0
      = 0001            FALSE	EQU	1

      = 0000            PIPRES	EQU	TRUE	;TRUE=CO-RESIDENT PIP
      = 0001            USER	EQU	FALSE	;USER AREA FACILITY NOT IMPLEMENTED
      = 0001            $BATCH	EQU	FALSE	;NO BATCH PROCESSING IN PIP'S $RTL
      = 0001            $MULTI	EQU	FALSE	;DON'T ALLOW MULTIPLE COMMANDS IN $RTL
      = 0001            H17TBLS EQU	FALSE	;REPLACE $TBLS ROM CODE

      = 4800            PIP.WS	EQU	110000A ;Warm Start Address			/3.0a/

0000                    	SPACE	4,10
                        ***	USE:
                        *
                        *	DEST=SOURCE1 [,SOURCE2,...,SOURCEN] [/SWITCH1.../SWITCHN]
                        *
                        *	VERB SWITCHES:
                        *
                        *	/L[IST] 	List standard disk directory
                        *	/F[ULL] 	List complete disk directory			/3.0a/
                        *	/B[RIEF]	List brief disk directory
                        *	/M[INIMUM]	List minimum disk directory			/3.0a/
                        *	/G[ROUPS]	List file group numbers 			/
                        *	/SET[FLAG]:f..	Set flags on file(s)				/
                        *	/CLR[FLAG][:f..] Clear flags on file(s) 			/
                        *	/PUT[USER]:u..	Put file(s) in user area(s)			/
                        *	/REM[USER][:u..] Remove file(s) from user area(s)		/3.0a/
                        *	/DEL[ETE]	Delete file(s)
                        *	/R[ENAME]	Rename file(s)
                        *	/CRC		Calculate CRC checksums of file(s)		/3.0a/
                        *	/MOU[NT]	Mount device
                        *	/DIS[MOUNT]	Dismount device
                        *	/RES[ET]	Reset device
                        *	/VERS[ION]	PIP Version number				/3.0a/
                        *	/ID		Same as /VERS plus some data			/
                        *	/?[??]		Print HELP. file				/
                        *	/FUBAR		Available for user to patch			/
                        *	/SNAFU		Available for user to patch			/3.0a/
                        *
                        *	MODIFIER SWITCHES:
                        *
                        *	/S[YSTEM]	Include system files (S flag) also
                        *	/FL[AG]:f...	Include only files with f.. flags		/3.0a/
                        *	/NOF[LAG]:f...	Include only files without f.. flags		/
                        *	/US[ER]:u...	Include only files in u.. user areas		/
                        *	/NOU[SER]:u...	Include only files NOT in u.. user areas	/
                        *	/BEF[ORE][:dd-mmm-yy]  Include only files before this date	/
                        *	/CUR[RENT][:dd-mmm-yy] Include only files with current date	/
                        *	/AFT[ER]:dd-mmm-yy     Include only files after this date	/
                        *	/AGE:n		Include only files 'n' days old or older	/
                        *	/AC[CESS]	Use access date rather than creation date	/
                        *	/COU[NT][:n]	Include only files with an access count 	/
                        *	/NOC[OUNT][:n]	Include only files without an access count	/
                        *	/Q[UERY]	Include only selected files			/
                        *	/-		Reverse effect of wildcard			/
                        *	/SO[RT][:nrerdrarcr] Sort files for DEST usage			/
                        *	/REV[ERSE]	Sort in descending order (normally ascending)	/3.0a/
                        *	/SU[PRESS]	Supress trailing massages and audit trails
                        *	/ALL[OCATE]	Show file allocation NOT size
                        *	/P[AGE][:nn]	Paginate directory listing			/3.0a/
                        *	/COL:nn 	Number of files across page in /B listing	/
                        *	/D[ATE] 	Use current (NOT source) date on copy		/
                        *	/ATT[RIB][:f..] Carry source flags on copy			/
                        *	/K[EEP] 	Destination file flags to remain the same	/
                        *	/C[ONTIG]	Copy file(s) contiguous 			/
                        *	/FOR[CE]	Override W & D flags				/
                        *	/SA[FE] 	If DEST exists, ask before overwritting 	/
                        *	/V[ERIFY]	Verify source & destination with CRC		/
                        *	/XXX		Available for user to patch			/
                        *	/YYY		Available for user to patch			/
                        *	/ZZZ		Available for user to patch			/3.0a/
0000                    	STL	'SYSTEM DEFINITIONS & EQUIVALENCES'
0000                    	EJECT
                        **	SYSTEM EQUIVALENCES

      = 0000            CN.SOU	EQU	0	;SOURCE CHANNEL NUMBER
      = 0001            CN.DES	EQU	1	;DESTINATION CHANNEL NUMBER
      = 0002            CN.DIR	EQU	2	;DIRECTORY CHANNEL NUMBER

                        **	PROGRAM ERROR CODES

      = 0080            PEC.DF	EQU	200Q	;DEVICE FORMAT ERROR
      = 0081            PEC.DNC	EQU	201Q	;DEVICES NOT CONSISTANT
      = 0083            PEC.TFI	EQU	203Q	;TARGET FILE ILLEGAL
      = 0084            PEC.CS	EQU	204Q	;CONTRADICTORY SWITCHES
      = 0085            PEC.IUW	EQU	205Q	;ILLEGAL USE OF WILDCARD
      = 0086            PEC.IDF	EQU	206Q	;ILLEGAL DESTINATION FILE FORMAT
      = 0087            PEC.SFI	EQU	207Q	;SOURCE FILE ILLEGAL
      = 0088            PEC.ISS EQU	210Q	;ILLEGAL SUB-SWITCH			/3.0a/
      = 0089            PEC.MSS EQU	211Q	;MISSING SUB-SWITCH			/3.0a/

0000                    	XTEXT	HOSBASE
0000                    	SPACE	4,10
                        **	HDOS BASE PAGE DEFINITION
                        *

0000                    	ORG	0

      = 0000            HOSBASE EQU	*

                        	ERRNZ	*-000000A
0000   (0003)           B.INT0	DS	3

0003   (0002)           S.LABEL DS	2			; address of label buffer

0005   (0001)           S.FMASK DS	1			; feature mask

      = 0003            F.CLK	EQU	00000011B		; system clock speed
      = 0000            F.2MHZ	EQU	00000000B		;  2 MHz
      = 0001            F.4MHZ	EQU	00000001B		;  4 MHz
      = 0002            F.6MHZ	EQU	00000010B		;  6 MHz

      = 000C            F.MACH	EQU	00001100B		; System type
      = 0000            F.H8	EQU	00000000B		;  H8
      = 0004            F.H89	EQU	00000100B		;  H89
      = 0008            F.Z100	EQU	00001000B		;  Z-100
      = 000C            F.OMACH EQU	00001100B		;  PC, ETC.

      = 0030            F.TERM	EQU	00110000B		; Terminal type
      = 0000            F.TTY	EQU	00000000B		;  Dumb TTY
      = 0010            F.H19	EQU	00010000B		;  H19

      = 00C0            F.CPU	EQU	11000000B		; CPU type
      = 0000            F.8080	EQU	00000000B		;  8080
      = 0040            F.8085	EQU	01000000B		;  8085
      = 0080            F.Z80	EQU	10000000B		;  Z-80
      = 00C0            F.OCPU	EQU	11000000B		;  HD64180, V20, ETC.

0006   (0002)           S.LWA	DS	2			; lwa of HDOS

                        	ERRNZ	*-000010A
0008   (0003)           B.INT1	DS	3			; clock interrupt

000B   (0005)           S.REV	DS	5			; rev, date, time of HDOS

                        	ERRNZ	*-000020A
0010   (0003)           B.INT2	DS	3			; available

0013   (0005)           	DS	5

                        	ERRNZ	*-000030A
0018   (0003)           B.INT3	DS	3			; available

001B   (0005)           	DS	5

                        	ERRNZ	*-000040A
0020   (0003)           B.INT4	DS	3			; available

0023   (0005)           	DS	5

                        	ERRNZ	*-000050A
0028   (0003)           B.INT5	DS	3			; available

                        	ERRNZ	*-000053A		; same as .DLY
002B   (0003)           S.DLY	DS	3

002E   (0002)           	DS	2

                        	ERRNZ	*-000060A
0030   (0003)           B.INT6	DS	3			; available

0033   (0005)           	DS	5

                        	ERRNZ	*-000070A
0038   (0003)           B.INT7	DS	3			; SCALL interrupt

003B   (0003)           B.SCALL DS	3			; JMP directly to SCALL processor

003E   (0002)           CSLIBUF DS	2			; FWA of console type-ahead buffer

0040   (0011)           BATNAME DS	17			; complete batch file name
0051   (0001)           BATSEC	DS	1			; current sector index in batch file
0052   (0002)           BATGNS	DS	2			; batch file group numbers

0054   (0002)           BATBUF	DS	2			; address of batch buffer
0056   (0002)           BATPTR	DS	2			; address of next char. in BATBUF

0058   (0002)           SUBBUF	DS	2			; address of substitution buffer

005A   (0002)           S.PATH	DS	2			; address of path buffer
005C   (0002)           S.PRMT	DS	2			; address of prompt buffer
005E   (0002)           S.EDLIN DS	2			; adderss of line buffer

0060   (0001)           S.COUNT DS	1			; counter
0061   (0001)           S.SHIFT DS	1			; shift count
0062   (0001)           S.BITS	DS	1			; bit flags

0063   (0003)           	DS	3

                        	ERRNZ	*-66H
0066   (0003)           B.NMI	DS	3			; NMI handler vector
0069   (0001)           B.NMIFL DS	1			; NMI flag (0=no NMI's occured)

006A   (0006)           S.DFBLK DS	6			; system wide default block

0070   (000F)           S.CVEC	DS	5*3			; console SCALL vectors

007F   (0001)           S.FLAG	DS	1			; system flags

      = 0001            S.SYSCM equ	00000001b		; SYSCMD.SYS in memory
      = 0002            S.VFLG	equ	00000010b		; Verify is on
      = 0004            S.ECHO	equ	00000100b		; Echo is off
      = 0008            S.BATCH equ	00001000b		; Batch is active
      = 0010            S.EXITC equ	00010000b		; SYSCMD prints exit code
      = 0020            S.BREAK equ	00100000b		; used by PIP
      = 0040            S.TABUF equ	01000000b		; type-ahead is stuffed
      = 0080            S.INIT	equ	10000000b		; set 1st time SYSCMD.SYS runs

                        	ERRNZ	*-80H			; MAKE SURE GOT EM' ALL
      = 0080            B.END	EQU	*
0080                    	XTEXT	ASCII
0080                    	SPACE	3,10
                        **	ASCII CHARACTER EQUIVALENCES.

      = 0000            NUL	EQU	000Q			; null
      = 0007            BELL	EQU	007Q			; bell
      = 0008            BKSP	EQU	010Q			; backspace
      = 0008            BS	EQU	BKSP
      = 0009            TAB	EQU	011Q			; horizontal tab
      = 000A            LF	EQU	012Q			; line feed
      = 000A            NL	EQU	012Q			; new line (HDOS)
      = 000C            FF	EQU	014Q			; form feed
      = 000D            CR	EQU	015Q			; carriage return
      = 001B            ESC	EQU	033Q			; escape
      = 007F            DEL	EQU	177Q			; delete

                        *	Specials

      = 0080            EOL	EQU	200Q			; end of line flag
      = 0080            NULL	EQU	200Q			; pad character
      = 0000            NUL2	EQU	0			; ditto
      = 007F            RUBOUT	EQU	DEL			; rubout/delete
      = 0016            C.SYN	EQU	026Q			; SYNC
      = 0002            C.STX	EQU	002Q			; STX
      = 0027            QUOTE	EQU	047Q			; quote character (")
      = 008A            ENL	EQU	NL+EOL			; NL + end-of-line flag

                        *	Control keys

      = 0001            CTLA	EQU	'A'-'@' 		; CTRL/A
      = 0002            CTLB	EQU	'B'-'@' 		; CTRL/B
      = 0003            CTLC	EQU	'C'-'@' 		; CTRL/C
      = 0004            CTLD	EQU	'D'-'@' 		; CTRL/D
      = 0005            CTLE	EQU	'E'-'@' 		; CTRL/E
      = 000F            CTLO	EQU	'O'-'@' 		; CTRL/O
      = 0010            CTLP	EQU	'P'-'@' 		; CTRL/P
      = 0011            CTLQ	EQU	'Q'-'@' 		; CTRL/Q
      = 0012            CTLR	EQU	'R'-'@' 		; CTRL/R
      = 0013            CTLS	EQU	'S'-'@' 		; CTRL/S
      = 0018            CTLX	EQU	'X'-'@' 		; CTRL/X
      = 001A            CTLZ	EQU	'Z'-'@' 		; CTRL/Z
0080                    	XTEXT	MTRRAM
0080                    MTRRAM	SPACE	4,10
                        **	MTR - PAM/8 EQUIVALENCES.
                        *
                        *	THIS DECK CONTAINS SYMBOLIC DEFINITIONS USED TO
                        *	MAKE USE OF THE PAM-8 CONTROL BYTES.
0080                    	SPACE	3,10
                        **	FRONT PANEL CONTROL BITS.
                        *
                        *	CB.*  set in OP.CTL
                        *	CB2.* set in OP2.CTL
                        *

      = 0010            CB.SSI	EQU	00010000B		; SINGLE STEP INTERRUPT
      = 0020            CB.MTL	EQU	00100000B		; MONITOR LIGHT
      = 0040            CB.CLI	EQU	01000000B		; CLOCK INTERRUPT ENABLE
      = 0080            CB.SPK	EQU	10000000B		; SPEAKER ENABLE

      = 0001            CB2.SSI EQU	00000001B		; Single Step Interrupt
      = 0002            CB2.CLI EQU	00000010B		; Clock Interrupt Enable
      = 0020            CB2.ORG EQU	00100000B		; ORG 0 Select
      = 0040            CB2.SID EQU	01000000B		; Side 1 Select
0080                    	SPACE	3,10
                        **	Secondary Control Bits
                        *

                        **	MONITOR MODE FLAGS.

      = 0000            DM.MR	EQU	0			; MEMORY READ
      = 0001            DM.MW	EQU	1			; MEMORY WRITE
      = 0002            DM.RR	EQU	2			; REGISTER READ
      = 0003            DM.RW	EQU	3			; REGISTER WRITE
0080                    	SPACE	3,10
                        **	USER OPTION BITS.
                        *
                        *	THESE BITS ARE SET IN CELL .MFLAG.

      = 0080            UO.HLT	EQU	10000000B		; DISABLE HALT PROCESSING
      = 0040            UO.NFR	EQU	CB.CLI			; NO REFRESH OF FRONT PANEL
      = 0002            UO.DDU	EQU	00000010B		; DISABLE DISPLAY UPDATE
      = 0001            UO.CLK	EQU	00000001B		; ALLOW PRIVATE INTERRUPT PROCESSING
0080                    	SPACE	3,10
                        **	RAM CELLS USED BY H8MTR.
                        *

      = 2000            .START	EQU	040000A 		; START DUMP ADDRESS
      = 2002            .IOWRK	EQU	040002A 		; IN OR OUT INSTRUCTION
      = 2005            .REGI	EQU	040005A 		; DISPLAYED REGISTER INDEX
      = 2006            .DSPROT EQU	040006A 		; PERIOD FLAG BYTE
      = 2007            .DSPMOD EQU	040007A 		; DISPLAY MODE
      = 2008            .MFLAG	EQU	040010A 		; USER OPTION BYTE
      = 2009            .CTLFLG EQU	040011A 		; PANEL CONTROL BYTE
      = 200B            .ALEDS	EQU	040013A 		; ABUSS LEDS
      = 2011            .DLEDS	EQU	040021A 		; DBUSS LEDS
      = 2014            .ABUSS	EQU	040024A 		; ABUSS REGISTER
      = 2017            .CRCSUM EQU	040027A 		; CRCSUM WORD
      = 2019            .TPERRX EQU	040031A 		; TAPE ERROR EXIT VECTOR
      = 201B            .TICCNT EQU	040033A 		; CLOCK TICK COUNTER
      = 201D            .REGPTR EQU	040035A 		; REGISTER POINTER
      = 201F            .UIVEC	EQU	040037A 		; USER INTERRUPT VECTORS
      = 2034            .NMIRET EQU	040064A 		; H88/H89 NMI Return Address
      = 2036            .CTL2FL EQU	040066A 		; OP2.CTL Control Byte
0080                    	XTEXT	HOSDEF
0080                    	SPACE	3,10
                        **	HOSDEF - Define HOS Parameters.
                        *

      = 0030            VERS	equ	3*16+0			; VERSION 3.0			/3.0a/

      = 00FF            SYSCALL equ	377Q			; SYSCALL INSTRUCTION

0000                    	org	0

                        *	Resident Functions

0000   (0001)           .EXIT	ds	1			; EXIT (MUST BE FIRST)
0001   (0001)           .SCIN	ds	1			; SCIN
0002   (0001)           .SCOUT	ds	1			; SCOUT
0003   (0001)           .PRINT	ds	1			; PRINT
0004   (0001)           .READ	ds	1			; READ
0005   (0001)           .WRITE	ds	1			; WRITE
0006   (0001)           .CONSL	ds	1			; SET/CLEAR CONSOLE OPTIONS
0007   (0001)           .CLRCO	ds	1			; CLEAR CONSOLE BUFFER
0008   (0001)           .LOADO	ds	1			; LOAD AN OVERLAY (obsolete)	/3.0a/
0009   (0001)           .VERS	ds	1			; RETURN HDOS VERSION NUMBER
000A   (0001)           .GDA	ds	1			; Get Device Driver Address	/3.0a/
000B   (0001)           .CRC16	ds	1			; CRC a block of memory 	/3.0a/
000C   (0001)           .SYSRES ds	1			; PRECEDING FUNCTIONS ARE RESIDENT


                        *	*HDOSOVL0.SYS*  FUNCTIONS

0020                    	org	40Q

0020   (0001)           .LINK	ds	1			; LINK	(MUST BE FIRST)
0021   (0001)           .CTLC	ds	1			; CTL-C
0022   (0001)           .OPENR	ds	1			; OPENR
0023   (0001)           .OPENW	ds	1			; OPENW
0024   (0001)           .OPENU	ds	1			; OPENU
0025   (0001)           .OPENC	ds	1			; OPENC
0026   (0001)           .CLOSE	ds	1			; CLOSE
0027   (0001)           .POSIT	ds	1			; POSITION
0028   (0001)           .DELET	ds	1			; DELETE
      = 0028            .DELETE equ	.DELET
0029   (0001)           .RENAM	ds	1			; RENAME
      = 0029            .RENAME equ	.RENAM
002A   (0001)           .SETTP	ds	1			; SETTOP
      = 002A            .SETTOP equ	.SETTP
002B   (0001)           .DECODE ds	1			; NAME DECODE
002C   (0001)           .NAME	ds	1			; GET FILE NAME FROM CHANNEL
002D   (0001)           .CLEAR	ds	1			; CLEAR CHAN
002E   (0001)           .CLEARA ds	1			; CLEAR ALL CHANS
002F   (0001)           .ERROR	ds	1			; LOOKUP ERROR
0030   (0001)           .CHFLG	ds	1			; CHANGE FLAGS
0031   (0001)           .DISMT	ds	1			; FLAG SYSTEM DISK DISMOUNTED
0032   (0001)           .LOADD	ds	1			; LOAD DEVICE DRIVER

                        *	*HDOSOVL1.SYS*  FUNCTIONS

0080                    	org	200Q

0080   (0001)           .MOUNT	ds	1			; MOUNT  (MUST BE FIRST)
0081   (0001)           .DMOUN	ds	1			; DISMOUNT
      = 0081            .DMOUNT equ	.DMOUN
0082   (0001)           .MONMS	ds	1			; MOUNT/NO MESSAGE
0083   (0001)           .DMNMS	ds	1			; DISMOUNT/NO MESSAGE
0084   (0001)           .RESET	ds	1			; RESET = DISMOUNT/MOUNT OF UNIT
0085   (0001)           .RESNMS ds	1			; RESET/NO (OR USER) MESSAGE
0086   (0001)           .DAD	ds	1			; Dismount All Disks
0087                    	XTEXT	ECDEF
0087                    	SPACE	4,10
                        **	ERROR CODE DEFINITIONS.

0000                    	ORG	0

0000   (0001)           	DS	1		; NO ERROR #0
0001   (0001)           EC.EOF	DS	1		; END OF FILE
0002   (0001)           EC.EOM	DS	1		; END OF MEDIA
0003   (0001)           EC.ILC	DS	1		; ILLEGAL SCALL CODE
0004   (0001)           EC.CNA	DS	1		; CHANNEL NOT AVAILABLE
0005   (0001)           EC.DNS	DS	1		; DEVICE NOT SUITABLE
0006   (0001)           EC.IDN	DS	1		; ILLEGAL DEVICE NAME
0007   (0001)           EC.IFN	DS	1		; ILLEGAL FILE NAME
0008   (0001)           EC.NRD	DS	1		; NO ROOM FOR DEVICE DRIVER
0009   (0001)           EC.FNO	DS	1		; CHANNEL NOT OPEN
000A   (0001)           EC.ILR	DS	1		; ILLEGAL REQUEST
000B   (0001)           EC.FUC	DS	1		; FILE USAGE CONFLICT
000C   (0001)           EC.FNF	DS	1		; FILE NAME NOT FOUND
000D   (0001)           EC.UND	DS	1		; UNKNOWN DEVICE
000E   (0001)           EC.ICN	DS	1		; ILLEGAL CHANNEL NUMBER
000F   (0001)           EC.DIF	DS	1		; DIRECTORY FULL
0010   (0001)           EC.IFC	DS	1		; ILLEGAL FILE CONTENTS
0011   (0001)           EC.NEM	DS	1		; NOT ENOUGH MEMORY
0012   (0001)           EC.RF	DS	1		; READ FAILURE
0013   (0001)           EC.WF	DS	1		; WRITE FAILURE
0014   (0001)           EC.WPV	DS	1		; WRITE PROTECTION VIOLATION
0015   (0001)           EC.WP	DS	1		; DISK WRITE PROTECTED
0016   (0001)           EC.FAP	DS	1		; FILE ALREADY PRESENT
0017   (0001)           EC.DDA	DS	1		; DEVICE DRIVER ABORT
0018   (0001)           EC.FL	DS	1		; FILE LOCKED
0019   (0001)           EC.FAO	DS	1		; FILE ALREADY OPEN
001A   (0001)           EC.IS	DS	1		; ILLEGAL SWITCH
001B   (0001)           EC.UUN	DS	1		; UNKNOWN UNIT NUMBER
001C   (0001)           EC.FNR	DS	1		; FILE NAME REQUIRED
001D   (0001)           EC.DIW	DS	1		; DEVICE IS NOT WRITABLE (OR WRITE LOCKED)
001E   (0001)           EC.UNA	DS	1		; UNIT NOT AVAILABLE
001F   (0001)           EC.ILV	DS	1		; ILLEGAL VALUE
0020   (0001)           EC.ILO	DS	1		; ILLEGAL OPTION
0021   (0001)           EC.VPM	DS	1		; VOLUME PRESENTLY MOUNTED ON DEVICE
0022   (0001)           EC.NVM	DS	1		; NO VOLUME PRESENTLY MOUNTED
0023   (0001)           EC.FOD	DS	1		; FILE OPEN ON DEVICE
0024   (0001)           EC.NPM	DS	1		; NO PROVISIONS MADE FOR REMOUNTING MORE DISKS
0025   (0001)           EC.DNI	DS	1		; DISK NOT INITIALIZED
0026   (0001)           EC.DNR	DS	1		; DISK IS NOT READABLE
0027   (0001)           EC.DSC	DS	1		; DISK STRUCTURE IS CORRUPT
0028   (0001)           EC.NCV	DS	1		; NOT CORRECT VERSION OF HDOS
0029   (0001)           EC.NOS	DS	1		; NO OPERATING SYSTEM MOUNTED
002A   (0001)           EC.IOI	DS	1		; ILLEGAL OVERLAY INDEX
002B   (0001)           EC.OTL	DS	1		; OVERLAY TOO LARGE
002C   (0001)           EC.LAD	DS	1		; File is locked against delete 	/3.0a/
002D   (0001)           EC.FIX	DS	1		; Device media is fixed 		/3.0a/
002E   (0001)           EC.ILA	DS	1		; Illegal Load Address			/3.0a/
002F   (0001)           EC.DNL	DS	1		; Device Not Loaded			/3.0a/
0030   (0001)           EC.DNP	DS	1		; Device Not Locked in Memory		/3.0a/
0031   (0001)           EC.DFM	DS	1		; Device is Fixed in Memory		/3.0a/
0032   (0001)           EC.IDF	DS	1		; Illegal Date Format			/3.0a/
0033   (0001)           EC.ITS	DS	1		; Illegal Time Format			/3.0a/
0034   (0001)           EC.CNR	DS	1		; System Clock Not Resident		/3.0a/
0035   (0001)           EC.SDR	DS	1		; System Disk is Reset			/3.0a/
0036   (0001)           EC.LBO	DS	1		; Line Buffer Overflow			/3.0a/
0037   (0001)           EC.CUI	DS	1		; Can't Unlink from Interrupt Vector	/3.0a/
0038                    	XTEXT	DDFDEF
0038                    	SPACE	3,10
                        **	DIRECTORY DEVICE FORMAT DEFINITION.
                        *

0000                    	ORG	0

0000   (0009)           DDF.BOO DS	9			; 2K BOOT PROGRAM
      = 0009            DDF.BOL EQU	*			; LENGTH OF BOOT
0009   (0001)           DDF.LAB DS	1			; LABEL SECTOR
000A   (0000)           DDF.USR DS	0			; BEGINNING OF OPEN SPACE
000A                    	XTEXT	DIRDEF
000A                    	SPACE	3,10
                        **	DIRECTORY ENTRY FORMAT.

0000                    	ORG	0

      = 00FF            DF.EMP	EQU	377Q			; ENTRY EMPTY
      = 00FE            DF.CLR	EQU	376Q			; ENTRY EMPTY, REMAINDER ALSO CLEAR

0000   (0008)           DIR.NAM DS	8			; NAME
0008   (0003)           DIR.EXT DS	3			; EXTENSION
      = 000B            DIRIDL	equ	*			; file identification length	/3.0a/

000B   (0001)           DIR.CTH DS	1			; creation time (BCD hours)	/3.0a/
000C   (0001)           DIR.CTM DS	1			; creation date (BCD minutes)	/3.0a/

000D   (0001)           DIR.NOA DS	1			; number of accesses		/3.0a/
000E   (0001)           DIR.FLG DS	1			; FLAGS
000F   (0001)           DIR.USR DS	1			; user area mask		/3.0a/
0010   (0001)           DIR.FGN DS	1			; FIRST GROUP NUMBER
0011   (0001)           DIR.LGN DS	1			; LAST GROUP NUMBER
0012   (0001)           DIR.LSI DS	1			; LAST SECTOR INDEX (IN LAST GROUP)
0013   (0002)           DIR.CRD DS	2			; CREATION DATE
0015   (0002)           DIR.ACD DS	2			; last access date		/3.0a/

      = 0017            DIRELEN EQU	*			; DIRECTORY ENTRY LENGTH
0017                    	XTEXT	DIFDEF
0017                    DIFDEF	SPACE	4,10
                        **	DIRECTORY FILE FLAGS.

      = 0080            DIF.SYS EQU	10000000B		; System file
      = 0040            DIF.LOC EQU	01000000B		; Locked from flag changes
      = 0020            DIF.WP	EQU	00100000B		; Write protected
      = 0010            DIF.CNT EQU	00010000B		; Contiguous file
      = 0008            DIF.ARC EQU	00001000B		; File archive attribute	/3.0a/
      = 0004            DIF.BAD EQU	00000100B		; File is damaged		/3.0a/
      = 0002            DIF.DL	EQU	00000010B		; Locked against delete 	/3.0a/
      = 0001            DIF.USR EQU	00000001B		; User-defined			/3.0a/
0017                    	XTEXT	DISDEF
0017                    DISDEF	SPACE	3,10
                        **	DIRECTORY BLOCK FORMAT.

0000                    	ORG	0

      = 0000            DIS.ENT EQU	*			; FIRST ENTRY ADDRESS

0000   (01FA)           	DS	22*DIRELEN		; 22 DIRECTORY ENTRYS PER BLOCK
01FA   (0001)           	DS	1			; 0 BYTE = END OF ENTRYS IN THIS BLOCK

01FB                    	ORG	512-5			; AT END OF BLOCK

01FB   (0001)           DIS.ENL DS	1			; LENGTH OF EACH ENTRY (=DIRELEN)
01FC   (0002)           DIS.SEC DS	2			; BLOCK # OF THIS BLOCK,
01FE   (0002)           DIS.LNK DS	2			; BLOCK # OF NEXT BLOCK, =0 IF LAST
0200                    	XTEXT	LABDEF
0200                    	SPACE	3,10
                        **	DISK LABEL SECTOR FORMATS.

0000                    	ORG	0

0000   (0001)           LAB.SER DS	1			; SERIAL NUMBER OF VOLUME
0001   (0002)           LAB.IND DS	2			; INITIALIZATION DATE
0003   (0002)           LAB.DIS DS	2			; SECTOR NUMBER OF 1ST DIRECTORY SECTOR
0005   (0002)           LAB.GRT DS	2			; INDEX OF GRT SECTOR
0007   (0001)           LAB.SPG DS	1			; SECTORS PER GROUP

      = 0000            LAB.DAT EQU	0			; DATA VOLUME ONLY
      = 0001            LAB.SYS EQU	1			; SYSTEM VOLUME
      = 0002            LAB.NOD EQU	2			; VOLUME HAS NO DIRECTORY

0008   (0001)           LAB.VLT DS	1			; VOLUME TYPE
0009   (0001)           LAB.VER DS	1			; VERSION OF INIT17 THAT INITED DISK

000A   (0002)           LAB.RGT DS	2			; RGT sector number

      = 000C            LAB.VPR EQU	*			; Volume dependant data
000C   (0002)           LAB.SIZ DS	2			;  Volume Size (Bytes/256)
000E   (0002)           LAB.PSS DS	2			;  Physical Sector Size
0010   (0001)           LAB.VFL DS	1			;  Volume dependant Flags
      = 0001            VFL.NSD EQU	00000001B		;   Number of Sides:  1 => 2
      = 0002            VFL.DTD EQU	00000010b		;   96 tracks per inch		/3.0a/
      = 0002            VFL.80T EQU	VFL.DTD 		;   (ditto)
      = 0004            VFL.FIX EQU	00000100b		;   Media is fixed		/3.0a/
      = 0005            LAB.VPL EQU	*-LAB.VPR		; Length of volume dependant data

                        	ERRMI	5-LAB.VPL
0011   (0000)           	DS	5-LAB.VPL		; Reserved

0011   (003C)           LAB.LAB DS	60			; LABEL
      = 003C            LAB.LBL EQU	*-LAB.LAB		; LABEL LENGTH
004D   (0002)           	DS	2			; Reserved for 0 bytes

      = 004F            LAB.AUX EQU	*			; Auxiliary Data
004F   (0001)           LAB.SPT DS	1			;  Sectors per Track
      = 0001            LAB.AXL EQU	*-LAB.AUX		; Length of Aux. Data

0050   (0002)           LAB.LVN DS	2			; Long volume number		/3.0a/
0052                    	XTEXT	HOSEQU
0052                    	SPACE	4,10
                        **	HDOS SYSTEM EQUIVALENCES.					/3.0a/
                        *

2040                    	ORG	040100A

2040   (0008)           S.EXITA DS	8			; Jump to System Exit

2048   (0010)           D.CON	DS	16			; Disk Constants

      = 2058            SYDD	EQU	*			; System Disk Entry Point

2058   (0048)           D.VEC	DS	24*3			; H17 Disk Vectors
20A0   (001F)           D.RAM	DS	31			; H17 Disk Work Area

20BF   (0024)           S.VAL	DS	36			; SYSTEM VALUES
20E3   (0093)           S.INT	DS	147			; SYSTEM INTERNAL WORK AREAS

2176   (0002)           S.SOVR	DS	2			; STACK OVERFLOW WARNING
2178   (0108)           	DS	042200A-*		; SYSTEM STACK
      = 010A            STACKL	EQU	*-S.SOVR		; STACK SIZE

      = 2280            STACK	EQU	*			; LWA+1 SYSTEM STACK
      = 2280            USERFWA EQU	*			; USER FWA

                        *	Ensure Compatibility

                        	ERRNZ	040130A-SYDD
                        	ERRNZ	040277A-S.VAL
                        	ERRNZ	040343A-S.INT
                        	ERRNZ	042200A-USERFWA
2280                    	XTEXT	EDCON
2280                    	SPACE	4,10
                        **	D.CON DETAILED EQUIVALENCES.
                        *
                        *	HOSEQU MUST BE MODIFIED WHEN THIS TABLE IS MODIFIED.

2048                    	ORG	D.CON

2048   (0002)           D.XITA	DS	2	;SEE SYSTEM ROM FOR DESCRIPTION
204A   (0001)           D.WRITA	DS	1
204B   (0001)           D.WRITB	DS	1
204C   (0001)           D.WRITC	DS	1
204D   (0001)           D.MAIA	DS	1
204E   (0001)           D.LPSA	DS	1
204F   (0001)           D.SDPA	DS	1
2050   (0001)           D.SDPB	DS	1
2051   (0001)           D.STSA	DS	1
2052   (0001)           D.STSB	DS	1
2053   (0001)           D.WHDA	DS	1
2054   (0001)           D.WNHA	DS	1
2055   (0001)           D.WSCA	DS	1

2056   (0002)           D.ERTS	DS	2	;TRACK AND SECTOR OF LAST DISK ERRORS
2058                    	XTEXT	EDRAM
2058                    	SPACE	4,10
                        **	EDRAM - DISK RAM WORKAREA DEFINITION.
                        *
                        *	ZEROED UPON BOOTING UP.
                        *
                        *	HOSEQU MUST BE CHANGED WHEN THIS DECK IS CHANGED.

20A0                    	ORG	D.RAM

20A0   (0001)           D.TT	DS	1	;TARGET TRACK (CURRENT OPERATION)
20A1   (0001)           D.TS	DS	1	;TARGET SECTOR (CURRENT OPERATION)

20A2   (0001)           D.DVCTL	DS	1	;DEVICE CONTROL BYTE

20A3   (0001)           D.DLYMO	DS	1	;MOTOR ON DELAY COUNT
20A4   (0001)           D.DLYHS	DS	1	;HEAD SETTLE DELAY COUNTER

20A5   (0002)           D.TRKPT	DS	2	;ADDRESS IN D.DRVTB FOR TRACK NUMBER
20A7   (0002)           D.VOLPT	DS	2	;ADDRESS IN D.DRVTB FOR VOLUME NUMBER

20A9   (0008)           D.DRVTB	DS	2*4	;TRACK NUMBER AND VOLUME NUMBER FOR 4 DRIVES

20B1   (0001)           D.HECNT	DS	1	;HARD ERROR COUNT
20B2   (0002)           D.SECNT	DS	2	;SOFT ERROR COUNT
20B4   (0001)           D.OECNT	DS	1	;OPERATION ERROR COUNT

                        *	GLOBAL DISK ERROR COUNTERS

20B5   (0000)           D.ERR	DS	0	;BEGINNING OF ERROR BLOCK
20B5   (0001)           D.E.MDS	DS	1	;MISSING DATA SYNC
20B6   (0001)           D.E.HSY	DS	1	;MISSING HEADER SYNC
20B7   (0001)           D.E.CHK	DS	1	;DATA CHECKSUM
20B8   (0001)           D.E.HCK	DS	1	;HEADER CHECKSUM
20B9   (0001)           D.E.VOL	DS	1	;WRONG VOLUME NUMBER
20BA   (0001)           D.E.TRK	DS	1	;BAD TRACK SEEK
20BB   (0000)           D.ERRL	DS	0	;LIMIT OF ERROR COUNTERS

                        *	I/O OPERATION COUNTS

20BB   (0002)           D.OPR	DS	2
20BD   (0002)           D.OPW	DS	2

      = 001F            D.RAML	EQU	*-D.RAM
20BF                    	XTEXT	ESVAL
20BF                    	SPACE	4,10
                        **	S.VAL - SYSTEM VALUE DEFINTIONS.
                        *
                        *	THESE VALUES ARE SET AND MAINTAINED BY THE SYSTEM.
                        *
                        *	THE DECK HOSEQU MUST BE MODIFIED WHEN THIS IS MODIFIED.

20BF                    	ORG	S.VAL

20BF   (0009)           S.DATE	DS	9			; SYSTEM DATE (IN ASCII)
20C8   (0002)           S.DATC	DS	2			; CODED DATE
20CA   (0003)           S.TIME	DS	3			; TIME (BCD HH MM SS)		/3.0a/
20CD   (0001)           S.CLKTR DS	1			; 0 if no clock task resident	/3.0a/
20CE   (0002)           S.HIMEM DS	2			; HARDWARE HIGH MEMORY ADRESS+1

20D0   (0002)           S.SYSM	DS	2			; FWA RESIDENT SYSTEM

20D2   (0002)           S.USRM	DS	2			; LWA USER MEMORY

20D4   (0002)           	DS	2			; obsolete (must be zero!!)	/3.0a/
20D6                    	SPACE	3,10
                        **	THE FOLLOWING CELLS SHOULD BE MODIFIED/READ ONLY VIA THE .CONSL SCALL

      = 0080            CSL.ECH EQU	10000000B		; SUPPRESS ECHO
      = 0004            CSL.RAW EQU	00000100B		; Raw Mode I/O
      = 0002            CSL.WRP EQU	00000010B		; WRAP LINES AT WIDTH
      = 0001            CSL.CHR EQU	00000001B		; OPERATE IN CHARACTER MODE

      = 0000            I.CSLMD EQU	0			; S.CSLMD IS FIRST BYTE
20D6   (0001)           S.CSLMD DS	1			; CONSOLE MODE


      = 0080            CTP.BKS EQU	10000000B		; TERMINAL PROCESSES BACKSPACES
      = 0040            CTP.FF	EQU	01000000B		; Terminal Processes Form-Feed
      = 0020            CTP.MLI EQU	00100000B		; MAP LOWER CASE TO UPPER ON INPUT
      = 0010            CTP.MLO EQU	00010000B		; MAP LOWER CASE TO UPPER ON OUTPUT
      = 0008            CTP.2SB EQU	00001000B		; TERMINAL NEEDS TWO STOP BITS
      = 0004            CTP.HHS EQU	00000100B		; Terminal uses hdwr handshake	/3.0a/
      = 0002            CTP.BKM EQU	00000010B		; MAP BKSP (UPON INPUT) TO RUBOUT
      = 0001            CTP.TAB EQU	00000001B		; TERMINAL SUPPORTS TAB CHARACTERS

      = 0001            I.CONTY EQU	1			; S.CONTY IS 2ND BYTE
                        	ERRNZ	*-S.CSLMD-I.CONTY
20D7   (0001)           S.CONTY DS	1			; CONSOLE TYPE FLAGS


      = 0002            I.CUSOR EQU	2			; S.CUSOR IS 3RD BYTE
                        	ERRNZ	*-S.CSLMD-I.CUSOR
20D8   (0001)           S.CUSOR DS	1			; CURRENT CURSOR POSITION


      = 0003            I.CONWI EQU	3			; S.CONWI IS 4TH BYTE
                        	ERRNZ	*-S.CSLMD-I.CONWI
20D9   (0001)           S.CONWI DS	1			; CONSOLE WIDTH


      = 0001            CO.FLG	EQU	00000001B		; CTL-O FLAG
      = 0080            CS.FLG	EQU	10000000B		; CTL-S FLAG

      = 0004            I.CONFL EQU	4			; S.CONFL IS 5TH BYTE
                        	ERRNZ	*-S.CSLMD-I.CONFL
20DA   (0001)           S.CONFL DS	1			; CONSOLE FLAGS


20DB   (0002)           S.CAADR DS	2			; ADDRESS FOR ABORT PROCESSING (>256 IF VALID)
20DD   (0006)           S.CCTAB DS	6			; ADDR FOR CTL-A, CTL-B, CTL-C PROCESSING
20E3                    	XTEXT	ESINT
20E3                    	SPACE	4,10
                        **	S.INT - SYSTEM INTERNAL WORKAREA DEFINITIONS.
                        *
                        *	THESE CELLS ARE REFERENCED BY OVERLAYS AND MAIN CODE, AND
                        *	MUST THEREFORE RESIDE IN FIXED LOW MEMORY.

20E3                    	ORG	S.INT

                        **	CONSOLE STATUS FLAGS

20E3   (0001)           S.CDB	DS	1			; CONSOLE DESCRIPTOR BYTE
      = 0000            CDB.H85	EQU	00000000B
      = 0001            CDB.H84 EQU	00000001B		; =0 IF H8-5, =1 IF H8-4
20E4   (0002)           S.BAUD	DS	2			; [0-14]  H8-4 BAUD RATE, =0 IF H8-5
                        *					; [15]	  =1 IF BAUD RATE => 2 STOP BITS

                        **	TABLE ADDRESS WORDS

20E6   (0002)           S.DLINK DS	2			; ADDRESS OF DATA IN HDOS CODE
20E8   (0002)           S.TFWA	DS	2			; FWA Task Table		/3.1a/
20EA   (0002)           S.CFWA	DS	2			; FWA CHANNEL TABLE
20EC   (0002)           S.DFWA	DS	2			; FWA DEVICE TABLE
20EE   (0002)           S.RFWA	DS	2			; FWA RESIDENT HDOS CODE

                        **	DEVICE DRIVER DELAYED LOAD FLAGS

20F0   (0002)           S.DDLDA DS	2			; DRIVER LOAD ADDRESS (HIGH BYTE=0 IF NO LOAD PENDING)
20F2   (0002)           S.DDLEN DS	2			; CODE LENGTH IN BYTES
20F4   (0001)           S.DDGRP DS	1			; GROUP NUMBER FOR DRIVER
20F5   (0001)           	DS	1			; HOLD PLACE
20F6   (0002)           S.DDDTA DS	2			; DEVICE'S ADDRESS IN DEVLST +DEV.RES
20F8   (0001)           S.DDOPC DS	1			; OPEN OPCODE PENDEDING

20F9   (000D)           	DS	13			; reserved

                        *	SYSCALL PROCESSING WORK AREAS

                        	ERRNZ	*-041006A
2106   (0001)           S.CACC	DS	1			; (ACC) UPON SYSCALL
2107   (0001)           S.CODE	DS	1			; SYSCALL INDEX IN PROGRESS

                        *	JUMPS TO ROUTINES IN RESIDENT HDOS CODE

2108   (0000)           S.JUMPS DS	0			; START OF DUMP VECTORS
2108   (0003)           S.SDD	DS	3			; JUMP TO STAND-IN DEVICE DRIVER
210B   (0003)           S.FASER DS	3			; JUMP TO FATSERR (FATAL SYSTEM ERROR)
210E   (0003)           S.DIREA DS	3			; JUMP TO DIREAD (DISK FILE READ)
2111   (0003)           S.FCI	DS	3			; JUMP TO FCI (FETCH CHANNEL INFO)
2114   (0003)           S.SCI	DS	3			; JUMP TO SCI (STORE CHANNEL INFO)
2117   (0003)           S.GUP	DS	3			; JUMP TO GUP (GET UNIT POINTER)

211A   (0001)           S.MOUNT DS	1			; <>0 IF THE SYSTEM DISK IS MOUNTED
211B   (0001)           	DS	1			; reserved			/3.0a/

211C   (0001)           S.BOOTF DS	1			; BOOT FLAGS
      = 0001            BOOT.P	EQU	00000001B		; EXECUTE PROLOGUE UPON BOOTUP

211D   (0003)           	DS	3			; reserved
2120                    	SPACE	4,10
                        **	ACTIVE I/O AREA.
                        *
                        *	THE AIO.XXX AREA CONTAINS INFORMATION ABOUT THE I/O OPERATION
                        *	CURRENTLY BEING PERFORMED. THE INFORMATION IS OBTAINED FROM
                        *	THE CHANNEL TABLE, AND WILL BE RESTORED THERE WHEN DONE.
                        *
                        *	NORMALLY, THE AIO.XXX INFORMATION WOULD BE OBTAINED DIRECTLY
                        *	FROM VARIOUS SYSTEM TABLES VIA POINTER REGISTERS. SINCE THE
                        *	8080 HAS NO GOOD INDEXED ADDRESSING, THE DATA IS MANUALLY
                        *	COPIED INTO THE AIO.XXX CELLS BEFORE PROCESSING, AND
                        *	BACKDATED AFTER PROCESSING.

                        	ERRNZ	*-041040A
2120   (0003)           AIO.VEC DS	3			; JUMP INSTRUCTION
      = 2121            AIO.DDA EQU	*-2			; DEVICE DRIVER ADDRESS
2123   (0001)           AIO.FLG DS	1			; FLAG BYTE
2124   (0002)           AIO.GRT DS	2			; ADDRESS OF GROUP RESERV TABLE
2126   (0001)           AIO.SPG DS	1			; SECTORS PER GROUP
2127   (0001)           AIO.CGN DS	1			; CURRENT GROUP NUMBER
2128   (0001)           AIO.CSI DS	1			; CURRENT SECTOR INDEX
2129   (0001)           AIO.LGN DS	1			; LAST GROUP NUMBER
212A   (0001)           AIO.LSI DS	1			; LAST SECTOR INDEX
212B   (0002)           AIO.DTA DS	2			; DEVICE TABLE ADDRESS
212D   (0002)           AIO.DES DS	2			; DIRECTORY SECTOR
212F   (0002)           AIO.DEV DS	2			; DEVICE CODE
2131   (0001)           AIO.UNI DS	1			; UNIT NUMBER (0-9)

2132   (0017)           AIO.DIR DS	DIRELEN 		; DIRECTORY ENTRY

2149   (0001)           AIO.CNT DS	1			; SECTOR COUNT
214A   (0001)           AIO.EOM DS	1			; END OF MEDIA FLAG
214B   (0001)           AIO.EOF DS	1			; END OF FILE FLAG
214C   (0002)           AIO.TFP DS	2			; TEMP FILE POINTERS
214E   (0002)           AIO.CHA DS	2			; ADDRESS OF CHANNEL BLOCK (IOC.DDA)
2150                    	SPACE	4,10
                        *	these cells set by monitor boot code

2150   (0001)           S.BDA	DS	1			; Boot Device Address (Setup by ROM)
2151   (0002)           S.SCR	DS	2			; SYSTEM SCRATCH AREA ADDRESS
2153   (0003)           	DS	3
2156   (0001)           S.OSI	DS	1			; Operating system index	/3.0a/
2157   (0001)           S.OSO	DS	1			; Operating system occurance	/3.0a/
2158   (0003)           S.OSZ	DS	3			; Operating system sector zero	/3.0a/
215B                    	XTEXT	MTRDEF
215B                    	SPACE	4,10
                        **	HDOS MONITOR PRIVATE RAM AREA DEFINITIONS.

0000                    	ORG	0

0000   (0001)           M.SYSM	DS	1			; SYSCALL ITTERATION COUNT
0001   (0001)           	DS	1			; STAND-ALONE FLAG (obsolete)	/3.0a/

0002   (0002)           M.CSL	DS	2			; Address of console data area	/3.0a/

0004   (0001)           M.SUNI	DS	1			; System Unit Number
0005   (0002)           M.SYDD	DS	2			; Address of Raw System Driver
0007                    	XTEXT	DEVDEF
0007                    	SPACE	4,10
                        ***	DEVICE TABLE ENTRYS.

0000                    	ORG	0

0000   (0002)           DEV.NAM DS	2			; DEVICE NAME
      = 0000            DV.EL	EQU	00000000B		; END OF DEVICE LIST FLAG
      = 0001            DV.NU	EQU	00000001B		; DEVICE ENTRY NOT IN USE

0002   (0001)           DEV.RES DS	1			; DRIVER RESIDENSE CODE
      = 0001            DR.IM	EQU	00000001B		; DRIVER IN MEMORY
      = 0002            DR.PR	EQU	00000010B		; DRIVER PERMANENTLY RESIDENT
      = 0004            DR.FX	equ	00000100b		; Driver FIXED in memory	/3.0a/
      = 0008            DR.UNL	equ	00001000b		; Driver unload pending 	/3.0a/
                        *	equ	00010000b		; Reserved			/3.0a/
      = 00E0            DR.SPL	equ	11100000b		; SET preamble size mask	/3.0a/

0003   (0001)           DEV.JMP DS	1			; JMP TO PROCESSOR
0004   (0002)           DEV.DDA DS	2			; DRIVER ADDRESS
0006   (0001)           DEV.FLG DS	1			; FLAG BYTE
      = 0001            DT.DD	EQU	00000001B		; DIRECTORY DEVICE
      = 0002            DT.CR	EQU	00000010B		; CAPABLE OF READ OPERATION
      = 0004            DT.CW	EQU	00000100B		; CAPABLE OF WRITE OPERATION
      = 0008            DT.RN	EQU	00001000B		; Capable of random access
      = 0010            DT.CH	EQU	00010000B		; Capable of Character mode
      = 0020            DT.FX	EQU	00100000B		; Fixed Media			/3.0a/
      = 0040            DT.P3	EQU	01000000B		; pre-3.0 media 		/3.0a/
      = 0080            DT.UL	EQU	10000000B		; requires unload notification	/3.0a/

0007   (0001)           DEV.MUM DS	1			; MOUNTED UNIT MASK
0008   (0001)           DEV.MNU DS	1			; MAXIMUM NUMBER OF UNITS
0009   (0002)           DEV.UNT DS	2			; ADDRESS OF UNIT SPECIFIC DATA TABLE

000B   (0002)           DEV.DVL DS	2			; DRIVER BYTE LENGTH
000D   (0001)           DEV.DVG DS	1			; DRIVER ROUTINE GROUP ADDRESS

      = 000E            DEVELEN EQU	*			; DEVICE TABLE ENTRY LENGTH
000E                    UNT.TAB	SPACE	4,10
                        **	UNIT SPECIFIC DEVICE DATA TABLE ENTRIES

0000                    	ORG	0

0000   (0001)           UNT.FLG DS	1			; UNIT SPECIFIC  *DEV.FLG*
0001   (0001)           UNT.SPG DS	1			; Sectors Per Group
0002   (0002)           UNT.GRT DS	2			; ADDRESS OF GRT (IF DT.DD)
0004   (0002)           UNT.GTS DS	2			; GRT SECTOR NUMBER
0006   (0002)           UNT.DIS DS	2			; DIRECTORY FIRST SECTOR NUMBER

      = 0008            UNT.SIZ EQU	*			; SIZE OF UNIT SPECIFIC DATA ENTRY
0008                    	XTEXT	IOCDEF
0008                    IOCDEF	SPACE	3,10
                        **	I/O CHANNEL DEFINITIONS.

0000                    	ORG	0

0000   (0002)           IOC.LNK DS	2			; ADDRESS OF NEXT CHANNEL, =0 IF LAST
0002   (0002)           IOC.DDA DS	2			; THREAD JUMP TO DEVICE DRIVER (VIA DEV TABLE)

0004   (0001)           IOC.FLG DS	1			; FILE TYPE FLAGS
      = 0001            FT.DD	EQU	00000001B		;  =1 IF DIRECTORY DEVICE
      = 0002            FT.OR	EQU	00000010B		;  =1 IF OPEN FOR READ
      = 0004            FT.OW	EQU	00000100B		;  =1 IF OPEN FOR WRITE
      = 0008            FT.OU	EQU	00001000B		;  =1 IF OPEN FOR UPDATE
      = 0010            FT.OC	EQU	00010000B		;  =1 IF OPEN FOR CHARACTER MODE
      = 0003            IOC.SQL EQU	*-IOC.DDA		; LENGTH OF INFO FOR SEQUENTIAL FILE

0005   (0002)           IOC.GRT DS	2			; ADDRESS OF GROUP RESERVATION TABLE
0007   (0001)           IOC.SPG DS	1			; SECTORS PER GROUP, THIS DEVICE
0008   (0001)           IOC.CGN DS	1			; CURRENT GROUP NUMBER
0009   (0001)           IOC.CSI DS	1			; CURRENT SECTOR INDEX (IN CURRENT GROUP)
000A   (0001)           IOC.LGN DS	1			; LAST GROUP NUMBER
000B   (0001)           IOC.LSI DS	1			; LAST SECTOR INDEX (IN LAST GROUP)
      = 0008            IOC.DRL EQU	*-IOC.FLG		; LENGTH OF INFO NORMALLY COPIED BACK TO
                        *					; THE CHANNEL TABLE
000C   (0002)           IOC.DTA DS	2			; DEVICE TABLE ADDRESS FOR THIS DEVICE
000E   (0002)           IOC.DES DS	2			; SECTOR NUMBER OF DIRECTORY ENTRY
0010   (0002)           IOC.DEV DS	2			; DEVICE CODE
0012   (0001)           IOC.UNI DS	1			; UNIT NUMBER (0-9)
      = 0011            IOC.DIL EQU	*-IOC.DDA		; LENGTH OF INFO FOR DIRECTORY FILE

0013   (0017)           IOC.DIR DS	DIRELEN 		; DIRECTORY ENTRY

      = 002A            IOCELEN EQU	*			; IOC ENTRY LENGTH

      = 0001            IOCCTD	EQU	1			; INDEX OF USER CHANNEL #0 IN CHANTAB (FIRST = 0)
002A                    	XTEXT	FBDEF
002A                    	SPACE	4,10
                        **	FILE BLOCK DEFINITIONS.

0000                    	ORG	0

0000   (0001)           FB.CHA	DS	1			; CHANNEL NUMBER
0001   (0001)           FB.FLG	DS	1			; FLAGS
0002   (0002)           FB.FWA	DS	2			; BUFFER FWA
0004   (0002)           FB.PTR	DS	2			; BUFFER POINTER
0006   (0002)           FB.LIM	DS	2			; LIMIT OF DATA IN BUFFER (READ)
0008   (0002)           FB.LWA	DS	2			; LWA OF BUFFER
000A   (0011)           FB.NAM	DS	4+8+4+1 		; NAME OF FILE
      = 0011            FB.NAML EQU	*-FB.NAM
      = 001B            FBENL	EQU	*			; ENTRY LENGTH
001B                    	XTEXT	DDDEF
001B                    	SPACE	3,10
                        **	DEVICE DRIVER COMMUNICATION FLAGS.
                        *

0000                    	ORG	0

0000   (0001)           DC.REA	DS	1			; READ
0001   (0001)           DC.WRI	DS	1			; WRITE
0002   (0001)           DC.RER	DS	1			; READ REGARDLESS
0003   (0001)           DC.OPR	DS	1			; OPEN FOR READ
0004   (0001)           DC.OPW	DS	1			; OPEN FOR WRITE
0005   (0001)           DC.OPU	DS	1			; OPEN FOR UPDATE
0006   (0001)           DC.CLO	DS	1			; CLOSE
0007   (0001)           DC.ABT	DS	1			; ABORT
0008   (0001)           DC.MOU	DS	1			; MOUNT DEVICE
0009   (0001)           DC.LOD	DS	1			; LOAD DEVICE DRIVER
000A   (0001)           DC.RDY	DS	1			; Device Ready
000B   (0001)           DC.SET	DS	1			; Update SET parameters 	/3.0a/
000C   (0001)           DC.UNL	DS	1			; Unload device driver		/3.0a/
000D   (0001)           DC.INT	DS	1			; Interrupt			/3.0a/
000E   (0001)           DC.DSF	DS	1			; Device-specific function	/3.0a/
000F   (0001)           DC.MAX	DS	1			; MAXIMUM ENTRY INDEX
0010                    	XTEXT	FILDEF
0010                    	SPACE	4,10
                        **	FILDEF - FILE TYPE DEFINITIONS.
                        *
                        *	DB	377Q,FT.XXX

      = 0000            FT.ABS	EQU	0			; ABSOLUTE BINARY
      = 0001            FT.PIC	EQU	1			; POSITION INDEPENDANT CODE
      = 0002            FT.REL	EQU	2			; RELOCATABLE CODE
      = 0003            FT.BAC	EQU	3			; COMPILED BASIC CODE
0010                    	XTEXT	ABSDEF
0010                    ABSDEF	SPACE	3,10
                        **	ABS FORMAT EQUIVALENCES.

0000                    	ORG	0

0000   (0001)           ABS.ID	DS	1	;377Q = BINARY FILE FLAG
0001   (0001)           	DS	1	;FILE TYPE (FT.ABS)
0002   (0002)           ABS.LDA	DS	2	;LOAD ADDRESS
0004   (0002)           ABS.LEN	DS	2	;LENGTH OF ENTIRE RECORD
0006   (0002)           ABS.ENT	DS	2	;ENTRY POINT

0008   (0000)           ABS.COD	DS	0	;CODE STARTS HERE
0008                    	XTEXT	PICDEF
0008                    PICDEF	SPACE	3,10
                        **	PIC FORMAT EQUIVALENCES.

0000                    	ORG	0

0000   (0001)           PIC.ID	DS	1			; 377Q = BINARY FILE FLAG
0001   (0001)           	DS	1			; FILE TYPE (FT.PIC)
0002   (0002)           PIC.LEN DS	2			; LENGTH OF ENTIRE RECORD
0004   (0002)           PIC.PTR DS	2			; INDEX OF START OF PIC TABLE

0006   (0000)           PIC.COD DS	0			; CODE STARTS HERE
0006                    	XTEXT	BSXDEF
0006                    	SPACE	4,10
                        **	BASEX HEADER EQUIVALENCES

0000                    	ORG	0

0000   (0001)           BSX.ID	DS	1			; 377Q = Binary File Flag
0001   (0001)           	DS	1			; File Type (FT.BSX)
0002   (0002)           BSX.PSA DS	2			; Program Start Address
0004   (0002)           BSX.PEA DS	2			; Program End Address
0006   (0002)           BSX.SSA DS	2			; Symbol_Table Start Address
0008   (0002)           BSX.SEA DS	2			; Symbol_Table End Address

000A   (0000)           BSX.COD DS	0			; Code Starts Here
000A                    	STL	'MAIN ROUTINE'
000A                    	EJECT
                        	IF	PIPRES
4800                    	ORG	PIP.WS
                        	ELSE
                        	ENDIF

      = 4800            PIP	EQU	*

4800                    	NOTE	PIP		; Start
4800                    	NOTE	MEML		; End
4800                    	NOTE	RMEML		; Top
4800                    	NOTE	MEML-PIP	; Length
4800                    	NOTE	200000A 	; Limit
                        	ERRPL	MEML-200000A

                        	ERRNZ	*-PIP	;MUST be first thing
4800  C3 2B4E           	JMP	WARM	;warm start entry point

4803  00                SYSOP	DB	0	;<>0 IF IN SYSOP MODE

4804  40282329 5049502F 	DB	'@(#)PIP/Plus by Richard Musgrave',NL
480C  506C7573 20627920
4814  52696368 61726420
481C  4D757367 72617665
4824  0A
4825  0100              	DW	.DATE.		; date and
4827  0200              	DW	.TIME.		;  time of assembly

                        *	CTL-D HIT

      = 4829            EXIT	EQU	*

4829  3A 7F00           	LDA	S.FLAG	;SEE IF SYSCMD IS IN MEMORY
482C  E6 01             	ANI	S.SYSCM
482E  3E 00             	MVI	A,0	;SO WE DON'T ABORT EXIT
4830  C2 8022           	JNZ	42200A	;SYSCMD.SYS WARM START

4833  FF 00             	SCALL	.EXIT	;ELSE EXIT (A) = 0

                        *	COMMAND INTERPRETATION COMES HERE

      = 4835            RESTART EQU	*

4835  CD 3953           	CALL	SHOW25X ;Clean up 25th line
4838  3A 7F00           	LDA	S.FLAG	;Inform caller that PIP
483B  F6 20             	ORI	S.BREAK 	;was interupted
483D  32 7F00           	STA	S.FLAG	;User must clear this bit himself

4840  3A 1E71           RESTRT	LDA	MODE
4843  A7                	ANA	A
4844  C2 2948           	JNZ	EXIT	;ENTERED WITH COMMAND, WILL NOW EXIT
4847  31 8022           START	LXI	SP,STACK;CLEAN STACK
484A  CD 5048           	CALL	PIP1	;EXECUTE COMMAND

                        *	COMMANDS EXIT HERE IF NO ERRORS FOUND

484D  C3 4048           	JMP	RESTRT

                        *	GET READY TO PROCESS COMMAND

4850  CD 2268           PIP1	CALL	SDD	;SET DEFAULT DEFAULT

                        *	CLEAR CHANNELS AND FILE BUFFER

4853  FF 2E             	SCALL	.CLEARA ;CLEAR CHANNELS
4855  AF                	XRA	A
4856  32 5E71           	STA	DESTFB+FB.FLG;FLAG FILE NOT OPEN

                        *	CLEAR DYNAMIC BUFFERS

4859  21 0000           	LXI	H,0
485C  22 5771           	SHLD	BUFSIZ	;EMPTY BUFFER
485F  22 5971           	SHLD	NAMTLEN	;CLEAR NAMTAB
4862  22 5B71           	SHLD	NAMTMAX	;CLEAR NAMTAB AREA
4865  21 7B74           	LXI	H,BUFF
4868  22 5571           	SHLD	BUFPTR	;SET BUFFER AGAINST END OF NAMTAB

                        *	INPUT COMMAND LINE

486B  CD 8668           	CALL	$CCO	;CLEAR CONTROL-O
486E  3A 1E71           	LDA	MODE
4871  A7                	ANA	A
4872  CC F64D           	CZ	ACL;ACCEPT COMMAND LINE (UNLESS WAS PASSED ONE BY CALLER)
4875  DA 2948           	JC	EXIT	;EOF
                        	ERRNZ	I.COP
4878  21 1F71           PIP2	LXI	H,COMAND
487B  06 27             	MVI	B,SW.DATL
487D  CD 8A19           	CALL	$ZERO	;CLEAR ALL SWITCHES
4880  3A 7F00           	LDA	S.FLAG		; GET CURRENT VERIFY STATE
4883  E6 02             	ANI	S.VFLG
4885  32 3971           	STA	VERIFY		; SET DEFAULT STATE
4888  21 1674           	LXI	H,LINE	;(HL) = COMMAND ADDRESS
488B  CD E568           	CALL	$SOB	;GET FIRST NON BLANK CHAR
488E  A7                	ANA	A
488F  CA 4748           	JZ	START	;NO COMMAND ENTERED, TRY AGAIN
4892  11 D248           	LXI	D,PIPA	;(DE) = SWITCH LIST
4895  CD 876B           	CALL	$DRS	;DETECT AND REMOVE SWITCHES
4898  DA B861           	JC	ERROR	;ERROR
489B  3A 1F71           	LDA	COMAND
489E  CD 3119           	CALL	$TJMP	;PROCESS COMMAND
48A1                    	EJECT
                        **	COMMAND LIST

48A1   (0000)           PIPB	DS	0	;COMMAND PROCESSOR TABLE
      = 0000            I.COP	EQU	*-PIPB/2	;COMMAND INDEX
48A1  8C4E              	DW	COPY
      = 0001            I.LIS	EQU	*-PIPB/2
48A3  C853              	DW	LIST	;/L
      = 0002            I.FUL	EQU	*-PIPB/2
48A5  C853              	DW	FULL	;/F
      = 0003            I.BRE	EQU	*-PIPB/2
48A7  C853              	DW	BRIEF	;/B
      = 0004            I.MIN	EQU	*-PIPB/2
48A9  C853              	DW	MINIMUM ;/M
      = 0005            I.GRP	EQU	*-PIPB/2
48AB  C853              	DW	GROUPS	;/G
      = 0006            I.SET	EQU	*-PIPB/2
48AD  065C              	DW	SETFLG	;/SET
      = 0007            I.CLR	EQU	*-PIPB/2
48AF  5B5C              	DW	CLRFLG	;/CLR
                        	IF	USER
                        	ENDIF
      = 0008            I.DEL	EQU	*-PIPB/2
48B1  BE5D              	DW	DELETE	;/DEL
      = 0009            I.REN	EQU	*-PIPB/2
48B3  045E              	DW	RENAME	;/R
      = 000A            I.CRC	EQU	*-PIPB/2
48B5  045F              	DW	CHECK	;/CRC
      = 000B            I.MOU	EQU	*-PIPB/2
48B7  6A60              	DW	MOUNT	;/MOU
      = 000C            I.DIS	EQU	*-PIPB/2
48B9  6F60              	DW	DISMOU	;/DIS
      = 000D            I.RES	EQU	*-PIPB/2
48BB  7460              	DW	RESET	;/RES
      = 000E            I.VER	EQU	*-PIPB/2
48BD  9260              	DW	VERSN	;/VERS
      = 000F            I.VERX	EQU	*-PIPB/2
48BF  F260              	DW	VERSNX	;/ID
      = 0010            I.HLP	EQU	*-PIPB/2
48C1  6B61              	DW	HELP	;/?
      = 0011            I.FUB	EQU	*-PIPB/2
48C3  9761              	DW	IERR3	;/FUBAR
      = 0012            I.SNA	EQU	*-PIPB/2
48C5  9761              	DW	IERR3	;/SNAFU
48C7                    	SPACE	3,10
                        **	CCHIT - CTL-C HIT
                        *
                        *	ENTRY	FROM SYSTEM

48C7  CD 5E19           CCHIT	CALL	$TYPTX
48CA  5E438A            	DB	'^C',ENL
48CD  FF 07             	SCALL	.CLRCO	;CLEAR CONSOLE TYPEAHEAD
48CF  C3 3548           	JMP	RESTART	;GET NEW COMMAND

48D2                    	XTEXT	PIPSWI
48D2                    	STL	'SWITCH PROCESSING TABLES AND ROUTINES'
48D2                    	EJECT
                        ***	SWITCH PROCESSING TABLES AND ROUTINES.
                        *
                        *	COMMAND SWITCHES ARE PROCESSED VIA THE ROUTINE $DRS, 'DECODE AND
                        *	REMOVE SWITCHES'. $DRS IS SUPPLIED WITH A SWITCH DESCRIPTION
                        *	TABLE, WHICH CONTAINS THE ADDRESSES OF ROUTINES
                        *	WHICH ARE ENVOKED WHEN THE SWITCHES ARE ENCOUNTERED.

                        **	SWITCH TABLE

      = 0080            .	SET	200Q
48D2   (0000)           PIPA	DS	0	;FWA SWITCH TABLE

                        *	VERB SWITCHES

48D2  4CC9D3D4 80       	DB	'L','I'+.,'S'+.,'T'+.,.
48D7  464A              	DW	SW.LIS	;/LIST

48D9  46D5CCCC 80       	DB	'F','U'+.,'L'+.,'L'+.,.
48DE  5E4A              	DW	SW.FUL	;/FULL

48E0  42D2C9C5 C680     	DB	'B','R'+.,'I'+.,'E'+.,'F'+.,.
48E6  784A              	DW	SW.BRE	;/BRIEF

48E8  4DC9CEC9 CDD5CD80 	DB	'M','I'+.,'N'+.,'I'+.,'M'+.,'U'+.,'M'+.,.
48F0  884A              	DW	SW.MIN	;/MINIMUM

48F2  47D2CFD5 D0D380   	DB	'G','R'+.,'O'+.,'U'+.,'P'+.,'S'+.,.
48F9  984A              	DW	SW.GRP	;/GROUPS

48FB  534554C6 CCC1C780 	DB	'SET','F'+.,'L'+.,'A'+.,'G'+.,.
4903  A84A              	DW	SW.SET	;/SETFLAG:f..

4905  434C52C6 CCC1C780 	DB	'CLR','F'+.,'L'+.,'A'+.,'G'+.,.
490D  C04A              	DW	SW.CLR	;/CLRFLAG:f..

                        	IF	USER
                        	ENDIF

490F  44454CC5 D4C580   	DB	'DEL','E'+.,'T'+.,'E'+.,.
4916  D74A              	DW	SW.DEL	;/DELETE

4918  52C5CEC1 CDC580   	DB	'R','E'+.,'N'+.,'A'+.,'M'+.,'E'+.,.
491F  DC4A              	DW	SW.REN	;/RENAME

4921  43524380          	DB	'CRC',.
4925  E14A              	DW	SW.CRC	;/CRC

4927  4D4F55CE D480     	DB	'MOU','N'+.,'T'+.,.
492D  E64A              	DW	SW.MOU	;/MOUNT

492F  444953CD CFD5CED4 	DB	'DIS','M'+.,'O'+.,'U'+.,'N'+.,'T'+.,.
4937  80
4938  EB4A              	DW	SW.DIS	;/DISMOUNT

493A  524553C5 D480     	DB	'RES','E'+.,'T'+.,.
4940  F04A              	DW	SW.RES	;/RESET

4942  56455253 C9CFCE80 	DB	'VERS','I'+.,'O'+.,'N'+.,.
494A  F54A              	DW	SW.VER	;/VERSION

494C  494480            	DB	'ID',.
494F  FA4A              	DW	SW.VRX	;/ID

4951  3FBFBF80          	DB	'?','?'+.,'?'+.,.
4955  FF4A              	DW	SW.HLP	;/???

4957  46554241 5280     	DB	'FUBAR',.
495D  044B              	DW	SW.FUB	;/FUBAR

495F  534E4146 5580     	DB	'SNAFU',.
4965  094B              	DW	SW.SNA	;/SNAFU

                        *	MODIFIER SWITCHES

4967  53D9D3D4 C5CD80   	DB	'S','Y'+.,'S'+.,'T'+.,'E'+.,'M'+.,.
496E  174B              	DW	SW.SYS	;/SYSTEM

4970  464CC1C7 80       	DB	'FL','A'+.,'G'+.,.
4975  254B              	DW	SW.FLA	;/FLAG:f..

4977  4E4F46CC C1C780   	DB	'NOF','L'+.,'A'+.,'G'+.,.
497E  4C4B              	DW	SW.NOF	;/NOFLAG:f..

                        	IF	USER
                        	ENDIF

4980  424546CF D2C580   	DB	'BEF','O'+.,'R'+.,'E'+.,.
4987  7B4B              	DW	SW.BEF	;/BEFORE:dd-mmm-yy

4989  435552D2 C5CED480 	DB	'CUR','R'+.,'E'+.,'N'+.,'T'+.,.
4991  954B              	DW	SW.CUR	;/CURRENT:dd-mmm-yy

4993  414654C5 D280     	DB	'AFT','E'+.,'R'+.,.
4999  D14B              	DW	SW.AFT	;/AFTER:dd-mmm-yy

499B  41474580          	DB	'AGE',.
499F  F14B              	DW	SW.AGE	;/AGE:nn

49A1  4143C3C5 D3D380   	DB	'AC','C'+.,'E'+.,'S'+.,'S'+.,.
49A8  D94C              	DW	SW.ACC	;/ACCESS

49AA  434F55CE D480     	DB	'COU','N'+.,'T'+.,.
49B0  DF4C              	DW	SW.COU	;/COUNT:nn

49B2  4E4F43CF D5CED480 	DB	'NOC','O'+.,'U'+.,'N'+.,'T'+.,.
49BA  F34C              	DW	SW.NOC	;/NOCOUNT:nn

49BC  51D5C5D2 D980     	DB	'Q','U'+.,'E'+.,'R'+.,'Y'+.,.
49C2  074D              	DW	SW.QUE	;/QUERY

49C4  2D80              	DB	'-',.
49C6  194D              	DW	SW.NEG	;/-

49C8  534FD2D4 80       	DB	'SO','R'+.,'T'+.,.
49CD  1F4D              	DW	SW.SRT	;/SORT:nedac

49CF  524556C5 D2D3C580 	DB	'REV','E'+.,'R'+.,'S'+.,'E'+.,.
49D7  2B4D              	DW	SW.REV	;/REVERSE

49D9  5355D0D2 C5D3D380 	DB	'SU','P'+.,'R'+.,'E'+.,'S'+.,'S'+.,.
49E1  314D              	DW	SW.SUP	;/SUPRESS

49E3  414C4CCF C3C1D4C5 	DB	'ALL','O'+.,'C'+.,'A'+.,'T'+.,'E'+.,.
49EB  80
49EC  454D              	DW	SW.ALL	;/ALLOCATE

49EE  50C1C7C5 80       	DB	'P','A'+.,'G'+.,'E'+.,.
49F3  534D              	DW	SW.PAG	;/PAGE:nn

49F5  434F4C80          	DB	'COL',.
49F9  6E4D              	DW	SW.COL	;/COL:nn

49FB  44C1D4C5 80       	DB	'D','A'+.,'T'+.,'E'+.,.
4A00  794D              	DW	SW.DAT	;/DATE

4A02  415454D2 C9C280   	DB	'ATT','R'+.,'I'+.,'B'+.,.
4A09  7F4D              	DW	SW.ATT	;/ATTRIB:f..

4A0B  4BC5C5D0 80       	DB	'K','E'+.,'E'+.,'P'+.,.
4A10  AC4D              	DW	SW.KEE	;/KEEP

4A12  43CFCED4 C9C780   	DB	'C','O'+.,'N'+.,'T'+.,'I'+.,'G'+.,.
4A19  B94D              	DW	SW.CNT	;/CONTIG

4A1B  464F52C3 C580     	DB	'FOR','C'+.,'E'+.,.
4A21  C64D              	DW	SW.FOR	;/FORCE

4A23  5341C6C5 80       	DB	'SA','F'+.,'E'+.,.
4A28  D34D              	DW	SW.SAF	;/SAFE

4A2A  56C5D2C9 C6D980   	DB	'V','E'+.,'R'+.,'I'+.,'F'+.,'Y'+.,.
4A31  D94D              	DW	SW.VFY	;/VERIFY

4A33  58585880          	DB	'XXX',.
4A37  DF4D              	DW	SW.XXX	;/XXX

4A39  59595980          	DB	'YYY',.
4A3D  E54D              	DW	SW.YYY	;/YYY

4A3F  5A5A5A80          	DB	'ZZZ',.
4A43  EB4D              	DW	SW.ZZZ	;/ZZZ

4A45  00                	DB	0	;END OF TABLE
4A46                    	EJECT
                        ***	VERB SWITCHES

                        **	SW.LIS - /LIST SWITCH DETECTED.

4A46  3A 1F71           SW.LIS	LDA	COMAND
4A49  A7                	ANA	A
4A4A  CA 514A           	JZ	SW.LIS1	;NO FUNCTION
                        	ERRNZ	I.LIS-1
                        	ERRNZ	I.FUL-2
                        	ERRNZ	I.BRE-3
                        	ERRNZ	I.MIN-4
                        	ERRNZ	I.GRP-5
4A4D  D6 06             	SUI	6
4A4F  3F                	CMC
4A50  D0                	RNC			ALREADY;HAVE ONE SPECIFIED AND IT OVERRULES
4A51  3E 01             SW.LIS1 MVI	A,I.LIS ;/LIST
4A53  32 1F71           SW.LIS2 STA	COMAND
4A56  3A 2B71           	LDA	QUERY	;/L or /F or /B or /M or /G and /Q NOT ALLOWED
4A59  A7                	ANA	A
4A5A  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4A5D  C9                	RET
4A5E                    	SPACE	3,10
                        **	SW.FUL - /FULL SWITCH DETECTED

4A5E  3A 1F71           SW.FUL	LDA	COMAND	;ALLOW TO SUPERCEDE /LIST
4A61  A7                	ANA	A
4A62  CA 694A           	JZ	SW.FUL1 ;NO OTHER COMMAND
                        	ERRNZ	I.LIS-1
4A65  3D                	DCR	A
4A66  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4A69  3A 2F71           SW.FUL1 LDA	SUPRES	;/SU/F IS NOT ALLOWED
4A6C  21 3071           	LXI	H,ALLOCA;/ALL/F IS NOT ALLOWED
4A6F  B6                	ORA	M
4A70  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4A73  3E 02             	MVI	A,I.FUL ;IS /FULL
4A75  C3 534A           	JMP	SW.LIS2
4A78                    	SPACE	3,10
                        **	SW.BRE - /BRIEF SWITCH DETECTED.

4A78  3A 1F71           SW.BRE	LDA	COMAND	;ALLOW TO SUPERCEDE /LIST
4A7B  A7                	ANA	A
4A7C  CA 834A           	JZ	SW.BRE1	;NO OTHER COMMAND
                        	ERRNZ	I.LIS-1
4A7F  3D                	DCR	A
4A80  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4A83  3E 03             SW.BRE1 MVI	A,I.BRE ;IS /BRIEF
4A85  C3 534A           	JMP	SW.LIS2
4A88                    	SPACE	3,10
                        **	SW.MIN - /MINIMUM SWITCH DETECTED

4A88  3A 1F71           SW.MIN	LDA	COMAND	;ALLOW TO SUPERCEDE /LIST
4A8B  A7                	ANA	A
4A8C  CA 934A           	JZ	SW.MIN1 ;NO OTHER COMMAND
                        	ERRNZ	I.LIS-1
4A8F  3D                	DCR	A
4A90  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4A93  3E 04             SW.MIN1 MVI	A,I.MIN ;IS /MINIMUM
4A95  C3 534A           	JMP	SW.LIS2
4A98                    	SPACE	3,10
                        **	SW.GRP - /GROUP SWITCH DETECTED

4A98  3A 1F71           SW.GRP	LDA	COMAND	;ALLOW TO SUPERCEDE /LIST
4A9B  A7                	ANA	A
4A9C  CA A34A           	JZ	SW.GRP1 ;NO OTHER COMMAND
                        	ERRNZ	I.LIS-1
4A9F  3D                	DCR	A
4AA0  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4AA3  3E 05             SW.GRP1 MVI	A,I.GRP ;IS /GROUPS
4AA5  C3 534A           	JMP	SW.LIS2
4AA8                    	SPACE	3,10
                        **	SW.SET - /SETFLAG SWITCH DETECTED

4AA8  3E 06             SW.SET	MVI	A,I.SET
4AAA  CD 0B4B           	CALL	SWIT1
4AAD  E5                	PUSH	H
4AAE  21 486C           	LXI	H,DFSSC
4AB1  36 21             	MVI	M,'!'	;BORROW 'C' FLAG POSITION, USER CAN'T SET IT
4AB3  E1                	POP	H
4AB4  CD 0E6C           SW.SET1 CALL	DFSS
4AB7  DA F14D           	JC	SW.ERR
4ABA  21 3D71           SW.SET2 LXI	H,D.SET
4ABD  B6                	ORA	M
4ABE  77                	MOV	M,A	;SAVE FLAG DATA
4ABF  C9                	RET
4AC0                    	SPACE	3,10
                        **	SW.CLR - /CLRFLAG SWITCH DETECTED

4AC0  3E 07             SW.CLR	MVI	A,I.CLR
4AC2  CD 0B4B           	CALL	SWIT1
4AC5  E5                	PUSH	H
4AC6  21 486C           	LXI	H,DFSSC
4AC9  36 40             	MVI	M,'@'	;CLEAR ACCESSES, USER CAN'T CLEAR 'C' FLAG
4ACB  E1                	POP	H
4ACC  7E                	MOV	A,M
4ACD  FE 3A             	CPI	':'	;SUBSWITCH?
4ACF  3E EF             	MVI	A,11101111B;ASSUME ALL BUT 'C'
4AD1  C2 BA4A           	JNE	SW.SET2 ;NO :
4AD4  C3 B44A           	JMP	SW.SET1
4AD7                    	SPACE	3,10
                        	IF	USER
                        	ENDIF
4AD7                    	SPACE	3,10
                        	IF	USER
                        	ENDIF
4AD7                    	SPACE	3,10
                        **	SW.DEL - /DELETE SWITCH DETECTED.

4AD7  3E 08             SW.DEL	MVI	A,I.DEL
4AD9  C3 0B4B           	JMP	SWIT1
4ADC                    	SPACE	3,10
                        **	SW.REN - /RENAME SWITCH DETECTED.

4ADC  3E 09             SW.REN	MVI	A,I.REN
4ADE  C3 0B4B           	JMP	SWIT1
4AE1                    	SPACE	3,10
                        **	SW.CRC - /CRC SWITCH DETECTED

4AE1  3E 0A             SW.CRC	MVI	A,I.CRC
4AE3  C3 0B4B           	JMP	SWIT1
4AE6                    	SPACE	3,10
                        **	SW.MOU	- /MOUNT SWITCH DETECTED

4AE6  3E 0B             SW.MOU	MVI	A,I.MOU
4AE8  C3 0B4B           	JMP	SWIT1
4AEB                    	SPACE	3,10
                        **	SW.DIS - /DISMOUNT SWITCH DETECTED

4AEB  3E 0C             SW.DIS	MVI	A,I.DIS
4AED  C3 0B4B           	JMP	SWIT1
4AF0                    	SPACE	3,10
                        **	SW.RES - /RESET SWITCH DETECTED.

4AF0  3E 0D             SW.RES	MVI	A,I.RES
4AF2  C3 0B4B           	JMP	SWIT1
4AF5                    	SPACE	3,10
                        **	SW.VER - /VERSION SWITCH DETECTED

4AF5  3E 0E             SW.VER	MVI	A,I.VER
4AF7  C3 0B4B           	JMP	SWIT1
4AFA                    	SPACE	3,10
                        **	SW.VRX - /ID SWITCH DETECTED

4AFA  3E 0F             SW.VRX	MVI	A,I.VERX
4AFC  C3 0B4B           	JMP	SWIT1
4AFF                    	SPACE	3,10
                        **	SW.HLP - /??? SWITCH DETECTED

4AFF  3E 10             SW.HLP	MVI	A,I.HLP
4B01  C3 0B4B           	JMP	SWIT1
4B04                    	SPACE	3,10
                        **	SW.FUB - /FUBAR USER SWITCH DETECTED

4B04  3E 11             SW.FUB	MVI	A,I.FUB
4B06  C3 0B4B           	JMP	SWIT1
4B09                    	SPACE	3,10
                        **	SW.SNA - /SNAFU USER SWITCH DETECTED

4B09  3E 12             SW.SNA	MVI	A,I.SNA
                        *	JMP	SWIT1
                        	ERRNZ	*-SWIT1 ;SWIT1 MUST BE NEXT
4B0B                    	SPACE	3,10
                        *	SWIT1 - PROCESS MAJOR FUNCTION SWITCH.
                        *
                        *	SWIT1 IS ENTERED TO PROCESS SWITCHES WHICH DETERMINE THE FUNCTION
                        *	PIP IS TO PERFORM. I.E. 'VERB' SWITCHES, SUCH
                        *	AS /DELETE (AS OPOSED TO 'MODIFIER' SWITCHES, LIKE /SYSTEM)

4B0B  01 1F71           SWIT1	LXI	B,COMAND
4B0E  F5                	PUSH	PSW	;SAVE COMMAND
4B0F  0A                	LDAX	B	;(A) = PREVIOUS COMMAND
4B10  A7                	ANA	A
4B11  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4B14  F1                	POP	PSW	;(A) = NEW CODE
4B15  02                	STAX	B	;STORE IT
4B16  C9                	RET
4B17                    	EJECT
                        ***	MODIFIER SWITCHES

                        **	SW.SYS - /SYSTEM SWITCH DETECTED.

4B17  3E 01             SW.SYS	MVI	A,1
4B19  32 2071           	STA	SYSTEM
4B1C  3A 2271           	LDA	NOFLAG
4B1F  E6 80             	ANI	DIF.SYS
4B21  C2 474B           	JNZ	SW.CS	;/NOF:S/S IS CONTRADICTORY
4B24  C9                	RET
4B25                    	SPACE	3,10
                        **	SW.FLA - /FLAG: SWITCH DETECTED

4B25  E5                SW.FLA	PUSH	H
4B26  21 486C           	LXI	H,DFSSC
4B29  36 43             	MVI	M,'C'	;INSURE 'C' FLAG
4B2B  E1                	POP	H
4B2C  CD 0E6C           	CALL	DFSS	;DECODE FLAG SUB-SWITCHES
4B2F  DA F14D           	JC	SW.ERR
4B32  21 2171           	LXI	H,FLAG
4B35  B6                	ORA	M
4B36  77                	MOV	M,A	;SET SUBSWITCHES
4B37  E6 80             	ANI	DIF.SYS
4B39  CA 414B           	JZ	SW.FLA. ;DIDN'T REQUEST 'S'
4B3C  3E 01             	MVI	A,1
4B3E  32 2071           	STA	SYSTEM	;FORCE /S
4B41  7E                SW.FLA. MOV	A,M
4B42  21 2271           	LXI	H,NOFLAG
4B45  A6                	ANA	M
4B46  C8                	RZ			DIDN'T MIX FLAGS
4B47  3E 84             SW.CS	MVI	A,PEC.CS
4B49  C3 B861           	JMP	ERROR
4B4C                    	SPACE	3,10
                        **	SW.NOF - /NOFLAG: SWITCH DETECTED

4B4C  7E                SW.NOF	MOV	A,M
4B4D  FE 3A             	CPI	':'	;SUBSWITCH?
4B4F  3E FF             	MVI	A,-1	;ASSUME ALL FLAGS
4B51  C2 614B           	JNE	SW.NOF1 ;NO :
4B54  E5                	PUSH	H
4B55  21 486C           	LXI	H,DFSSC
4B58  36 43             	MVI	M,'C'	;INSURE 'C' FLAG
4B5A  E1                	POP	H
4B5B  CD 0E6C           	CALL	DFSS	;DECODE FLAG SUB-SWITCHES
4B5E  DA F14D           	JC	SW.ERR
4B61  21 2271           SW.NOF1 LXI	H,NOFLAG
4B64  B6                	ORA	M
4B65  77                	MOV	M,A	;SET SUBSWITCHES
4B66  E6 80             	ANI	DIF.SYS
4B68  CA 724B           	JZ	SW.NOF. ;DIDN'T FORBID 'S'
4B6B  3A 2071           	LDA	SYSTEM
4B6E  A7                	ANA	A
4B6F  C2 474B           	JNZ	SW.CS	;/S/NOF:S IS CONTRADICTORY
4B72  7E                SW.NOF. MOV	A,M
4B73  21 2171           	LXI	H,FLAG
4B76  A6                	ANA	M
4B77  C8                	RZ			DIDN'T MIX FLAGS
4B78  C3 474B           	JMP	SW.CS
4B7B                    	SPACE	3,10
                        	IF	USER
                        	ENDIF
4B7B                    	SPACE	3,10
                        	IF	USER
                        	ENDIF
4B7B                    	SPACE	3,10
                        **	SW.BEF - /BEFORE SWITCH DETECTED

4B7B  3E 01             SW.BEF	MVI	A,1
4B7D  32 2371           	STA	BEFORE
4B80  EB                	XCHG
4B81  AF                	XRA	A
4B82  21 2471           	LXI	H,CURREN
4B85  B6                	ORA	M
4B86  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4B89  21 4071           	LXI	H,DATEB
4B8C  22 B44B           	SHLD	SW.C0
4B8F  22 C44B           	SHLD	SW.C1
4B92  C3 B04B           	JMP	SW.C
4B95                    	SPACE	3,10
                        **	SW.CUR - /CURRENT SWITCH DETECTED

4B95  3E 01             SW.CUR	MVI	A,1
4B97  32 2471           	STA	CURREN
4B9A  EB                	XCHG
4B9B  AF                	XRA	A
4B9C  21 2371           	LXI	H,BEFORE
4B9F  B6                	ORA	M
4BA0  21 2571           	LXI	H,AFTER
4BA3  B6                	ORA	M
4BA4  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4BA7  21 4271           	LXI	H,DATEC
4BAA  22 B44B           	SHLD	SW.C0
4BAD  22 C44B           	SHLD	SW.C1
                        *	JMP	SW.C

4BB0  2A C820           SW.C	LHLD	S.DATC	;SAVE TODAYS DATE
4BB3  22 4271           	SHLD	DATEC	;IN CASE THATS ALL WE WANT
      = 4BB4            SW.C0	EQU	*-2
4BB6  EB                	XCHG
4BB7  7E                	MOV	A,M
4BB8  FE 3A             	CPI	':'	;SUBSWITCH?
4BBA  C0                	RNE			NO
4BBB  23                SW.C.	INX	H	;YES, BUMP TO ASCII DATE
4BBC  CD 4769           	CALL	$CAD	;DE = CODED DATE
4BBF  DA F14D           	JC	SW.ERR
4BC2  EB                	XCHG
4BC3  22 4271           	SHLD	DATEC	;SAVE CODED DATE
      = 4BC4            SW.C1	EQU	*-2
4BC6  EB                	XCHG
4BC7  2B                SW.CUR. DCX	H	;BLANK OUT ASCII DATE & :
4BC8  7E                	MOV	A,M
4BC9  36 20             	MVI	M,' '
4BCB  FE 3A             	CPI	':'
4BCD  C2 C74B           	JNZ	SW.CUR.
4BD0  C9                	RET
4BD1                    	SPACE	3,10
                        **	SW.AFT - /AFTER SWITCH DETECTED

4BD1  3E 01             SW.AFT	MVI	A,1
4BD3  32 2571           	STA	AFTER
4BD6  EB                	XCHG
4BD7  AF                	XRA	A
4BD8  21 2471           	LXI	H,CURREN
4BDB  B6                	ORA	M
4BDC  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4BDF  21 4471           	LXI	H,DATEA
4BE2  22 C44B           	SHLD	SW.C1
4BE5  EB                	XCHG
4BE6  7E                	MOV	A,M
4BE7  FE 3A             	CPI	':'
4BE9  CA BB4B           	JE	SW.C.
4BEC  3E 89             SW.ERRX MVI	A,PEC.MSS
4BEE  C3 B861           	JMP	ERROR
4BF1                    	SPACE	3,10
                        **	SW.AGE - /AGE

4BF1  EB                SW.AGE	XCHG			SAVE;HL
4BF2  AF                	XRA	A
4BF3  21 2471           	LXI	H,CURREN
4BF6  B6                	ORA	M
4BF7  21 2371           	LXI	H,BEFORE
4BFA  B6                	ORA	M
4BFB  C2 474B           	JNZ	SW.CS
4BFE  EB                	XCHG
4BFF  CD FF6D           	CALL	$DNS.
4C02  DA F14D           	JC	SW.ERR
4C05  7A                	MOV	A,D
4C06  B3                	ORA	E
4C07  CA F14D           	JZ	SW.ERR
4C0A  1B                	DCX	D
4C0B  EB                	XCHG
4C0C  22 2671           	SHLD	AGE
4C0F  EB                	XCHG
4C10  2A C820           	LHLD	S.DATC
4C13  7A                	MOV	A,D
4C14  B3                	ORA	E
4C15  CA 9A4C           	JZ	PACK1

4C18  7D                	MOV	A,L	;UNPACK DATE
4C19  E6 1F             	ANI	37Q
4C1B  32 CB4C           	STA	V.DAY
4C1E  7C                	MOV	A,H
4C1F  1F                	RAR
4C20  32 CD4C           	STA	V.YR70
4C23  7D                	MOV	A,L
4C24  1F                	RAR
4C25  E6 F0             	ANI	360Q
4C27  0F                	RRC
4C28  0F                	RRC
4C29  0F                	RRC
4C2A  0F                	RRC
4C2B  32 CC4C           	STA	V.MON

4C2E  2A 2671           	LHLD	AGE	;DECREMENT DATE
4C31  E5                A.DAY	PUSH	H
4C32  3A CB4C           	LDA	V.DAY
4C35  3D                	DCR	A
4C36  CA 3F4C           	JZ	A.MON
4C39  32 CB4C           	STA	V.DAY
4C3C  C3 7E4C           	JMP	A.LOOP

4C3F  3A CC4C           A.MON	LDA	V.MON
4C42  3D                	DCR	A
4C43  CA 6A4C           	JZ	A.YR
4C46  32 CC4C           	STA	V.MON
4C49  21 CD4C           	LXI	H,DPMTAB-1
4C4C  CD 3A18           	CALL	$DADA
4C4F  7E                	MOV	A,M
4C50  32 CB4C           	STA	V.DAY
4C53  FE 1C             	CPI	28
4C55  C2 7E4C           	JNE	A.LOOP
4C58  3A CD4C           	LDA	V.YR70
4C5B  C6 46             	ADI	70
4C5D  E6 03             	ANI	11B
4C5F  C2 7E4C           	JNZ	A.LOOP
4C62  3E 1D             	MVI	A,29
4C64  32 CB4C           	STA	V.DAY
4C67  C3 7E4C           	JMP	A.LOOP

4C6A  3A CD4C           A.YR	LDA	V.YR70
4C6D  3D                	DCR	A
4C6E  FA C44C           	JM	LIMIT
4C71  32 CD4C           	STA	V.YR70
4C74  3E 0C             	MVI	A,12
4C76  32 CC4C           	STA	V.MON
4C79  3E 1F             	MVI	A,31
4C7B  32 CB4C           	STA	V.DAY

4C7E  E1                A.LOOP	POP	H
4C7F  2B                	DCX	H
4C80  7C                	MOV	A,H
4C81  B5                	ORA	L
4C82  C2 314C           	JNZ	A.DAY

4C85  3A CC4C           PACK	LDA	V.MON	;PACK DATE
4C88  A7                	ANA	A
4C89  1F                	RAR
4C8A  1F                	RAR
4C8B  1F                	RAR
4C8C  1F                	RAR
4C8D  F5                	PUSH	PSW
4C8E  6F                	MOV	L,A
4C8F  3A CB4C           	LDA	V.DAY
4C92  B5                	ORA	L
4C93  6F                	MOV	L,A
4C94  F1                	POP	PSW
4C95  3A CD4C           	LDA	V.YR70
4C98  17                	RAL
4C99  67                	MOV	H,A

4C9A  22 4071           PACK1	SHLD	DATEB
4C9D  3E 01             	MVI	A,1
4C9F  32 2371           	STA	BEFORE

4CA2  EB                	XCHG
4CA3  21 B94C           	LXI	H,DATE..
4CA6  CD 456A           	CALL	$DAD
4CA9  CD 5E19           	CALL	$TYPTX
4CAC  4167696E 67206265 	DB	'Aging before '
4CB4  666F7265 20
4CB9  64642D6D 6D6D2D79 DATE..	DB	'dd-mmm-yy',ENL
4CC1  798A
4CC3  C9                	RET

4CC4  E1                LIMIT	POP	H
4CC5  21 2100           	LXI	H,41A	;1-JAN-70
4CC8  C3 9A4C           	JMP	PACK1

4CCB  00                V.DAY	DB	0
4CCC  00                V.MON	DB	0
4CCD  00                V.YR70	DB	0

4CCE  1F1C1F1E 1F1E1F1F DPMTAB	DB	31,28,31,30,31,30,31,31,30,31,30
4CD6  1E1F1E
4CD9                    	SPACE	3,10
                        **	SW.ACC - /ACCESS

4CD9  3E 01             SW.ACC	MVI	A,1
4CDB  32 2871           	STA	ACCESS
4CDE  C9                	RET
4CDF                    	SPACE	3,10
                        **	SW.COU - /COUNT SWITCH

4CDF  7E                SW.COU	MOV	A,M
4CE0  FE 3A             	CPI	':'
4CE2  C2 ED4C           	JNE	SW.COU1
4CE5  CD FF6D           	CALL	$DNS.
4CE8  DA F14D           	JC	SW.ERR
4CEB  7B                	MOV	A,E
4CEC  01                	DB	1	;FAKE LXI B,
4CED  3E 01             SW.COU1 MVI	A,1
4CEF  32 2971           	STA	COUNT
4CF2  C9                	RET
4CF3                    	SPACE	3,10
                        **	SW.NOC - /NOCOUNT SWITCH

4CF3  7E                SW.NOC	MOV	A,M
4CF4  FE 3A             	CPI	':'
4CF6  C2 014D           	JNE	SW.NOC1
4CF9  CD FF6D           	CALL	$DNS.
4CFC  DA F14D           	JC	SW.ERR
4CFF  7B                	MOV	A,E
4D00  01                	DB	1	;FAKE LXI B,
4D01  3E 01             SW.NOC1 MVI	A,1
4D03  32 2A71           	STA	NOCOUNT
4D06  C9                	RET
4D07                    	SPACE	3,10
                        **	SW.QUE - /QUERY SWITCH DETECTED

4D07  3A 1F71           SW.QUE	LDA	COMAND	;/Q and /L or /F or /B or /M or /G NOT ALLOWED
4D0A  A7                	ANA	A
4D0B  CA 134D           	JZ	SW.QUE1
4D0E  FE 06             	CPI	6
4D10  DA 474B           	JC	SW.CS	;CONTRADICTORY SWITCHES
4D13  3E 01             SW.QUE1 MVI	A,1
4D15  32 2B71           	STA	QUERY
4D18  C9                	RET
4D19                    	SPACE	3,10
                        **	SW.NEG - /- SWITCH DETECTED

4D19  3E 40             SW.NEG	MVI	A,100Q	;DON'T CHANGE THIS, 'Z' FLAG BIT
4D1B  32 2C71           	STA	NEGATE
4D1E  C9                	RET
4D1F                    	SPACE	3,10
                        **	SW.SRT - /SORT SWITCH DETECTED

4D1F  3E 01             SW.SRT	MVI	A,1
4D21  32 2D71           	STA	SORT
4D24  CD 566C           	CALL	DSSS
4D27  DA F14D           	JC	SW.ERR
4D2A  C9                	RET
4D2B                    	SPACE	3,10
                        **	SW.REV - /REVERSE

4D2B  3E 03             SW.REV	MVI	A,3	;DON'T CHANGE THIS, OFFSET IN $SORT
4D2D  32 2E71           	STA	REVERSE
4D30  C9                	RET
4D31                    	SPACE	3,10
                        **	SW.SUP - /SUPPRESS SWITCH DETECTED

4D31  3A 1F71           SW.SUP	LDA	COMAND	;/F/SU IS NOT ALLOWED
4D34  FE 02             	CPI	I.FUL
4D36  CA 474B           	JE	SW.CS	;CONTRADICTORY SWITCHES
4D39  3A 3171           	LDA	PAGE	;/P/SU IS NOT ALLOWED
4D3C  A7                	ANA	A
4D3D  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4D40  21 2F71           	LXI	H,SUPRES
4D43  34                	INR	M	;Count of how many /SU's you have
4D44  C9                	RET
4D45                    	SPACE	3,10
                        **	SW.ALL	- /ALLOCATE Switch Detected

4D45  3A 1F71           SW.ALL	LDA	COMAND	;/F/ALL IS NOT ALLOWED
4D48  FE 02             	CPI	I.FUL
4D4A  CA 474B           	JE	SW.CS	;CONTRADICTORY SWITCHES
4D4D  3E 01             	MVI	A,1
4D4F  32 3071           	STA	ALLOCA
4D52  C9                	RET
4D53                    	SPACE	3,10
                        **	SW.PAG - /PAGE SWITCH DETECTED

4D53  3A 2F71           SW.PAG	LDA	SUPRES	;/SU/P IS NOT ALLOWED
4D56  A7                	ANA	A
4D57  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4D5A  7E                	MOV	A,M
4D5B  FE 3A             	CPI	':'	;SUBSWITCH?
4D5D  C2 684D           	JNE	SW.PAG1 ;NO, DEFAULT
4D60  CD FF6D           	CALL	$DNS.	;DECODE NUMERIC SWITCH
4D63  DA F14D           	JC	SW.ERR
4D66  7B                	MOV	A,E
4D67  01                	DB	1	;FAKE LXI B,
4D68  3E 37             SW.PAG1 MVI	A,55	;DEFAULT
4D6A  32 3171           	STA	PAGE
4D6D  C9                	RET
4D6E                    	SPACE	3,10
                        **	SW.COL - /COL SWITCH DETECTED

4D6E  CD FF6D           SW.COL	CALL	$DNS.	;DECODE NUMERIC SWITCH
4D71  DA F14D           	JC	SW.ERR
4D74  7B                	MOV	A,E
4D75  32 3271           	STA	COLUMN
4D78  C9                	RET
4D79                    	SPACE	3,10
                        **	SW.DAT - /DATE SWITCH DETECTED

4D79  3E 01             SW.DAT	MVI	A,1
4D7B  32 3371           	STA	DATE
4D7E  C9                	RET
4D7F                    	SPACE	3,10
                        **	SW.ATT - /ATTRIB SWITCH DETECTED

4D7F  3E 01             SW.ATT	MVI	A,1
4D81  32 3471           	STA	ATTRIB
4D84  3A 3571           	LDA	KEEP
4D87  A7                	ANA	A
4D88  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4D8B  7E                	MOV	A,M
4D8C  FE 3A             	CPI	':'	;SUBSWITCH?
4D8E  C0                	RNE			NO

4D8F  3E 02             	MVI	A,2	;YES
4D91  32 3471           	STA	ATTRIB
4D94  E5                	PUSH	H
4D95  21 486C           	LXI	H,DFSSC
4D98  36 43             	MVI	M,'C'	;INSURE 'C' FLAG
4D9A  E1                	POP	H
4D9B  CD 0E6C           	CALL	DFSS	;DECODE FLAG SUBSWITCHES
4D9E  DA F14D           	JC	SW.ERR
4DA1  21 3D71           	LXI	H,D.SET
4DA4  B6                	ORA	M
4DA5  77                	MOV	M,A	;SET SUBSWITCHES
4DA6  E6 10             	ANI	DIF.CNT
4DA8  C2 F14D           	JNZ	SW.ERR	;CAN'T SET 'C'
4DAB  C9                	RET
4DAC                    	SPACE	3,10
                        **	SW.KEE - /KEEP SWITCH DETECTED

4DAC  3E 01             SW.KEE	MVI	A,1
4DAE  32 3571           	STA	KEEP
4DB1  3A 3471           	LDA	ATTRIB
4DB4  A7                	ANA	A
4DB5  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4DB8  C9                	RET
4DB9                    	SPACE	3,10
                        **	SW.CNT - /CONTIG SWITCH DETECTED

4DB9  3E 01             SW.CNT	MVI	A,1
4DBB  32 3671           	STA	CONTIG
4DBE  3A 3771           	LDA	FORCE
4DC1  A7                	ANA	A
4DC2  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4DC5  C9                	RET
4DC6                    	SPACE	3,10
                        **	SW.FOR - /FORCE SWITCH DETECTED

4DC6  3E 01             SW.FOR	MVI	A,1
4DC8  32 3771           	STA	FORCE
4DCB  3A 3671           	LDA	CONTIG
4DCE  A7                	ANA	A
4DCF  C2 474B           	JNZ	SW.CS	;CONTRADICTORY SWITCHES
4DD2  C9                	RET
4DD3                    	SPACE	3,10
                        **	SW.SAF - /SAFE SWITCH DETECTED

4DD3  3E 01             SW.SAF	MVI	A,1
4DD5  32 3871           	STA	SAFE
4DD8  C9                	RET
4DD9                    	SPACE	3,10
                        **	SW.VFY - /VERIFY SWITCH DETECTED

4DD9  3E 01             SW.VFY	MVI	A,1
4DDB  32 3971           	STA	VERIFY
4DDE  C9                	RET
4DDF                    	SPACE	3,10
                        **	SW.XXX - /XXX USER SWITCH DETECTED

4DDF  3E 01             SW.XXX	MVI	A,1
4DE1  32 3A71           	STA	XUSR
4DE4  C9                	RET
4DE5                    	SPACE	3,10
                        **	SW.YYY - /YYY USER SWITCH DETECTED

4DE5  3E 01             SW.YYY	MVI	A,1
4DE7  32 3B71           	STA	YUSR
4DEA  C9                	RET
4DEB                    	SPACE	3,10
                        **	SW.ZZZ - /ZZZ USER SWITCH DETECTED

4DEB  3E 01             SW.ZZZ	MVI	A,1
4DED  32 3C71           	STA	ZUSR
4DF0  C9                	RET
4DF1                    	SPACE	3,10
4DF1  3E 88             SW.ERR	MVI	A,PEC.ISS;ILLEGAL SUB-SWITCH
4DF3  C3 B861           	JMP	ERROR
4DF6                    	STL	'ACL - ACCEPT COMMAND LINE.'
4DF6                    	EJECT
                        ***	ACL - ACCEPT COMMAND LINE.
                        *
                        *	ACL PROMPTS FOR AND READS A COMMAND LINE FROM
                        *	THE CONSOLE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' CLEAR, GOT LINE
                        *		 'LINE' = COMMAND LINE
                        *		'C' SET IF EOF
                        *	USES	ALL

4DF6  CD 9368           ACL	CALL	$GNL	;GUARANTEE NEW LINE
4DF9  CD 5E19           	CALL	$TYPTX
4DFC  503AA000          	DB	'P:',' '+200Q,0
4E00  00000000          	DW	0,0	;ALLOW 8 CHAR PROMPT
4E04  AF                	XRA	A		; A = I.CSLMD
4E05  47                	MOV	B,A		; Line mode with Echo
4E06  0E 85             	MVI	C,CSL.ECH+CSL.RAW+CSL.CHR	; also clear Raw mode
4E08  FF 06             	SCALL	.CONSL	;CLEAR SPECIAL CONSOLE MODES
4E0A  21 1674           	LXI	H,LINE
4E0D  C3 B868           	JMP	$RTL.	;READ UPPER CASE LINE AND EXIT
4E10                    	STL	'PRS - PRESET PROGRAM.'
4E10                    	EJECT
                        ***	PRS - PRESET PIP PROGRAM.
                        *
                        *	PRS IS CALLED TO PERFORM ONE-TIME-ONLY PRESETTING OF
                        *	THE PROGRAM ENVIRONMENT UPON A COLD START AT 'ENTRY'.
                        *
                        *	PRS IS CALLED TO PERFORM WARM-START PRESETTING OF THE
                        *	PROGRAM ENVIRONMENT UPON A WARM START AT 'WARM'.
                        *
                        *	ENTRY	NONE
                        *
                        *	EXIT	IF CORRECT VERSION OF HDOS
                        *		    NONE
                        *		ELSE
                        *		    EXIT TO HDOS
                        *
                        *	USES	ALL

      = 4E10            ENTRY	EQU	*	;INITIAL ENTRY POINT

4E10  FF 09             PRS	SCALL	.VERS
4E12  DA 824E           	JC	PRS1	;ERROR IN GETTING VERSION
4E15  FE 30             	CPI	VERS
4E17  C2 824E           	JNZ	PRS1	;NOT CORRECT VERSION OF HDOS
4E1A  3E FF             	MVI	A,377Q
4E1C  FF 26             	SCALL	.CLOSE	;CLOSE OVERLAY CHANNEL
4E1E  3A 0500           	LDA	S.FMASK ;GET FEATURE MASK
4E21  E6 30             	ANI	F.TERM	;ONLY WANT TERMINAL TYPE
4E23  FE 10             	CPI	F.H19	;IS IT H19 ?
4E25  C2 2B4E           	JNE	WARM	;NO
4E28  32 1D71           	STA	H19FLG	;YES, SET H19 FLAG
4E2B  21 7B74           WARM	LXI	H,RMEML ;(HL) = RUN-TIME HIGH MEMORY
4E2E  FF 2A             	SCALL	.SETTOP	;SET HI MEMORY
4E30  DA 854E           	JC	PRS2	;IF  ERROR
4E33  21 C748           	LXI	H,CCHIT
4E36  3E 03             	MVI	A,CTLC
4E38  FF 21             	SCALL	.CTLC	;SET CTL-C PROCESSING

                        *	SET UP DEVICE NAMES BASED ON SYSTEM DEFAULT

4E3A  2A 6A00           	LHLD	S.DFBLK ;(HL) = 'XX'
4E3D  7C                	MOV	A,H
4E3E  B5                	ORA	L
4E3F  CA 634E           	JZ	WARM1	;NO DEFAULT, LEAVE US ALONE
4E42  3A 6C00           	LDA	S.DFBLK+2;(A) = ASCII UNIT #

4E45  22 4C59           	SHLD	BLSA
4E48  32 4E59           	STA	BLSA+2
4E4B  22 5359           	SHLD	BLSC
4E4E  32 5559           	STA	BLSC+2
4E51  22 3360           	SHLD	CHEA
4E54  32 3560           	STA	CHEA+2
4E57  22 9667           	SHLD	EWSA
4E5A  32 9867           	STA	EWSA+2
4E5D  22 3168           	SHLD	SDDA
4E60  32 3368           	STA	SDDA+2

                        *	SEE IF COMMAND LINE PASSED ON STACK

4E63  21 0000           WARM1	LXI	H,0
4E66  39                	DAD	SP
4E67  EB                	XCHG
4E68  3E 80             	MVI	A,#STACK
4E6A  93                	SUB	E
4E6B  4F                	MOV	C,A
4E6C  3E 22             	MVI	A,STACK/256
4E6E  9A                	SBB	D
4E6F  47                	MOV	B,A	;(BC) = BYTES ON STACK
4E70  B1                	ORA	C
4E71  32 1E71           	STA	MODE	;SET MODE <>0 IF LINE ON STACK
4E74  CA 4748           	JZ	START	;NO LINE

                        *	HAVE COMMAND ON STACK. COPY INTO LINE BUFFER
                        *	(BC) = COUNT
                        *	(DE) = FWA

4E77  21 1674           	LXI	H,LINE
4E7A  CD AA18           	CALL	$MOVE	;COPY
4E7D  36 00             	MVI	M,0	;ENSURE END
4E7F  C3 4748           	JMP	START	;START PROGRAM

4E82  3E 28             PRS1	MVI	A,EC.NCV;NOT CORRECT VERSION
4E84  37                	STC
4E85  26 0A             PRS2	MVI	H,NL
4E87  FF 2F             	SCALL	.ERROR
4E89  C3 B461           	JMP	ABORT	;BAD PROBLEM

4E8C                    	XTEXT	PIPCOPY
4E8C                    	STL	'COPY - PROCESS COPY COMMAND.'
4E8C                    	EJECT
                        ***	COPY - PROCESS COPY COMMAND.
                        *
                        *	SYNTAX:
                        *
                        *	DEST=SOURCE1,...,SOURCEN
                        *
                        *	'DEST' IS THE DESTINATION FILE DESIGNATOR. IF NULL
                        *	(IN WHICH CASE THE '=' MAY BE OMITTED) IT DEFAULTS TO
                        *
                        *		TT:PIPDEST.JGL
                        *
                        *	THE 'SOURCE' FIELDS ARE THE SOURCE FILE DESIGNATORS. WILDCARDS
                        *	MAY BE USED FOR FILE NAME AND EXTENSION.
                        *	IF NO WILDCARDS ARE USED IN THE DESTINATION, MULTIPLE SOURCE FILES
                        *	ARE CONCATINATED TOGETHER.
                        *
                        *	IF WILDCARDS ARE PRESENT IN THE DESTINATION FILE DESCRIPTION,
                        *	THE SOURCE FILES ARE COPIED TO INDIVIDUAL OUTPUT FILES. THE
                        *	NAMES OF THE OUTPUT FILES ARE CREATED BY FILLING
                        *	THE 'WILD' SPOTS IN THE DESTINATION NAME WITH THE CORRESPONDING
                        *	CHARACTERS IN THE SOURCE NAME.

      = 4E8C            COPY	EQU	*

4E8C  CD 2E65           	CALL	DDF	;DECODE DESTINATION FILE
4E8F  DA B861           	JC	ERROR	;ERROR
4E92  32 F050           	STA	COPYA	;SAVE DESTINATION TYPE
4E95  CD 2268           	CALL	SDD	;RESET DEFAULT DEFAULTS
4E98  AF                	XRA	A	;ALLOW *.*
4E99  32 F250           	STA	COPYCT	;RESET COPY COUNTER
4E9C  CD FA62           	CALL	BSL	;BUILD SOURCE FILE LIST
4E9F  DA B861           	JC	ERROR
4EA2  CD 746B           	CALL	$MOVEL
4EA5  1100              	DW	FB.NAML
4EA7  6771              	DW	DESTFB+FB.NAM
4EA9  8F71              	DW	COPYD	;SAVE WILDCARD DESTINATION

4EAB  CD DA52           	CALL	HMSF

                        *	HAVE DESTINATION AND SOURCE FILE NAMES. DO THE COPYING.
                        *
                        *	IF NO DESTINATION WILD CARDS, THUS COPYING TO A SINGLE OUTPUT
                        *	FILE, OPEN THAT FILE NOW.

4EAE  3D                	DCR	A	;IF ONLY ONE SOURCE FILE TREAT AS WILDCARD
4EAF  CA D64E           	JZ	COPY1	;DEST TO ALLOW COPY/CONTIG

4EB2  3A F050           COPY.0	LDA	COPYA
4EB5  A7                	ANA	A
4EB6  CA D64E           	JZ	COPY1	;IS WILDCARDED

4EB9  CD 5053           	CALL	CPYSAFE ;IS IT SAFE ?
4EBC  DA 9150           	JC	COPY5.	;BAIL OUT

4EBF  21 6771           	LXI	H,DESTFB+FB.NAM
4EC2  3E 01             	MVI	A,CN.DES;(A) = DESTINATION CHANNEL
4EC4  FF 23             	SCALL	.OPENW	;OPEN IT
4EC6  D2 D64E           	JNC	COPY1

4EC9  CD 7B52           	CALL	FORCHKC ;TRY TO FORCE IT
4ECC  21 6771           	LXI	H,DESTFB+FB.NAM
4ECF  3E 01             	MVI	A,CN.DES
4ED1  FF 23             	SCALL	.OPENW
4ED3  DA D452           	JC	FCEC

                        *	OPEN NEXT SOURCE FILE

4ED6  2A 5971           COPY1	LHLD	NAMTLEN
4ED9  7C                	MOV	A,H
4EDA  B5                	ORA	L
4EDB  CA 8A50           	JZ	COPY5	;NO MORE INPUT FILES
4EDE  21 0000           	LXI	H,0
4EE1  22 1720           	SHLD	.CRCSUM ;CLEAR CHECKSUM FOR VERIFY
4EE4  21 7B74           	LXI	H,NAMTAB;(HL) = NAME ADDRESS
4EE7  CD F850           	CALL	XCOPY1	;PRINT SOURCE FILE
4EEA  AF                	XRA	A	;CN.SOU = 0 = SOURCE CHANNEL
4EEB  32 F750           	STA	COPYNA	;RESET NOT ASCII FLAG
4EEE  FF 22             	SCALL	.OPENR	;OPEN FOR READ
4EF0  DA 8B61           	JC	NAMERR	;IF ERROR

4EF3  3A 3671           	LDA	CONTIG
4EF6  A7                	ANA	A
4EF7  CA 174F           	JZ	COPY1.1

4EFA  AF                	XRA	A	;CN.SOU = 0
4EFB  01 FFFF           	LXI	B,-1
4EFE  FF 27             	SCALL	.POSIT
4F00  FE 01             	CPI	EC.EOF
4F02  C2 8B61           	JNE	NAMERR
4F05  60                	MOV	H,B
4F06  69                	MOV	L,C
4F07  CD 9418           	CALL	$CHL
4F0A  2B                	DCX	H	;HL = FILE LENGTH
4F0B  22 3E71           	SHLD	D.CNT
4F0E  01 0000           	LXI	B,0
4F11  AF                	XRA	A
4F12  FF 27             	SCALL	.POSIT	;RESET POINTER
4F14  DA 8B61           	JC	NAMERR

                        *	GET AND SAVE THE FILE'S FLAGS

4F17  3A 3471           COPY1.1 LDA	ATTRIB
4F1A  FE 02             	CPI	2	;AM FORCING FLAGS ON?
4F1C  CA 2D4F           	JE	COPY1.2 ;YES, CAN'T BE CARRYING FROM SOURCE, TOO.

4F1F  2A EA20           	LHLD	S.CFWA	;POINT TO CHANNEL -1
                        	ERRNZ	CN.SOU
4F22  CD 8918           	CALL	$HLIHL	;NOW TO CHANNEL 0
4F25  11 2100           	LXI	D,IOC.DIR+DIR.FLG
4F28  19                	DAD	D	;POINT TO FLAG
4F29  7E                	MOV	A,M	;AND GET IT
4F2A  32 F350           	STA	COPYF	;SAVE IN CASE TO CARRY ALONG VIA /ATT SWITCH

                        *	OPEN DESTINATION FILE IF WILDCARDS OR SINGLE SOURCE

4F2D  3A F150           COPY1.2 LDA	COPYC
4F30  3D                	DCR	A
4F31  CA 3B4F           	JZ	COPY1.3

4F34  3A F050           	LDA	COPYA
4F37  A7                	ANA	A
4F38  C2 8A4F           	JNZ	COPY2	;NOT WILDCARDS

4F3B  01 8F71           COPY1.3 LXI	B,COPYD ;(BC) = WILDCARD PATTERN ADDRESS
4F3E  11 7B74           	LXI	D,NAMTAB;(DE) = SOURCE NAME
4F41  21 6771           	LXI	H,DESTFB+FB.NAM;(HL) = RESULT AREA
4F44  CD 0E51           	CALL	XCOPY2	;PRINT DESTINATION FILE

4F47  CD 5053           	CALL	CPYSAFE ;IS IT SAFE ?
4F4A  D2 5D4F           	JNC	COPY1.4
4F4D  AF                	XRA	A
4F4E  FF 2D             	SCALL	.CLEAR	;CLOSE SOURCE FILE
4F50  DA 8B61           	JC	NAMERR
4F53  CD FC67           	CALL	REN	;REMOVE ENTRY FROM NAME TABLE
4F56  21 F150           	LXI	H,COPYC
4F59  35                	DCR	M	;COUNT = COUNT - 1
4F5A  C3 D64E           	JMP	COPY1	;TRY NEXT FILE

4F5D  3A 3671           COPY1.4 LDA	CONTIG
4F60  A7                	ANA	A
4F61  CA 734F           	JZ	COPY1.6

4F64  2A 3E71           	LHLD	D.CNT
4F67  44                	MOV	B,H
4F68  4D                	MOV	C,L	;BC = LENGTH
4F69  21 6771           	LXI	H,DESTFB+FB.NAM
4F6C  3E 01             	MVI	A,CN.DES
4F6E  FF 25             	SCALL	.OPENC
4F70  C3 874F           	JMP	COPY1.7

4F73  21 6771           COPY1.6 LXI	H,DESTFB+FB.NAM
4F76  3E 01             	MVI	A,CN.DES
4F78  FF 23             	SCALL	.OPENW
4F7A  D2 8A4F           	JNC	COPY2

4F7D  CD 7B52           	CALL	FORCHKC ;TRY TO FORCE IT
4F80  21 6771           	LXI	H,DESTFB+FB.NAM
4F83  3E 01             	MVI	A,CN.DES
4F85  FF 23             	SCALL	.OPENW
4F87  DA D452           COPY1.7 JC	FCEC

                        *	INPUT AND OUTPUT FILES OPEN, COPY

      = 4F8A            COPY2	EQU	*

4F8A  3A 1D71           	LDA	H19FLG
4F8D  A7                	ANA	A
4F8E  CA AF4F           	JZ	COPY2.	;NOT H19 SO MOVE ON

4F91  CD 5F51           	CALL	CHKTT	;CHECK IF DEST = TT:
4F94  C2 AF4F           	JNE	COPY2.	;NOT LISTING ON CONSOLE SO MOVE ON

4F97  3A 2F71           	LDA	SUPRES
4F9A  FE 03             	CPI	3
4F9C  D2 AF4F           	JNC	COPY2.	;NO STATUS LINE

4F9F  CD FC52           	CALL	SHOW25
4FA2  CD 5E19           	CALL	$TYPTX
4FA5  4C697374 696EE7   	DB	'Listin','g'+200Q
4FAC  CD 1A53           	CALL	SHOW25.

4FAF  CD 9366           COPY2.	CALL	EBM	;EXPAND BUFFER TO MAX SIZE
4FB2  2A 5771           COPY3	LHLD	BUFSIZ
4FB5  44                	MOV	B,H
4FB6  4D                	MOV	C,L	;(BC) = LENGTH OF BUFFER
4FB7  2A 5571           	LHLD	BUFPTR
4FBA  EB                	XCHG			(DE);= BUFFER FWA
4FBB  AF                	XRA	A	;CN.SOU = 0
4FBC  D5                	PUSH	D
4FBD  FF 04             	SCALL	.READ
4FBF  D1                	POP	D	;(DE) = BUFFER FWA
4FC0  F5                	PUSH	PSW
4FC1  D2 CD4F           	JNC	COPY4	;GOT IT ALL
4FC4  FE 01             	CPI	EC.EOF
4FC6  CA CD4F           	JE	COPY4	;IS EOF
4FC9  F1                	POP	PSW	;RESTORE ERROR CODE
4FCA  C3 8B61           	JMP	NAMERR

      = 4FCD            COPY4	EQU	*
4FCD  E5                	PUSH	H
4FCE  D5                	PUSH	D
4FCF  C5                	PUSH	B

4FD0  CD 5F51           	CALL	CHKTT	;CHECK IF DEST = TT:
4FD3  C2 1650           	JNZ	COPY4.	;IS DIRECTORY DEVICE

4FD6  3A 3771           	LDA	FORCE
4FD9  A7                	ANA	A
4FDA  C2 1650           	JNZ	COPY4.	;DON'T CHECK FOR ASCII, JUST COPY IT
4FDD  2A 5571           	LHLD	BUFPTR
4FE0  0E 00             	MVI	C,0	;CHECK ONE SECTOR
4FE2  7E                CO.LP	MOV	A,M
4FE3  E6 80             	ANI	200Q
4FE5  C2 F04F           	JNZ	NOTASC
4FE8  23                	INX	H
4FE9  0D                	DCR	C
4FEA  C2 E24F           	JNZ	CO.LP
4FED  C3 1650           	JMP	COPY4.	;PROBABLY ASCII SO COPY IT

                        *	NOT ASCII FILE, WILL PRODUCE GARBAGE

4FF0  32 F750           NOTASC	STA	COPYNA	;FLAG NOT ASCII
4FF3  C1                	POP	B	;TIDY UP AND EXPLAIN
4FF4  D1                	POP	D
4FF5  E1                	POP	H
4FF6  CD 5E19           	CALL	$TYPTX
4FF9  078A              	DB	BELL,ENL
4FFB  CD 5351           	CALL	CPYSFN
4FFE  CD 5E19           	CALL	$TYPTX
5001  202D204E 4F542041 	DB	' - NOT Ascii',ENL
5009  73636969 8A
500E  21 F150           	LXI	H,COPYC
5011  35                	DCR	M	;Count = Count - 1
5012  F1                	POP	PSW
5013  C3 4E50           	JMP	COPY4.X

5016  C1                COPY4.	POP	B
5017  D1                	POP	D
5018  E1                	POP	H
5019  3A 5871           	LDA	BUFSIZ+1;(A) = # OF SECTORS IN BUFFER
501C  90                	SUB	B
501D  32 F450           	STA	COPYG		; SAVE # OF SECTORS READ
5020  47                	MOV	B,A	;(B) = SECTORS READ
5021  0E 00             	MVI	C,0
5023  3E 01             	MVI	A,CN.DES
5025  FF 05             	SCALL	.WRITE	;WRITE IT OUT
5027  DA D452           	JC	FCEC	;ERROR ON WRITE

502A  3A 3971           	LDA	VERIFY
502D  A7                	ANA	A
502E  CA 4A50           	JZ	COPY4.1 	; DON'T DO VERIFY

5031  CD 6B51           	CALL	CHKDD		; CHECK FOR DIR DEVICE
5034  CA 4A50           	JZ	COPY4.1 	; NOT DIRECTORY DEVICE

5037  3A F450           	LDA	COPYG		; GET # OF SECTORS READ
503A  47                	MOV	B,A
503B  0E 00             	MVI	C,0		; BC = COUNT
503D  2A 1720           	LHLD	.CRCSUM
5040  EB                	XCHG
5041  2A 5571           	LHLD	BUFPTR		; HL => BUFFER FWA
5044  FF 0B             	SCALL	.CRC16
5046  EB                	XCHG
5047  22 1720           	SHLD	.CRCSUM

504A  F1                COPY4.1 POP	PSW	;(PSW) = STATUS FROM READ
504B  D2 B24F           	JNC	COPY3	;NOT EOF
504E  CD 1168           COPY4.X CALL	SBE	;SHRINK BUFFER TO MINIMUM SIZE

5051  CD 5F51           	CALL	CHKTT	;CHECK IF DEST = TT:
5054  C2 5A50           	JNE	COPY4.2 ;NOT LISTING ON CONSOLE SO MOVE ON

5057  CD 3953           	CALL	SHOW25X ;Clean up line 25

505A  AF                COPY4.2 XRA	A	;CN.SOU = 0
505B  FF 26             	SCALL	.CLOSE	;CLOSE SOURCE
505D  DA 8B61           	JC	NAMERR	;ERROR ON CLOSE
5060  CD FC67           	CALL	REN	;REMOVE ENTRY FROM NAMTAB

                        *	IF DOING INDIVIDUAL FILE COPIES, CLOSE OUTPUT FILE.

5063  3A F050           	LDA	COPYA
5066  A7                	ANA	A
5067  CA 7250           	JZ	COPY4A	;NOT CONCATINATING

506A  3A F150           	LDA	COPYC
506D  FE 01             	CPI	1	;IS SINGLE INPUT FILE?
506F  C2 D64E           	JNE	COPY1	;NO, CONCATENATING, GO COPY MORE.

5072  CD 6552           COPY4A	CALL	XFLAGS
5075  CD 4C52           	CALL	XATTRIB ;COPY ATTRIBUTE OF SOURCE
5078  CD F351           	CALL	XDATE	;CLOSE DESTINATION
507B  DA D452           	JC	FCEC	;ERROR ON CLOSE
507E  CD 3651           	CALL	XCOPY3	;SHOW IT COPIED

5081  CD 7F51           	CALL	CHKVFY		; CHECK VERIFY STATE
5084  DA 3548           	JC	RESTART 	; CRC ERROR

5087  C3 D64E           	JMP	COPY1	;GET NEXT FILE

                        **	ALL COPIES COMPLETE. CLOSE FILES AND CLEAN UP

508A  3A F150           COPY5	LDA	COPYC
508D  A7                	ANA	A
508E  C2 A350           	JNZ	COPY6

                        *	NO FILES COPIED

5091  CD 9368           COPY5.	CALL	$GNL
5094  CD 5E19           	CALL	$TYPTX
5097  0A4E6FA0          	DB	NL,'No',' '+200Q
509B  CD DF50           	CALL	COPY7.
509E  3E 01             	MVI	A,CN.DES
50A0  FF 2D             	SCALL	.CLEAR	;CLEAR CHANNEL
50A2  C9                	RET

50A3  06 00             COPY6	MVI	B,0	;(BC) = COUNT OF FILES COPIED
50A5  4F                	MOV	C,A
50A6  3A F050           	LDA	COPYA
50A9  A7                	ANA	A
50AA  CA C750           	JZ	COPY7	;WILDCARDED

                        *	SINGLE OUTPUT FILE (CONCATENATING)

50AD  79                	MOV	A,C
50AE  FE 01             	CPI	1	;SINGLE INPUT FILE?
50B0  CA C750           	JZ	COPY7	;YES, ALREADY CLOSED.

50B3  C5                	PUSH	B	;SAVE COUNT
50B4  CD 6552           	CALL	XFLAGS
50B7  3E 01             	MVI	A,CN.DES
50B9  FF 26             	SCALL	.CLOSE	;CLOSE OUTPUT FILE
50BB  C1                	POP	B	;(BC) = FILES COPIED COUNT
50BC  DA D452           	JC	FCEC	;ERROR ON CLOSE

50BF  C5                	PUSH	B		; SAVE COUNT
50C0  CD 7F51           	CALL	CHKVFY		; CHECK VERIFY STATE
50C3  C1                	POP	B		; RESTORE COUNT
50C4  DA 3548           	JC	RESTART 	; CRC ERROR

                        *	TYPE FILE COUNT

50C7  3A 2F71           COPY7	LDA	SUPRES
50CA  A7                	ANA	A
50CB  C0                	RNZ			SUPPRESS;TRAIL MESSAGE
50CC  3E 03             	MVI	A,3
50CE  21 DB50           	LXI	H,COPYE
50D1  CD 076B           	CALL	$UDDS	;UNPACK COUNT INTO MESSAGE
50D4  CD 9368           	CALL	$GNL
50D7  CD 5E19           	CALL	$TYPTX
50DA  0A                	DB	NL
50DB  585858A0          COPYE	DB	'XXX',' '+200Q
50DF  CD 5E19           COPY7.	CALL	$TYPTX
50E2  46696C65 7320436F 	DB	'Files Copied',ENL
50EA  70696564 8A
50EF  C9                	RET

50F0  00                COPYA	DB	0	;DESTINATION FILE WILDCARD FLAG (=0 IF WC)
50F1  00                COPYC	DB	0	;FILES COPIED COUNT
50F2  00                COPYCT	DB	0	;COPY COUNTER
50F3  00                COPYF	DB	0	;HOLD PLACE FOR SOURCE FILE'S FLAGS
50F4  00                COPYG	DB	0	;# OF SECTORS READ
50F5  0000              COPYCS	DW	0	;SOURCE CRC CHECKSUM
50F7  00                COPYNA	DB	0	;<>0 = NOT ASCII
50F8                    	SPACE	4,10
                        **	COPY COMMAND EXTENSIONS

50F8  3A 2F71           XCOPY1	LDA	SUPRES
50FB  A7                	ANA	A
50FC  C0                	RNZ
50FD  3A F050           	LDA	COPYA
5100  A7                	ANA	A
5101  C0                	RNZ			PRINT;ONLY WILD-CARDED TRANSFERS
5102  CD 2569           	CALL	$CRLF
5105  E5                	PUSH	H
5106  CD 8C65           	CALL	CAD
5109  CD F368           	CALL	TFNS
510C  E1                	POP	H
510D  C9                	RET

510E  E5                XCOPY2	PUSH	H
510F  CD D067           	CALL	MWN	;MERGE WILDCARD NAME
5112  3A F050           	LDA	COPYA
5115  A7                	ANA	A
5116  CA 2051           	JZ	XCPY2
5119  3A F150           	LDA	COPYC
511C  3D                	DCR	A
511D  CA 2751           	JZ	XCPY2.
5120  3A 2F71           XCPY2	LDA	SUPRES
5123  A7                	ANA	A
5124  CA 2951           	JZ	XCPY2..
5127  E1                XCPY2.	POP	H
5128  C9                	RET

5129  CD 5E19           XCPY2.. CALL	$TYPTX
512C  202D2D3E A0       	DB	' -->',' '+200Q
5131  CD F368           	CALL	TFNS
5134  E1                	POP	H
5135  C9                	RET

5136  3A 2F71           XCOPY3	LDA	SUPRES
5139  A7                	ANA	A
513A  C0                	RNZ
513B  3A F050           	LDA	COPYA
513E  A7                	ANA	A
513F  C0                	RNZ
5140  3A F750           	LDA	COPYNA
5143  A7                	ANA	A
5144  C0                	RNZ
5145  CD 5E19           	CALL	$TYPTX
5148  202E2E2E 436F7069 	DB	' ...Copie','d'+200Q
5150  65E4
5152  C9                	RET

                        *	SHOW FILE NAME

5153  21 7B74           CPYSFN	LXI	H,NAMTAB
5156  7E                SFNLP	MOV	A,M
5157  A7                	ANA	A
5158  C8                	RZ
5159  FF 02             	SCALL	.SCOUT
515B  23                	INX	H
515C  C3 5651           	JMP	SFNLP

                        *	CHECK FOR 'TT' AS DEST
                        *	'Z'  = IS 'TT'
                        *	'NZ' = IS NOT 'TT'

515F  21 6771           CHKTT	LXI	H,DESTFB+FB.NAM
5162  CD 8918           	CALL	$HLIHL
5165  11 5454           	LXI	D,'TT'
5168  C3 8E18           	JMP	$CDEHL

                        *	CHECK FOR DIRECTORY DEVICE
                        *	'Z'  = NOT DIR
                        *	'NZ' = IS DIR

516B  21 6771           CHKDD	LXI	H,DESTFB+FB.NAM
516E  CD 8918           	CALL	$HLIHL
5171  EB                	XCHG
5172  FF 0A             	SCALL	.GDA			; BC => DEV. TABLE ENTRY
5174  DA D452           	JC	FCEC
5177  21 0600           	LXI	H,DEV.FLG
517A  09                	DAD	B			; HL => FLAG BYTE
517B  7E                	MOV	A,M			; (A) = FLAG BYTE
517C  E6 01             	ANI	DT.DD			; IS IT DIRECTORY DEVICE
517E  C9                	RET

                        *	DETERMINE CRC VALIDITY OF COPY

517F  3A 3971           CHKVFY	LDA	VERIFY
5182  A7                	ANA	A			; TEST/CLEAR CARRY
5183  C8                	RZ				; DON'T DO VERIFY

5184  CD 6B51           	CALL	CHKDD			; CHECK FOR DIR DEVICE
5187  C8                	RZ				; NOT DIRECTORY DEVICE

5188  3A 2F71           	LDA	SUPRES
518B  A7                	ANA	A
518C  C2 A751           	JNZ	CHKVFY1
518F  3A F050           	LDA	COPYA
5192  A7                	ANA	A
5193  C2 A751           	JNZ	CHKVFY1 		; NOT WILDCARD
5196  CD 5E19           	CALL	$TYPTX
5199  2C205665 72696679 	DB	', Verifying..','.'+200Q
51A1  696E672E 2EAE

51A7  2A 1720           CHKVFY1 LHLD	.CRCSUM
51AA  22 F550           	SHLD	COPYCS			; SAVE SOURCE CRCSUM
51AD  21 6771           	LXI	H,DESTFB+FB.NAM 	; POINT TO DESTINATION
51B0  CD E15F           	CALL	CKSUM			; DO CRC CHECKSUM
51B3  EB                	XCHG				; DE = CRCSUM OF DEST
51B4  2A F550           	LHLD	COPYCS			; GET SOURCE CRCSUM
51B7  CD 8E18           	CALL	$CDEHL			; COMPARE
51BA  C2 E451           	JNE	CKERR			; NOT SAME, ERROR

                        *	CRC WAS SAME

51BD  3A 2F71           	LDA	SUPRES
51C0  A7                	ANA	A			; TEST/CLEAR CARRY
51C1  C0                	RNZ
51C2  2A F550           	LHLD	COPYCS
51C5  44                	MOV	B,H
51C6  4D                	MOV	C,L
51C7  21 DC51           	LXI	H,CNUM2
51CA  3E 05             	MVI	A,5
51CC  CD 6F19           	CALL	$UDD

51CF  CD 5E19           	CALL	$TYPTX
51D2  4F6B2C20 43524320 	DB	'Ok, CRC = '
51DA  3D20
51DC  6E6E6E6E 6E80     CNUM2	DB	'nnnnn',200Q
51E2  A7                	ANA	A			; CLEAR CARRY
51E3  C9                	RET

                        *	CRC WAS DIFFERENT

51E4  CD 5E19           CKERR	CALL	$TYPTX
51E7  43524320 4552524F 	DB	'CRC ERROR',BELL+200Q
51EF  5287
51F1  37                	STC				; SET CARRY
51F2  C9                	RET

51F3  3A 3371           XDATE	LDA	DATE		;CHECK FOR SWITCH
51F6  A7                	ANA	A
51F7  C2 4752           	JNZ	XDATEX		;IS /D, USE CURRENT DATE & TIME

51FA  2A EA20           	LHLD	S.CFWA		;CHANNEL POINTER -1
51FD  CD 8918           	CALL	$HLIHL		;CHANNEL POINTER  0 = CN.SOU
5200  23                	INX	H
5201  23                	INX	H
5202  CD 8918           	CALL	$HLIHL
5205  23                	INX	H
5206  23                	INX	H
5207  23                	INX	H
5208  7E                	MOV	A,M
5209  E6 01             	ANI	DT.DD		;IS IT A DIRECTORY DEVICE ?
520B  CA 4752           	JZ	XDATEX		;NO, USE CURRENT DATE & TIME

520E  2A EA20           	LHLD	S.CFWA		;CHANNEL POINTER -1
5211  CD 8918           	CALL	$HLIHL		;CHANNEL POINTER  0 = CN.SOU
5214  11 1E00           	LXI	D,IOC.DIR+DIR.CTH
5217  19                	DAD	D
5218  E5                	PUSH	H
5219  CD 8918           	CALL	$HLIHL
521C  22 3852           	SHLD	XDATET		;SAVE SOURCE TIME
521F  E1                	POP	H
5220  11 0800           	LXI	D,DIR.CRD-DIR.CTH
5223  19                	DAD	D
5224  CD 8918           	CALL	$HLIHL
5227  22 4252           	SHLD	XDATED		;SAVE SOURCE DATE

522A  2A EA20           	LHLD	S.CFWA		;CHANNEL POINTER -1
522D  CD 8918           	CALL	$HLIHL		;CHANNEL POINTER  0
5230  CD 8918           	CALL	$HLIHL		;CHANNEL POINTER  1 = CN.DES
5233  11 1E00           	LXI	D,IOC.DIR+DIR.CTH
5236  19                	DAD	D
5237  11 0000           	LXI	D,*-*
      = 5238            XDATET	EQU	*-2
523A  CD 4269           	CALL	ISDEHL		;FORCE DEST TIME
523D  11 0600           	LXI	D,DIR.CRD-DIR.CTH-2
5240  19                	DAD	D
5241  11 0000           	LXI	D,*-*
      = 5242            XDATED	EQU	*-2
5244  CD 4269           	CALL	ISDEHL		;FORCE DEST DATE

5247  3E 01             XDATEX	MVI	 A,CN.DES
5249  FF 26             	SCALL	.CLOSE
524B  C9                	RET

524C  3A 3471           XATTRIB LDA	ATTRIB		;WANT TO CARRY THEM ALONG?
524F  3D                	DCR	A
5250  C0                	RNZ				NOPE.

5251  2A EA20           XATT1	LHLD	S.CFWA		;CHANNEL -1
5254  CD 8918           	CALL	$HLIHL			  ;"	0
5257  CD 8918           	CALL	$HLIHL			  ;"	1
                        	ERRNZ	CN.DES-1
525A  11 2100           	LXI	D,IOC.DIR+DIR.FLG;OFFSET TO FLAGS
525D  19                	DAD	D
525E  3A F350           	LDA	COPYF		;GET FROM THE SOURCE FILE
                        	ERRNZ	DIF.CNT-00010000B
5261  E6 EF             	ANI	11101111B	;DON'T CARRY 'C' FLAG
5263  77                	MOV	M,A		;SET THE FLAG
5264  C9                	RET

5265  3A 3471           XFLAGS	LDA	ATTRIB
5268  FE 02             	CPI	2		;FORCE ON FLAGS?
526A  CA 7252           	JE	XFLG1		;YES

526D  3A 3571           	LDA	KEEP
5270  A7                	ANA	A		;KEEP DEST FLAGS?
5271  C8                	RZ

5272  3A 3D71           XFLG1	LDA	D.SET
5275  32 F350           	STA	COPYF		;SAVE
5278  C3 5152           	JMP	XATT1

527B  F5                FORCHKC PUSH	PSW		;SAVE ERROR CODE

527C  3A 3771           	LDA	FORCE
527F  A7                	ANA	A
5280  CA D352           	JZ	FCEC.		;POP & ABORT

5283  3A 0348           	LDA	SYSOP
5286  A7                	ANA	A
5287  C2 9152           	JNZ	FORCK		;SKIP LOCK CHECK IF SYSOP

528A  F1                	POP	PSW		;RESTORE ERROR CODE
528B  FE 18             	CPI	EC.FL		;CHECK FOR L FLAG
528D  CA D452           	JE	FCEC		;ABORT
5290  F5                	PUSH	PSW		;ANTICIPATE NEXT POP

5291  F1                FORCK	POP	PSW		;RESTORE ERROR CODE
5292  FE 14             	CPI	EC.WPV		;CHECK FOR W FLAG
5294  CA 9C52           	JE	FCPC		;WE'RE OK
5297  FE 2C             	CPI	EC.LAD		;CHECK FOR D FLAG
5299  C2 D452           	JNE	FCEC		;ABORT

529C  21 6771           FCPC	LXI	H,DESTFB+FB.NAM
529F  3E 01             	MVI	A,CN.DES
52A1  11 3168           	LXI	D,SDDA
52A4  FF 22             	SCALL	.OPENR		;OPEN FOR READ
52A6  DA D452           	JC	FCEC
52A9  2A EA20           	LHLD	S.CFWA
52AC  CD 8918           	CALL	$HLIHL
52AF  CD 8918           	CALL	$HLIHL
52B2  11 2100           	LXI	D,IOC.DIR+DIR.FLG
52B5  19                	DAD	D
52B6  7E                	MOV	A,M
52B7  32 3D71           	STA	D.SET		;SAVE FLAGS
52BA  36 00             	MVI	M,0
52BC  2A EA20           	LHLD	S.CFWA
52BF  CD 8918           	CALL	$HLIHL
52C2  CD 8918           	CALL	$HLIHL
52C5  11 0400           	LXI	D,IOC.FLG
52C8  19                	DAD	D
52C9  3E 0C             	MVI	A,FT.OW+FT.OU
52CB  B6                	ORA	M
52CC  77                	MOV	M,A		;KLUDGE
52CD  3E 01             	MVI	A,CN.DES
52CF  FF 26             	SCALL	.CLOSE
52D1  D0                	RNC				ALL;IS WELL, RETURN TO CALLER
52D2  F5                	PUSH	PSW		;ANTICIPATE NEXT POP

52D3  F1                FCEC.	POP	PSW		;RESTORE ERROR CODE
52D4  21 5D71           FCEC	LXI	H,DESTFB
52D7  C3 AD70           	JMP	$FERROR

                        *	HOW MANY (SOURCE) FILES ARE THERE?

52DA  2A 5971           HMSF	LHLD	NAMTLEN ;SIZE OF THE NAME TABLE
52DD  44                	MOV	B,H
52DE  4D                	MOV	C,L	;IN (BC)
52DF  11 1100           	LXI	D,FB.NAML;ENTRY LENGTH
52E2  CD 4618           	CALL	$DU66	;(L) = NUMBER OF FILES IN LIST
52E5  7C                	MOV	A,H
52E6  A7                	ANA	A
52E7  C2 9461           	JNZ	IERR2	;SHOULD NEVER HAPPEN
52EA  7D                	MOV	A,L
52EB  32 F150           	STA	COPYC	;SAVE FILE COUNT

52EE  F5                	PUSH	PSW
52EF  4F                	MOV	C,A
52F0  06 00             	MVI	B,0
52F2  21 2A53           	LXI	H,CNUM1
52F5  3E 03             	MVI	A,3
52F7  CD 026B           	CALL	$UDDN	;UNPACK AND RETURN
52FA  F1                	POP	PSW

52FB  C9                	RET

                        *	SHOW WHICH FILE WE ARE DOING ON THE 25TH LINE

52FC  21 F250           SHOW25	LXI	H,COPYCT;POINT TO COPY COUNT
52FF  34                	INR	M	;BUMP
5300  4E                	MOV	C,M	;GET CURRENT FILE #
5301  06 00             	MVI	B,0
5303  21 2353           	LXI	H,CNUM0
5306  3E 03             	MVI	A,3
5308  CD 026B           	CALL	$UDDN

530B  CD 5E19           	CALL	$TYPTX	;SHOW FILE NAME ON 25TH LINE
530E  1B6A              	DB	ESC,'j' ;save cursor position
5310  1B7831            	DB	ESC,'x1';enable 25th line
5313  1B593820          	DB	ESC,'Y8 ';goto 25th line
5317  1BCB              	DB	ESC,'K'+200Q;erase to eol
5319  C9                	RET

531A  CD 5E19           SHOW25. CALL	$TYPTX
531D  2046696C 6520     	DB	' File '
5323  6E6E6E20 6F6620   CNUM0	DB	'nnn of '
532A  6E6E6E20 3DA0     CNUM1	DB	'nnn =',' '+200Q

5330  CD 5351           	CALL	CPYSFN	;SHOW FILE NAME

5333  CD 5E19           	CALL	$TYPTX
5336  1BEB              	DB	ESC,'k'+200Q;restore cursor position
5338  C9                	RET

5339  3A 1D71           SHOW25X LDA	H19FLG
533C  A7                	ANA	A
533D  C8                	RZ			NOT;H19 SO MOVE ON

533E  3A 2F71           	LDA	SUPRES
5341  FE 03             	CPI	3
5343  D0                	RNC			NO;STATUS LINE

5344  CD 5E19           	CALL	$TYPTX
5347  1B79B1            	DB	ESC,'y','1'+200Q;disable 25th line
534A  21 D820           	LXI	H,S.CUSOR
534D  35                	DCR	M	;don't count the 'y1' in the
534E  35                	DCR	M	;cursor position

534F  C9                	RET

                        *	Is it SAFE to copy ?

5350  3A 3871           CPYSAFE LDA	SAFE
5353  A7                	ANA	A	;TEST SAFE & CLEAR CARRY
5354  C8                	RZ			DON'T CARE

5355  21 6771           	LXI	H,DESTFB+FB.NAM
5358  3E 01             	MVI	A,CN.DES
535A  FF 22             	SCALL	.OPENR
535C  D2 6753           	JNC	CPYSAF1
535F  FE 0C             	CPI	EC.FNF
5361  C2 D452           	JNE	FCEC
5364  C3 C653           	JMP	CPYSAF4

5367  3E 01             CPYSAF1 MVI	A,CN.DES
5369  FF 2D             	SCALL	.CLEAR
536B  DA D452           	JC	FCEC
536E  CD 2569           	CALL	$CRLF
5371  21 6771           	LXI	H,DESTFB+FB.NAM
5374  CD F368           	CALL	TFNS
5377  CD 5E19           	CALL	$TYPTX
537A  20657869 7374732C 	DB	' exists, Replace/Skip/Abort ?',' '+200Q
5382  20526570 6C616365
538A  2F536B69 702F4162
5392  6F727420 3FA0
5398  FF 07             	SCALL	.CLRCO

539A  AF                	XRA	A	;A = I.CSLMD
539B  06 01             	MVI	B,CSL.CHR
539D  0E 81             	MVI	C,CSL.ECH+CSL.CHR
539F  FF 06             	SCALL	.CONSL	;SET CHAR/ECHO

53A1  FF 01             CPYSAF2 SCALL	.SCIN
53A3  DA A153           	JC	CPYSAF2
53A6  CD AF68           	CALL	$MCU
53A9  FE 52             	CPI	'R'
53AB  CA C653           	JE	CPYSAF4
53AE  FE 53             	CPI	'S'
53B0  37                	STC			SET;CARRY JUST IN CASE
53B1  C8                	RE
53B2  FE 41             	CPI	'A'
53B4  C2 BC53           	JNE	CPYSAF3
53B7  FF 07             	SCALL	.CLRCO
53B9  C3 3548           	JMP	RESTART

53BC  CD 5E19           CPYSAF3 CALL	$TYPTX
53BF  07082088          	DB	BELL,BS,' ',BS+200Q
53C3  C3 A153           	JMP	CPYSAF2

53C6  AF                CPYSAF4 XRA	A	;CLEAR CARRY
53C7  C9                	RET
53C8                    	XTEXT	PIPLIST
53C8                    	STL	'LIST - LIST DIRECTORY CONTENTS'
53C8                    	EJECT
                        ***	LIST - INDEX DIRECTORY.
                        *
                        *	DEST=SOURCE/LIST
                        *		   /FULL
                        *		   /BRIEF
                        *		   /MINIMUM
                        *		   /GROUPS
                        *
                        *	THESE SWITCHES CAUSE THE DIRECTORY CONTENTS OF THE SPECIFIED FILE(S)
                        *	TO BE LISTED
                        *
                        *	IN /L FORM, THE OUTPUT IS:
                        *
                        *Name	 .Ext	Size   Created	  Time	 Flags---	Date: DD-MMM-YY
                        *
                        *FILENAME.EXT  NNNNN  DD-MMM-YY  HH:MMz  SLWCABDU
                        *
                        * NNN Files, Using MMMMM Sectors (YYYYY Free)
                        *
                        *	IN /B FORM, THE OUTPUT IS:
                        *
                        *FILENAME.EXT	FILENAME.EXT	FILENAME.EXT	FILENAME.EXT	FILENAME.EXT
                        *
                        * NNN Files (YYYYY Free)
                        *
                        *	IN /M FORM, ONLY THE NAME AND EXTENSION ARE LISTED, IN ONE COLUMN.
                        *
                        *	IN /F FORM, THE OUTPUT IS:
                        *
                        *Volume: NNNNN on DD-MMM-YY  Type: System   Init Date: DD-MMM-YY  Init Ver: 3.0
                        *Label:  LABEL.LABEL.LABEL.LABEL.
                        *
                        *Name	 .Ext  Size Alloc   Created    Time   Flags---	Users---  Accessed  A/C
                        *
                        *FILENAME.EXT NNNNN NNNNN  DD-MMM-YY  HH:MMz  SLWCABDU	01234567  DD-MMM-YY NNN
                        *
                        * NNN Files, Using MMMMM Sectors (XXXXX Allocated, YYYYY Free, ZZZ.Z % Free)
                        *
                        *	IN /G FORM, THE OUTPUT IS:
                        *
                        *Name	 .Ext  Alloc	Decimal        Octal	  Hexidecimal	DD-MMM-YY
                        *		      FGN LGN LSI   FGN LGN LSI   FGN LGN LSI
                        *
                        *FILENAME.EXT  NNNNN  DDD DDD DDD   OOO OOO OOO    HH  HH  HH
                        *
                        * NNN Files, Using MMMMM Sectors (YYYYY Free)
                        *
                        *	SPECIAL CONSIDERATIONS:
                        *
                        *	A NULL NAME OR EXTENSION IS TAKEN AS '*' (WILDCARD)
                        *
                        *	IMPLIMENTATION:
                        *
                        *	A FILE LIST OF SOURCE FILES IS BUILT. THE DEVICE DIRECTORY FILE
                        *	IS THEN READ, AND EACH FILE IN IT IS CHECKED FOR A MATCH
                        *	AGAINST ANY SOURCE SPECIFICATIONS. ELIGIBLE FILES ARE LISTED.

      = 53C8            LIST	EQU	*
      = 53C8            FULL	EQU	*
      = 53C8            BRIEF	EQU	*
      = 53C8            MINIMUM EQU	*
      = 53C8            GROUPS	EQU	*

53C8  3A 1F71           	LDA	COMAND
                        	ERRNZ	I.LIS-1
                        	ERRNZ	I.FUL-2
                        	ERRNZ	I.BRE-3
                        	ERRNZ	I.MIN-4
                        	ERRNZ	I.GRP-5
53CB  3D                	DCR	A

53CC  32 4D57           LIST1	STA	LSTA	;(LSTA) 0=/L 1=/F 2=/B 3=/M 4=/G
53CF  21 0000           	LXI	H,0
53D2  22 4F57           	SHLD	LSTC	;CLEAR SECTORS USED COUNT
53D5  22 5157           	SHLD	LSTCA	;CLEAR ALL. SECTORS COUNT
53D8  AF                	XRA	A
53D9  32 4E57           	STA	LSTB	;LSTB = FILE COUNT = 0
53DC  32 005C           	STA	PFID	;ZERO # FILES ACROSS
53DF  CD 746B           	CALL	$MOVEL
53E2  0900BF20 8F57     	DW	9,S.DATE,LSTD1;SET DATE IN /F HEADING
53E8  CD 746B           	CALL	$MOVEL
53EB  0900BF20 9A58     	DW	9,S.DATE,LSTG5.;SET DATE IN /L HEADING
53F1  CD 746B           	CALL	$MOVEL
53F4  0900BF20 5958     	DW	9,S.DATE,LSTG4.;SET DATE IN /G HEADING

                        *	CRACK DESTINATION FILE NAMES

53FA  CD 2E65           	CALL	DDF	;DECODE DEST FILE NAME
53FD  DA B861           	JC	ERROR	;FILE NAME ERROR
5400  A7                	ANA	A
5401  3E 85             	MVI	A,PEC.IUW;ILLEGAL USE OF WILDCARD IN DEST
5403  CA B861           	JZ	ERROR

                        *	BUILD LIST OF SPECIFICATIONS

5406  CD F158           	CALL	BLS	;BUILD LIST OF SOURCE SPECS
5409  DA B861           	JC	ERROR	;ERROR IN LIST
540C  01 0300           	LXI	B,3
540F  21 4671           	LXI	H,DIRNAM
5412  CD AA18           	CALL	$MOVE	;MOVE DEVICE CODE INTO DIRECT.SYS NAME
5415  21 4871           	LXI	H,DIRNAM+2
5418  7E                	MOV	A,M	;SEE IF UNIT NUMBER OMITTED
5419  A7                	ANA	A
541A  C2 1F54           	JNZ	LIST1.5	;SPECIFIED
541D  36 30             	MVI	M,'0'	;DONT ALLOW NULL NUMBER

                        *	GET ADDRESS OF DEVICE'S GRT

541F  21 4671           LIST1.5	LXI	H,DIRNAM;(HL) = # OF XXX:DIRECT.SYS (XXX = DEVICE)
5422  01 5557           	LXI	B,LSTD	;(BC) = ADDRESS FOR RETURN INFO
5425  FF 2B             	SCALL	.DECODE	;DECODE NAME
5427  DA B861           	JC	ERROR	;UNKNOWN DEVICE
542A  3A 5557           	LDA	LSTD+0
542D  E6 01             	ANI	DT.DD
542F  3E 05             	MVI	A,EC.DNS
5431  CA B861           	JZ	ERROR	;NOT DIRECTORY DEVICE
5434  2A 6657           	LHLD	LSTD+17 ;(HL) = DEV TBL ADDR

5437  11 0900           	LXI	D,DEV.UNT
543A  19                	DAD	D
543B  3A 5857           	LDA	LSTD+3
543E  CD 1721           	CALL	S.GUP	;HL = UNIT TABLE POINTER

                        	ERRNZ	UNT.FLG
5441  7E                	MOV	A,M
5442  E6 40             	ANI	DT.P3
5444  32 7057           	STA	LSTP3	;SAVE PRE-3.0 MEDIA FLAG

5447  CD 3169           	CALL	$INDLB
544A  0100              	DW	UNT.SPG
544C  32 6F57           	STA	LSTF	;SAVE SECTORS PER GROUP

544F  CD 9C18           	CALL	$INDL
5452  0200              	DW	UNT.GRT
5454  EB                	XCHG
5455  22 6D57           	SHLD	LSTE	;SAVE GRT ADDRESS
                        *	XCHG			WHY IS THIS HERE ?

5458  3A 4D57           	LDA	LSTA
545B  3D                	DCR	A
545C  C2 D054           	JNZ	LIST1.6 ;NOT /F

                        *	READ VOL LABEL SECTOR

545F  2A 4671           	LHLD	DIRNAM	;(HL) = DEVICE
5462  3A 4871           	LDA	DIRNAM+2;(A)  = UNIT
5465  D6 30             	SUI	'0'	;MAKE BINARY
5467  11 EB72           	LXI	D,LABEL ;BUFFER
546A  CD AD6E           	CALL	RVL	;READ VOL LABEL
546D  DA B861           	JC	ERROR

5470  3A F472           	LDA	LABEL+LAB.VER		; version number of INIT
5473  FE 30             	CPI	3*16+0			; before 3.0?
5475  3A EB72           	LDA	LABEL+LAB.SER		; get short volume number
5478  4F                	MOV	C,A
5479  06 00             	MVI	B,0
547B  DA 8354           	JC	LIST15. 		; early version disk

547E  2A 3B73           	LHLD	LABEL+LAB.LVN		; long number
5481  44                	MOV	B,H
5482  4D                	MOV	C,L

5483  3E 05             LIST15. MVI	A,5
5485  21 8657           	LXI	H,LSTV0
5488  CD 026B           	CALL	$UDDN

548B  3A F472           	LDA	LABEL+LAB.VER		; version number of INIT
548E  FE 20             	CPI	2*16+0			; before 2.0?
5490  21 9001           	LXI	H,400
5493  DA 9954           	JC	LIST16

5496  2A F772           	LHLD	LABEL+LAB.SIZ;VOL SIZE
5499  22 5357           LIST16	SHLD	LSTCB

549C  11 B457           	LXI	D,LSTD2 ;INIT DATE
549F  2A EC72           	LHLD	LABEL+LAB.IND
54A2  EB                	XCHG
54A3  CD 456A           	CALL	$DAD	;DECODE DATE

54A6  21 A157           	LXI	H,LSTV1 ;VOL TYPE
54A9  01 0600           	LXI	B,6
54AC  3A F372           	LDA	LABEL+LAB.VLT
54AF  11 CE57           	LXI	D,VT.D
54B2  A7                	ANA	A
54B3  CA C054           	JZ	LIST1.V
54B6  11 D457           	LXI	D,VT.S
54B9  3D                	DCR	A
54BA  CA C054           	JZ	LIST1.V
54BD  11 DA57           	LXI	D,VT.U
54C0  CD AA18           LIST1.V CALL	$MOVE

54C3  11 F472           	LXI	D,LABEL+LAB.VER;INIT VER
54C6  21 CA57           	LXI	H,LSTV2
54C9  CD 955B           	CALL	PFI50	;DECODE BCD VALUE
54CC  77                	MOV	M,A
54CD  2B                	DCX	H
54CE  36 2E             	MVI	M,'.'

                        *	OPEN DEVICE'S DIRECTORY

54D0  21 4671           LIST1.6 LXI	H,DIRNAM
54D3  3E 02             	MVI	A,CN.DIR
54D5  FF 22             	SCALL	.OPENR
54D7  3E 80             	MVI	A,PEC.DF;DEVICE FORMAT ERROR
54D9  DA B861           	JC	ERROR	;CAN'T OPEN DIRECTORY

                        *	OPEN OUTPUT FILE

54DC  21 5D71           	LXI	H,DESTFB
54DF  CD ED6E           	CALL	$FOPEW	;OPEN FOR WRITE

                        *	GENERATE HEADING

54E2  3A 4D57           	LDA	LSTA
54E5  3D                	DCR	A
54E6  C2 0F55           	JNZ	LIST1.7 ;NOT /F

54E9  01 5000           	LXI	B,LSTVL ;PRINT VOL DATA
54EC  11 7E57           	LXI	D,LSTV
54EF  CD 466F           	CALL	$FWRIB
54F2  01 0700           	LXI	B,LSTLL
54F5  11 E057           	LXI	D,LSTL
54F8  CD 466F           	CALL	$FWRIB
54FB  E5                	PUSH	H
54FC  21 FC72           	LXI	H,LABEL+LAB.LAB
54FF  E5                	PUSH	H
5500  CD 7D6E           	CALL	$DTB
5503  4F                	MOV	C,A	;LENGTH OF LABEL & 00
5504  06 00             	MVI	B,0
5506  09                	DAD	B	;(BC) = LENGTH
5507  2B                	DCX	H
5508  36 0A             	MVI	M,NL
550A  D1                	POP	D	;(DE) = TEXT
550B  E1                	POP	H	;(HL) = DESTFB
550C  CD 466F           	CALL	$FWRIB

550F  CD 0857           LIST1.7 CALL	LISTHD	;DISPLAY HEADING

5512  3A 4D57           	LDA	LSTA
5515  3D                	DCR	A
5516  3A 3171           	LDA	PAGE	;LINE COUNT PER PAGE
5519  C2 1E55           	JNZ	LIST1.8 ;NOT FULL DISPLAY

551C  D6 03             	SUI	3	;ACCOUNT FOR ADDITIONAL INFO ON 1ST PAGE
551E  32 7157           LIST1.8 STA	LINCNT	;SET LINE COUNTER

                        *	READ DIRECTORY BLOCKS, LOOKING FOR FILE MATCHES

5521  CD 9366           	CALL	EBM	;EXPAND BUFFER
5524  2A 5571           	LHLD	BUFPTR
5527  22 7257           	SHLD	BPOINT
552A  01 0002           LIST3	LXI	B,512
552D  CD 9C67           	CALL	GDWP	;DE = DIRECTORY WORKSPACE POINTER
5530  3E 02             	MVI	A,CN.DIR
5532  D5                	PUSH	D
5533  FF 04             	SCALL	.READ
5535  D1                	POP	D	;DE = DIRECTORY WORKSPACE
5536  DA AF55           	JC	LIST9	;ALL DONE

                        *	CHECK NEXT ENTRY IN NAMTAB AGAINST DIRECTORY ENTRY.
                        *	(DE) = DIRECTORY BUFFER POINTER

5539  1A                LIST4	LDAX	D	;(A) = FIRST CHARACTER OF NAME
553A  A7                	ANA	A
553B  CA 2A55           	JZ	LIST3	;END OF THIS BUFFER
553E  3C                	INR	A
                        	ERRNZ	DF.EMP-377Q
553F  CA 8355           	JZ	LIST7	;THIS ENTRY IS EMPTY
5542  3C                	INR	A
5543  CA AF55           	JZ	LIST9	;NO MORE ENTRYS IN DIRECTORY
5546  EB                	XCHG
5547  CD 4264           	CALL	CFE	;CHECK FILE ELIGIBILITY
554A  EB                	XCHG
554B  C2 8355           	JNE	LIST7	;NOT ELIGIBLE
554E  21 7B74           	LXI	H,NAMTAB

5551  E5                LIST5	PUSH	H
5552  D5                	PUSH	D	;SAVE ADDRESS OF FILE AND PATTERN
5553  CD 8C65           	CALL	CAD	;CONVERT ASCII NAMTAB ENTRY TO DIRECTORY FORMAT
5556  11 EE73           	LXI	D,PIO.DIR+DIR.NAM;(DE) = NAMTAB PATTERN
5559  E1                	POP	H
555A  E5                	PUSH	H	;(HL) = DIRECTORY PATTERN
555B  06 0B             	MVI	B,8+3	;CHECK FOR MATCH
555D  CD 2065           	CALL	CWM	;CHECK FOR WILDCARD MATCH
5560  D1                LIST6	POP	D
5561  E1                	POP	H

                        *	KLUDGE METHOD FOR NEGATE STATE

5562  F5                	PUSH	PSW
5563  3A 2C71           	LDA	NEGATE
5566  E3                	XTHL
5567  AD                	XRA	L
5568  6F                	MOV	L,A
5569  E3                	XTHL
556A  F1                	POP	PSW

556B  CA 9A55           	JZ	LIST8	;GOT FILE TO LIST
556E  01 1100           	LXI	B,FB.NAML
5571  09                	DAD	B	;ADVANCE PAST ENTRY IN NAMTAB

                        *	SEE IF AT END OF NAMTAB

5572  D5                	PUSH	D
5573  EB                	XCHG			(DE);= NEW ADDRESS
5574  2A 5971           	LHLD	NAMTLEN
5577  01 7B74           	LXI	B,NAMTAB
557A  09                	DAD	B	;(HL) = LWA+1 OF TABLE
557B  EB                	XCHG
557C  CD 8E18           	CALL	$CDEHL	;COMPARE
557F  D1                	POP	D
5580  C2 5155           	JNE	LIST5	;MORE IN TABLE

                        *	FILE DOESN'T MATCH ANY SELECTED FILE. PASS TO NEXT ONE

5583  EB                LIST7	XCHG			(HL);= DIR BUFFER ADDRESS

5584  E5                	PUSH	H
5585  CD A267           	CALL	GDWP.	;HL = DIRECTORY WORKSPACE PTR.
5588  CD 3169           	CALL	$INDLB	;A  = DIR. ENTRY LENGTH
558B  FB01              	DW	DIS.ENL
558D  E1                	POP	H

558E  CD 4118           	CALL	$DADA.	;ADVANCE
5591  7E                	MOV	A,M
5592  A7                	ANA	A
5593  EB                	XCHG
5594  C2 3955           	JNZ	LIST4	;TRY THIS ONE
5597  C3 2A55           	JMP	LIST3	;READ ANOTHER BLOCK

                        *	HAVE FILE TO LIST

559A  D5                LIST8	PUSH	D	;SAVE DIR POINTER

559B  2A 7257           	LHLD	BPOINT	;SAVE ENTRY IN BUFFER
559E  01 1700           	LXI	B,DIRELEN
55A1  CD AA18           	CALL	$MOVE
55A4  22 7257           	SHLD	BPOINT	;ADVANCE POINTER

                        *	CONTINUE WITH LISTING

55A7  D1                	POP	D
55A8  21 4E57           	LXI	H,LSTB
55AB  34                	INR	M	;COUNT FILE
55AC  C3 8355           	JMP	LIST7	;ADVANCE TO NEXT FILE

                        *	ALL DONE. CLOSE DIRECTORY FILE

55AF  3E 02             LIST9	MVI	A,CN.DIR
55B1  FF 26             	SCALL	.CLOSE	;CLOSE FILE

55B3  3A 4E57           	LDA	LSTB
55B6  A7                	ANA	A
55B7  CA 2256           	JZ	LIST10	;NO FILES TO LIST

55BA  3A 2D71           	LDA	SORT	;SHALL WE SORT?
55BD  A7                	ANA	A
55BE  CA E955           	JZ	LIST9.0

                        *	SORT BUFFER

55C1  2A 5571           	LHLD	BUFPTR
55C4  22 DF55           	SHLD	LSTTAB
55C7  3A 4E57           	LDA	LSTB
55CA  6F                	MOV	L,A
55CB  26 00             	MVI	H,0
55CD  22 E355           	SHLD	LSTCNT

55D0  3A 2E71           	LDA	REVERSE ;(A)=0 IF ASCEND. (A)=3 IF DESCEND.
55D3  21 DB6C           	LXI	H,$SORT
55D6  CD 3A18           	CALL	$DADA
55D9  22 DD55           	SHLD	SRTCAL

55DC  CD DB6C           	CALL	$SORT
      = 55DD            SRTCAL	EQU	*-2
55DF  0000              LSTTAB	DW	*-*
55E1  1700              	DW	DIRELEN
55E3  0000              LSTCNT	DW	*-*
55E5  7457              	DW	FIELDS
55E7  D56C              	DW	SORTAB

                        *	LOOP *LSTB* TIMES PRINTING ENTRYS

55E9  2A 5571           LIST9.0 LHLD	BUFPTR	;START OF BUFFER
55EC  3A 4E57           	LDA	LSTB	;COUNT
55EF  F5                LIST9.1 PUSH	PSW
55F0  E5                	PUSH	H
55F1  EB                	XCHG			DE;= ENTRY POINTER

55F2  CD 5859           	CALL	PFI	;PRINT FILE INFO

                        *	CHECK FOR PAGINATION

55F5  3A 3171           	LDA	PAGE
55F8  A7                	ANA	A
55F9  CA 1856           	JZ	LIST9.2

55FC  21 7157           	LXI	H,LINCNT;POINT TO LINE COUNTER
55FF  35                	DCR	M
5600  C2 1856           	JNZ	LIST9.2 ;NOT TIME

                        *	SPIT OUT A NEW PAGE

5603  21 5D71           	LXI	H,DESTFB
5606  11 E757           	LXI	D,LSTFF ;FORM FEED
5609  01 0100           	LXI	B,LSTFFL
560C  CD 466F           	CALL	$FWRIB

560F  CD 0857           	CALL	LISTHD	;FOLLOWED BY NEW HEADING

5612  3A 3171           	LDA	PAGE
5615  32 7157           	STA	LINCNT	;RESET LINE COUNTER

5618  E1                LIST9.2 POP	H
5619  01 1700           	LXI	B,DIRELEN
561C  09                	DAD	B	;ADVANCE POINTER
561D  F1                	POP	PSW
561E  3D                	DCR	A
561F  C2 EF55           	JNZ	LIST9.1

5622  3A 4D57           LIST10	LDA	LSTA	;LISTING TYPE
5625  FE 03             	CPI	3	;/M
5627  CA B956           	JZ	LISTM	;NO SUMMARY

                        *	FILL IN SUMMARY DATA

562A  3A 4E57           	LDA	LSTB
562D  4F                	MOV	C,A
562E  06 00             	MVI	B,0	;(BC) = FILE COUNT
5630  3E 03             	MVI	A,3
5632  21 A658           	LXI	H,LSTH1
5635  CD 076B           	CALL	$UDDS	;FILE COUNT

5638  2A 4F57           	LHLD	LSTC	;SECTORS USED
563B  44                	MOV	B,H
563C  4D                	MOV	C,L	;(BC) = SECTOR COUNT
563D  21 B758           	LXI	H,LSTH2
5640  3E 05             	MVI	A,5
5642  CD 026B           	CALL	$UDDN	;USED COUNT

5645  2A 5157           	LHLD	LSTCA
5648  44                	MOV	B,H
5649  4D                	MOV	C,L
564A  21 C658           	LXI	H,LSTH4
564D  3E 05             	MVI	A,5
564F  CD 026B           	CALL	$UDDN	;ALLOCATED COUNT

5652  2A 6D57           	LHLD	LSTE
5655  7E                	MOV	A,M
5656  CD 0565           	CALL	CFS	;FOLLOW GRT CHAIN
5659  EB                	XCHG
565A  22 5157           	SHLD	LSTCA	;SAVE CLUSTERS FREE FOR % CALC
565D  EB                	XCHG
565E  3A 6F57           	LDA	LSTF
5661  CD 0719           	CALL	$MU86	;(HL) = SECTORS FREE
5664  44                	MOV	B,H
5665  4D                	MOV	C,L
5666  21 D758           	LXI	H,LSTH5
5669  3E 05             	MVI	A,5
566B  CD 026B           	CALL	$UDDN	;UNPACK FREE

566E  2A 5357           	LHLD	LSTCB	;(HL) = DISK SIZE
5671  44                	MOV	B,H
5672  4D                	MOV	C,L	;(BC) = SIZE IN SECTORS
5673  3A 6F57           	LDA	LSTF
5676  5F                	MOV	E,A
5677  16 00             	MVI	D,0	;(DE) = SECTORS PER CLUSTER
5679  CD 4618           	CALL	$DU66	;(HL) = SIZE IN CLUSTERS
567C  E5                	PUSH	H	;SAVE SIZE IN CLUSTERS
567D  2A 5157           	LHLD	LSTCA	;(HL) = CLUSTERS FREE
5680  EB                	XCHG
5681  CD D418           	CALL	$MU10	;(HL) = CLUSTERS FREE * 10
5684  EB                	XCHG
5685  CD D418           	CALL	$MU10	;(HL) = CLUSTERS FREE * 100
5688  44                	MOV	B,H
5689  4D                	MOV	C,L	;(BC) = CLUSTERS FREE * 100
568A  D1                	POP	D
568B  D5                	PUSH	D	;(DE) = SIZE IN CLUSTERS
568C  CD 4618           	CALL	$DU66	;(HL) = WHOLE % FREE
568F  D5                	PUSH	D	;REMAINDER
5690  44                	MOV	B,H
5691  4D                	MOV	C,L	;(BC) = % FREE
5692  21 E358           	LXI	H,LSTH7
5695  3E 03             	MVI	A,3
5697  CD 026B           	CALL	$UDDN	;UNPACK %
569A  D1                	POP	D	;REM
569B  CD D418           	CALL	$MU10	;(HL) = REM * 10
569E  D1                	POP	D
569F  D5                	PUSH	D	;(DE) = SIZE IN CLUSTERS
56A0  7B                	MOV	A,E
56A1  E6 FE             	ANI	376Q
56A3  0F                	RRC			(A);= (A)/2
56A4  5F                	MOV	E,A
56A5  19                	DAD	D	;ROUND TO NEAREST 1/10
56A6  44                	MOV	B,H
56A7  4D                	MOV	C,L	;(BC) = REM * 10 , ROUNDED
56A8  D1                	POP	D	;(DE) = SIZE IN CLUSTERS
56A9  CD 4618           	CALL	$DU66	;(HL) = DECIMAL % FREE
56AC  44                	MOV	B,H
56AD  4D                	MOV	C,L
56AE  21 E758           	LXI	H,LSTH7+4
56B1  3E 01             	MVI	A,1
56B3  CD 026B           	CALL	$UDDN	;UNPACK .X%

56B6  3A 2F71           	LDA	SUPRES
56B9  A7                LISTM	ANA	A
56BA  21 5D71           	LXI	H,DESTFB
56BD  C2 FB6F           	JNZ	$FCLO	;NO SUMMARY,CLOSE & EXIT

56C0  3A 4D57           	LDA	LSTA	;LISTING TYPE
56C3  FE 02             	CPI	2	;/B
56C5  CA D856           	JE	LISTB	;BRIEF SUMMARY
56C8  3D                	DCR	A	;/F
56C9  CA FC56           	JZ	LISTF	;FULL SUMMARY

56CC  01 2100           LISTL	LXI	B,LSTHL ;STANDARD SUMMARY
56CF  11 A558           	LXI	D,LSTH	;Files & Using & (
56D2  CD 466F           	CALL	$FWRIB
56D5  C3 EA56           	JMP	LISTB.

56D8  01 0A00           LISTB	LXI	B,LSTH1L
56DB  11 A558           	LXI	D,LSTH	;Files
56DE  CD 466F           	CALL	$FWRIB
56E1  01 0200           	LXI	B,2
56E4  11 C458           	LXI	D,LSTH3 ;' ('
56E7  CD 466F           	CALL	$FWRIB
56EA  01 0A00           LISTB.	LXI	B,LSTH5L
56ED  11 D758           	LXI	D,LSTH5 ;Free
56F0  CD 466F           	CALL	$FWRIB
56F3  01 0200           	LXI	B,2
56F6  11 EF58           	LXI	D,LSTH8 ;')',NL
56F9  C3 0257           	JMP	LISTF.

56FC  01 4C00           LISTF	LXI	B,LSTHFL;(BC) = COUNT
56FF  11 A558           	LXI	D,LSTH	;(DE) = TEXT
5702  CD 466F           LISTF.	CALL	$FWRIB	;WRITE TRAILER

                        *	ALL DONE. CLOSE OUTPUT FILE

5705  C3 FB6F           	JMP	$FCLO	;CLOSE AND EXIT

                        *	DISPLAY THE HEADING LINE

5708  3A 2F71           LISTHD	LDA	SUPRES
570B  FE 02             	CPI	2
570D  D0                	RNC			NO;HEADING WANTED

570E  3A 4D57           	LDA	LSTA	;LISTING TYPE
5711  FE 03             	CPI	3	;/M
5713  C8                	RZ			NO;HEADING
5714  01 0100           	LXI	B,1	;(BC) = TEXT COUNT
5717  11 E857           	LXI	D,LSTG	;(DE) = TEXT ADDRESS
571A  FE 02             	CPI	2	;/B
571C  CA 3D57           	JZ	LISTHD2 ;ONLY <NL> AS HEADING
571F  0E 45             	MVI	C,LSTGFL;(BC) = TEXT COUNT
5721  FE 01             	CPI	1	;/F
5723  CA 3D57           	JZ	LISTHD2 ;FULL HEADING
5726  FE 04             	CPI	4	;/G
5728  CA 4057           	JZ	LISTHG

572B  0E 10             	MVI	C,LSTGL ;STANDARD HEADING
572D  CD 466F           	CALL	$FWRIB
5730  0E 1D             	MVI	C,LSTG3L
5732  11 FE57           	LXI	D,LSTG3
5735  CD 466F           	CALL	$FWRIB
5738  0E 13             	MVI	C,LSTG5L
573A  11 9258           	LXI	D,LSTG5

573D  C3 466F           LISTHD2	JMP	$FWRIB	;WRITE HEADING AND EXIT

5740  0E 10             LISTHG	MVI	C,LSTGL ;GROUP HEADING
5742  CD 466F           	CALL	$FWRIB
5745  0E 65             	MVI	C,LSTG4L
5747  11 2D58           	LXI	D,LSTG4
574A  C3 466F           	JMP	$FWRIB

574D                    	SPACE	4,10
                        *	DATA AREAS FOR LIST

574D  00                LSTA	DB	0	;0=/L 1=/F 2=/B 3=/M 4=/G
574E  00                LSTB	DB	0	;FILE COUNT
574F  0000              LSTC	DW	0	;SECTORS USED
5751  0000              LSTCA	DW	0	;ALL. SECTORS/SECTORS FREE
5753  0000              LSTCB	DW	0	;DISK SIZE IN SECTORS
5755   (0018)           LSTD	DS	24	;FILE NAME DECODE AREA
576D  0000              LSTE	DW	0	;GRT ADDRESS
576F  00                LSTF	DB	0	;SECTORS PER GROUP FOR THIS DEVICE
5770  00                LSTP3	DB	0	;FLAG FOR PRE-3.0 MEDIA
5771  00                LINCNT	DB	0	;LINE COUNTER FOR PAGINATION

5772  0000              BPOINT	DW	0	;BUFFER POINTER FOR LIST

5774  0008              FIELDS	DB	0,8	;FILE NAME (CHARS)
5776  0803              	DB	8,3	;EXTENSION (CHARS)
5778  1300              	DB	19,0	;CREATION DATE (WORD)
577A  1500              	DB	21,0	;ACCESSED DATE (WORD)
577C  0D01              	DB	13,1	;ACCESS COUNT (BYTE)

577E  566F6C75 6D653A20 LSTV	DB	'Volume: ';VOLUME DATA LINE
5786  4E4E4E4E 4E206F6E LSTV0	DB	'NNNNN on '
578E  20
578F  44442D4D 4D4D2D59 LSTD1	DB	'DD-MMM-YY',32,32,32,'Type: '
5797  59202020 54797065
579F  3A20
57A1  2E2E2E2E 2E2E2020 LSTV1	DB	'......',32,32,'Init Date: '
57A9  496E6974 20446174
57B1  653A20
57B4  44442D4D 4D4D2D59 LSTD2	DB	'DD-MMM-YY',32,32,32,'Init Ver: '
57BC  59202020 496E6974
57C4  20566572 3A20
57CA  562E560A          LSTV2	DB	'V.V',NL
      = 0050            LSTVL	EQU	*-LSTV

57CE  44617461 2020     VT.D	DB	'Data',32,32
57D4  53797374 656D     VT.S	DB	'System'
57DA  3F3F3F3F 3F3F     VT.U	DB	'??????'

57E0  4C616265 6C3A09   LSTL	DB	'Label:',TAB;VOLUME LABEL LINE
      = 0007            LSTLL	EQU	*-LSTL

57E7  0C                LSTFF	DB	FF	;FORM FEED
      = 0001            LSTFFL	EQU	*-LSTFF

57E8  0A4E616D 65092E45 LSTG	DB	NL,'Name',TAB,'.Ext',32 	  ;HEADER LINE
57F0  787420
      = 000B            LSTGL.	EQU	*-LSTG
57F3  2053697A 65       	DB	32,'Size'
      = 0010            LSTGL	EQU	*-LSTG
57F8  20416C6C 6F63     LSTG2	DB	32,'Alloc'
      = 0006            LSTG2L	EQU	*-LSTG2
57FE  20202043 72656174 LSTG3	DB	32,32,32,'Created',32,32,32,32,'Time',32,32,32,'Flags---'
5806  65642020 20205469
580E  6D652020 20466C61
5816  67732D2D 2D
      = 001D            LSTG3L	EQU	*-LSTG3
                        	IF	USER
                        	ENDIF
581B  20204163 63657373 	DB	32,32,'Accessed',32,32,32,'A/C',NL,NL
5823  65642020 20412F43
582B  0A0A
      = 0045            LSTGFL	EQU	*-LSTG
582D  20202020 44656369 LSTG4	DB	32,32,32,32,'Decimal',32,32,32,32,32,32,32,32
5835  6D616C20 20202020
583D  202020
5840  4F637461 6C202020 	DB	'Octal',32,32,32,32,32,32,'Hexadecimal',32,32,32
5848  20202048 65786164
5850  6563696D 616C2020
5858  20
5859  44442D4D 4D4D2D59 LSTG4.	DB	'DD-MMM-YY',NL,TAB,TAB,32,32,32,32
5861  590A0909 20202020
5869  46474E20 4C474E20 	DB	'FGN',32,'LGN',32,'LSI',32,32,32
5871  4C534920 2020
5877  46474E20 4C474E20 	DB	'FGN',32,'LGN',32,'LSI',32,32,32
587F  4C534920 2020
5885  46474E20 4C474E20 	DB	'FGN',32,'LGN',32,'LSI',NL,NL
588D  4C53490A 0A
      = 0065            LSTG4L	EQU	*-LSTG4
5892  09094461 74653A20 LSTG5	DB	TAB,TAB,'Date:',32
589A  44442D4D 4D4D2D59 LSTG5.	DB	'DD-MMM-YY',NL,NL
58A2  590A0A
      = 0013            LSTG5L	EQU	*-LSTG5

58A5  0A                LSTH	DB	NL	;SUMMARY LINE
58A6  4E4E4E20 46696C65 LSTH1	DB	'NNN Files'
58AE  73
      = 000A            LSTH1L	EQU	*-LSTH
58AF  2C205573 696E6720 	DB	', Using '
58B7  4D4D4D4D 4D205365 LSTH2	DB	'MMMMM Sectors'
58BF  63746F72 73
58C4  2028              LSTH3	DB	' ('
      = 0021            LSTHL	EQU	*-LSTH
58C6  58585858 5820416C LSTH4	DB	'XXXXX Allocated, '
58CE  6C6F6361 7465642C
58D6  20
58D7  59595959 59204672 LSTH5	DB	'YYYYY Free'
58DF  6565
      = 000A            LSTH5L	EQU	*-LSTH5
58E1  2C20              LSTH6	DB	', '
58E3  5A5A5A2E 5A202520 LSTH7	DB	'ZZZ.Z % Free'
58EB  46726565
58EF  290A              LSTH8	DB	')',NL
      = 004C            LSTHFL	EQU	*-LSTH
58F1                    	SPACE	4,10
                        **	BLS - BUILD LIST OF SOURCE FILES.
                        *
                        *	BLS BUILDS A LIST OF SOURCE FILES INTO *NAMTAB*
                        *	NULL FIELDS ARE SET TO WILDCARDS. BLS REQUIRES THAT ALL
                        *	FILES SPECIFIED HAVE THE SAME DEVICE.
                        *
                        *	IF THE COMMAND LINE CONTAINS NO FILES, BUT CONTAINS AT LEAST
                        *	ONE BLANK (AS WOULD BE THE CASE IN PROCESSING THE /LIST SWITCH, SINCE
                        *	THE '/LIST' IS REPLACED WITH BLANKS) A FILE NAME OF ????????.???
                        *	IS DECODED.
                        *	ENTRY	NAMTAB EMPTY
                        *	EXIT	'C' CLEAR IF OK
                        *		(DE) = #BLSA = 3 CHARACTER DEVICE NAME
                        *		'C' SET IF ERROR
                        *		 (A) = ERROR MESSAGE
                        *	USES	ALL

58F1  CD 746B           BLS	CALL	$MOVEL
58F4  03005359 4C59     	DW	3,BLSC,BLSA;SET INITIAL DEFAULT DEVICE
58FA  21 0000           	LXI	H,0
58FD  22 5971           	SHLD	NAMTLEN	;CLEAR NAMTAB
5900  3E FF             	MVI	A,377Q
5902  32 5259           	STA	BLSB	;FLAG PROCESSING OF FIRST FILE NAME
5905  CD C067           	CALL	LSN	;LOCATE SOURCE NAMES

                        *	CRACK THE NEXT NAME

5908  7E                BLS1	MOV	A,M
5909  11 4C59           	LXI	D,BLSA	;(DE) = DEFAULT ADDRESS
590C  A7                	ANA	A
590D  C8                	RZ			NO;MORE NAMES
590E  CD E568           	CALL	$SOB	;SEE IF ALL NULL
5911  A7                	ANA	A
5912  C2 1859           	JNZ	BLS2	;NOT ALL NULL
5915  21 5359           	LXI	H,BLSC	;USE DEFAULT DEVICE
5918  CD 9065           BLS2	CALL	CAD.	;CONVERT ASCII NAME TO DIRECTORY FORMAT
591B  D8                	RC			ERROR

                        *	IF FIRST NAME, RECORD DEVICE
                        *	IF NOT FIRST, COMPARE DEVICE AGAINST FIRST DEVICE

591C  E5                	PUSH	H
591D  11 EB73           	LXI	D,PIO.DEV
5920  21 4C59           	LXI	H,BLSA
5923  01 0300           	LXI	B,3	;SETUP COUNT, FROM AND TO
5926  3A 5259           	LDA	BLSB
5929  A7                	ANA	A
592A  F2 3759           	JP	BLS3	;NOT 1ST FILE
592D  CD AA18           	CALL	$MOVE	;MOVE IN REQUIRED DEVICE FOR REMAINING FILES
5930  AF                	XRA	A
5931  32 5259           	STA	BLSB	;FLAG 1ST NAME PROCESSED
5934  C3 4259           	JMP	BLS4

5937  CD 3018           BLS3	CALL	$COMP	;SEE IF THIS DEVICE SAME AS PREVIOUS
593A  CA 4259           	JE	BLS4	;OK
593D  3E 81             	MVI	A,PEC.DNC;MULTIPLE DEVICES ARE ILLEGAL
593F  37                	STC
5940  E1                	POP	H
5941  C9                	RET			RETURN;WITH ERROR

                        *	GOT NAME DECODED. ENTER IN NAMTAB

5942  CD C762           BLS4	CALL	AEN	;ADD ENTRY TO NAMTAB
5945  E1                	POP	H
5946  CD 3768           	CALL	SFS	;SKIP FILE SEPERATOR (BLANKS AND/OR COMMA)
5949  C3 0859           	JMP	BLS1	;SEE IF MORE

594C  53593080 8080     BLSA	DB	'SY0',200Q,200Q,200Q
5952  00                BLSB	DB	0	;FIRST FILE NAME FLAG
5953  5359303A 00       BLSC	DB	'SY0:',0	;DEFAULT DEVICE
5958                    	SPACE	4,10
                        **	PFI - PRINT FILE INFO.
                        *
                        *	PFI DECODES A DIRECTORY ENTRY INTO A CODED LINE, THEN
                        *	WRITES IT TO 'DESTFB'.
                        *
                        *	THE PRODUCED FORMAT DEPENDS UPON THE LISTING FORMAT FLAG,
                        *	LSTA.
                        *
                        *	LONG FORM:
                        *
                        *	NAME	.EXT   SIZE    DATE	TIME   FLAGS (NL)
                        *
                        *	SHORT FORM:
                        *
                        *	NAME	.EXT	(TAB)
                        *
                        *	MINIMUM FORM:
                        *
                        *	NAME.EXT (NL)
                        *
                        *	FULL FORM:
                        *
                        *	NAME  .EXT  SIZE  ALLOC  CREATED  TIME	FLAGS  USER  ACCESSED  A/C (NL)
                        *
                        *	GROUP FORM:
                        *
                        *	NAME  .EXT  SIZE  FGN LGN LSI  FGN LGN LSI  FGN LGN LSI (NL)
                        *
                        *	ENTRY	(DE) = DIRECTORY ENTRY POINTER
                        *	EXIT	IF LONG FORM, SECTOR COUNT IS ACCUMULATED IN LSTC
                        *	USES	ALL

5958  21 A85B           PFI	LXI	H,PFIA
595B  0E 08             	MVI	C,8
595D  CD 6D5B           	CALL	PFI20	;COPY NAME
5960  CA 6E59           	JZ	PFI1	;ALL 8 CHAR
5963  3A 4D57           	LDA	LSTA
5966  FE 03             	CPI	3
5968  CA 6E59           	JZ	PFI1	;SKIP TAB IN /M FORM
596B  36 09             	MVI	M,TAB
596D  23                	INX	H
596E  36 2E             PFI1	MVI	M,'.'
5970  23                	INX	H
5971  0E 03             	MVI	C,3
5973  CD 6D5B           	CALL	PFI20	;COPY EXT
5976  3A 4D57           	LDA	LSTA
5979  FE 03             	CPI	3	;/M
597B  CA A659           	JZ	PFI1.5
597E  FE 02             	CPI	2	;/B
5980  CA 8E59           	JZ	PFI1.4
5983  0C                	INR	C	;+ 1 SPACES
5984  36 20             PFI1.1	MVI	M,' '
5986  23                	INX	H
5987  0D                	DCR	C
5988  C2 8459           	JNZ	PFI1.1
598B  C3 B059           	JMP	PFI3

                        *	IS SHORT FORM. SEE IF NEED TO END LINE

598E  36 09             PFI1.4	MVI	M,TAB
5990  23                	INX	H
5991  E5                	PUSH	H
5992  21 3271           	LXI	H,COLUMN
5995  7E                	MOV	A,M
5996  A7                	ANA	A
5997  C2 9C59           	JNZ	PFI.14
599A  36 05             	MVI	M,5	;DEFAULT
599C  3A 005C           PFI.14	LDA	PFID
599F  3C                	INR	A
59A0  BE                	CMP	M
59A1  E1                	POP	H
59A2  C2 AA59           	JNE	PFI2	;NOT TIME YET
59A5  2B                	DCX	H
59A6  36 0A             PFI1.5	MVI	M,NL
59A8  23                	INX	H	;TIME TO END LINE
59A9  AF                	XRA	A
59AA  32 005C           PFI2	STA	PFID	;RESET COUNT
59AD  C3 595B           	JMP	PFI6	;OUTPUT TO FILE

                        *	IS LONG OR FULL FORM.

      = 59B0            PFI3	EQU	*

59B0  EB                	XCHG			(DE);= LINE ADDR (HL) = POINTER
59B1  22 015C           	SHLD	PFIDIR

                        *	DECODE FILE SIZE

59B4  01 0500           	LXI	B,DIR.FGN-DIR.EXT-3
59B7  09                	DAD	B	;(HL) = #DIR.FGN
59B8  7E                	MOV	A,M	;(A) = DIR.FGN
59B9  23                	INX	H
59BA  23                	INX	H
59BB  4E                	MOV	C,M	;(C) = DIR.LSI = SECTORS USED IN LAST GROUP
                        	ERRNZ	DIR.LSI-DIR.FGN-2
59BC  EB                	XCHG			(DE);= ADDRESS OF LSI
59BD  D5                	PUSH	D	;SAVE #DIR.LSI
59BE  E5                	PUSH	H	;SAVE LINE ADDRESS
59BF  2A 6D57           	LHLD	LSTE
59C2  6F                	MOV	L,A
59C3  7E                	MOV	A,M
59C4  CD 0565           	CALL	CFS	;COMPUTE FILE SIZE
59C7  3A 6F57           	LDA	LSTF	;(A) = SECTORS PER GROUP

59CA  47                	MOV	B,A
59CB  CD 0719           	CALL	$MU86;(HL) = SECTORS USED (EXCEPT FOR THOSE IN LAST GROUP)
59CE  22 035C           	SHLD	PFIS	;SAVE PARTIAL SIZE
59D1  3A 3071           	LDA	ALLOCA
59D4  A7                	ANA	A
59D5  CA D959           	JZ	PFI3.5
59D8  48                	MOV	C,B	;Use Group Size instead if /ALL

      = 59D9            PFI3.5	EQU	*

59D9  06 00             	MVI	B,0
59DB  09                	DAD	B	;(HL) = SECTORS USED
59DC  44                	MOV	B,H
59DD  4D                	MOV	C,L	;(BC) = SECTORS USED COUNT
59DE  2A 4F57           	LHLD	LSTC
59E1  09                	DAD	B
59E2  22 4F57           	SHLD	LSTC	;ACCUMULATE COUNT OF SECTORS
59E5  E1                	POP	H	;(HL) = LINE ADDRESS
59E6  3E 05             	MVI	A,5	;5 DIGITS MAX
59E8  CD 076B           	CALL	$UDDS	;UNPACK COUNT

59EB  3A 4D57           	LDA	LSTA
59EE  FE 04             	CPI	4	;/G
59F0  CA E55A           	JE	PFIG
59F3  3D                	DCR	A
59F4  C2 145A           	JNZ	PFI4	;NOT /F

                        *	DECODE FILE ALLOCATION

59F7  36 20             	MVI	M,' '
59F9  23                	INX	H
59FA  E5                	PUSH	H
59FB  2A 035C           	LHLD	PFIS	;PARTIAL SIZE
59FE  3A 6F57           	LDA	LSTF
5A01  4F                	MOV	C,A
5A02  06 00             	MVI	B,0
5A04  09                	DAD	B
5A05  44                	MOV	B,H
5A06  4D                	MOV	C,L	;ALLOCATED SECTORS
5A07  2A 5157           	LHLD	LSTCA
5A0A  09                	DAD	B
5A0B  22 5157           	SHLD	LSTCA	;ACCUMULATE
5A0E  E1                	POP	H
5A0F  3E 05             	MVI	A,5
5A11  CD 076B           	CALL	$UDDS	;UNPACK ALLOC SECTORS

                        *	TYPE CREATION DATE

5A14  D1                PFI4	POP	D	;(DE) = #DIR.LSI
5A15  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES
5A18  EB                	XCHG
                        	ERRNZ	DIR.CRD-DIR.LSI-1
5A19  23                	INX	H	;(HL) = #DIR.CRD
5A1A  E5                	PUSH	H
5A1B  CD 8918           	CALL	$HLIHL
5A1E  EB                	XCHG
5A1F  CD 456A           	CALL	$DAD	;DECODE AUGUSTAN DATE

                        *	DECODE TIME

5A22  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES

5A25  3A 7057           	LDA	LSTP3	;If media is pre-3.0
5A28  A7                	ANA	A		 ;then don't show time
5A29  C2 885A           	JNZ	PFI.NT

5A2C  EB                	XCHG
5A2D  E1                	POP	H	;(HL) = #DIR.CRD
5A2E  E5                	PUSH	H
5A2F  01 F8FF           	LXI	B,DIR.CTH-DIR.CRD
5A32  09                	DAD	B
5A33  EB                	XCHG			(DE);=> HOURS BYTE IN BCD, (HL) = LINE

5A34  1A                	LDAX	D	;If hours set to 377Q
5A35  FE FF             	CPI	377Q		 ;then don't show time
5A37  CA 885A           	JE	PFI.NT

5A3A  CD 955B           	CALL	PFI50	;DECODE BCD
5A3D  D5                	PUSH	D	;HOURS
5A3E  E5                	PUSH	H	;LINE
5A3F  2B                	DCX	H
5A40  2B                	DCX	H
5A41  E5                	PUSH	H	;LINE-2

5A42  21 835A           	LXI	H,T.AP	;SET AM OR PM
5A45  1A                	LDAX	D
5A46  32 055C           	STA	PFIT
5A49  FE 12             	CPI	12H
5A4B  D2 535A           	JNC	T.PM
5A4E  36 61             T.AM	MVI	M,'a'
5A50  C3 635A           	JMP	T.0

5A53  36 70             T.PM	MVI	M,'p'
5A55  D6 12             	SUI	12H
5A57  27                	DAA
5A58  32 055C           	STA	PFIT
5A5B  11 055C           	LXI	D,PFIT
5A5E  E1                	POP	H	;LINE-2
5A5F  E5                	PUSH	H	;LINE-2
5A60  CD 955B           	CALL	PFI50	;DECODE ADJUSTED HOURS

5A63  3A 055C           T.0	LDA	PFIT	;IF HOUR = '00' THEN MAKE IT '12'
5A66  E1                	POP	H	;LINE-2
5A67  A7                	ANA	A
5A68  C2 715A           	JNZ	T.1
5A6B  36 31             	MVI	M,'1'
5A6D  23                	INX	H
5A6E  36 32             	MVI	M,'2'
5A70  2B                	DCX	H
5A71  3E 30             T.1	MVI	A,'0'	;IF FIRST CHAR IS '0' REPLACE WITH ' '
5A73  BE                	CMP	M
5A74  C2 795A           	JNE	T.2
5A77  36 20             	MVI	M,' '
5A79  E1                T.2	POP	H	;LINE
5A7A  D1                	POP	D	;HOURS
5A7B  36 3A             	MVI	M,':'
5A7D  23                	INX	H
5A7E  13                	INX	D
                        	ERRNZ	DIR.CTM-DIR.CTH-1
5A7F  CD 955B           	CALL	PFI50	;DECODE BCD
5A82  36 7A             	MVI	M,'z'	;SET AM OR PM
      = 5A83            T.AP	EQU	*-1
5A84  23                	INX	H
5A85  C3 915A           	JMP	PFI.F

5A88  CD 8E5B           PFI.NT	CALL	PFI40	;INSERT 2 SPACES
5A8B  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES
5A8E  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES

                        *	DECODE FLAGS

5A91  CD 8E5B           PFI.F	CALL	PFI40	;INSERT 2 SPACES
5A94  EB                	XCHG			(DE);= LINE ADDRESS
5A95  E1                	POP	H	;(HL) = #DIR.CRD
5A96  E5                	PUSH	H
5A97  01 FBFF           	LXI	B,DIR.FLG-DIR.CRD
5A9A  09                	DAD	B	;(HL) = ADDRESS OF DIRFLG
5A9B  7E                	MOV	A,M	;(A) = FLAGS
5A9C  EB                	XCHG			(HL);= LINE ADDR
5A9D  11 F85B           	LXI	D,PFIB
5AA0  CD 7B5B           	CALL	PFI30	;DECODE FLAG BYTE
5AA3  EB                	XCHG			(DE);= LINE ADDR
5AA4  E1                	POP	H	;(HL) = #DIR.CRD
5AA5  EB                	XCHG			(HL);= LINE ADDR

5AA6  3A 4D57           	LDA	LSTA	;LISTING TYPE
5AA9  3D                	DCR	A
5AAA  C2 565B           	JNZ	PFI5	;NOT /F

                        *	DECODE USER AREAS

                        	IF	USER
                        	ENDIF

                        *	TYPE LAST ACCESS DATE

5AAD  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES
                        	IF	USER
                        	ELSE
5AB0  EB                	XCHG			(HL);= #DIR.CRD
5AB1  01 0200           	LXI	B,DIR.ACD-DIR.CRD
                        	ENDIF
5AB4  09                	DAD	B	;(HL) = #DIR.ACD
5AB5  E5                	PUSH	H
5AB6  CD 8918           	CALL	$HLIHL
5AB9  EB                	XCHG			(HL);= LINE ADDR
5ABA  CD 456A           	CALL	$DAD	;DECODE AUGUSTAN DATE
5ABD  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES

                        *	TYPE NUMBER OF ACCESSES

5AC0  EB                	XCHG			(DE);= LINE ADDR
5AC1  E1                	POP	H
5AC2  01 F8FF           	LXI	B,DIR.NOA-DIR.ACD
5AC5  09                	DAD	B	;(HL) = #DIR.NOA
5AC6  7E                	MOV	A,M	;(A) = # OF ACCESSES
5AC7  A7                	ANA	A
5AC8  EB                	XCHG			(HL);= LINE ADDR
5AC9  C2 D35A           	JNZ	PFI4.1

5ACC  11 F4FF           PFI4.0	LXI	D,-12	;BACK UP OVER DATE
5ACF  19                	DAD	D
5AD0  C3 565B           	JMP	PFI5	;IF A/C=0 THEN SHOW NO DATE OR COUNT

5AD3  4F                PFI4.1	MOV	C,A	;(C) = NUMBER OF ACCESSES
5AD4  06 00             	MVI	B,0

5AD6  3A 7057           	LDA	LSTP3	;If media is pre-3.0
5AD9  A7                	ANA	A		 ;then don't show acc. date
5ADA  C2 CC5A           	JNZ	PFI4.0		   ;or acc. count

5ADD  3E 03             	MVI	A,3
5ADF  CD 076B           	CALL	$UDDS
5AE2  C3 565B           	JMP	PFI5

5AE5  CD 8E5B           PFIG	CALL	PFI40	;INSERT 2 SPACES
5AE8  D1                	POP	D	;DE = #DIR.LSI
                        	ERRNZ	DIR.LSI-DIR.FGN-2
5AE9  1B                	DCX	D	;DE = #DIR.LGN
5AEA  1B                	DCX	D	;DE = #DIR.FGN
5AEB  D5                	PUSH	D	;SAVE PTR
5AEC  1A                	LDAX	D
5AED  4F                	MOV	C,A
5AEE  06 00             	MVI	B,0
5AF0  3E 03             	MVI	A,3
5AF2  CD 6F19           	CALL	$UDD	;UNPACK FGN
5AF5  36 20             	MVI	M,' '
5AF7  23                	INX	H
5AF8  D1                	POP	D
5AF9  13                	INX	D
5AFA  D5                	PUSH	D
5AFB  1A                	LDAX	D
5AFC  4F                	MOV	C,A
5AFD  06 00             	MVI	B,0
5AFF  3E 03             	MVI	A,3
5B01  CD 6F19           	CALL	$UDD	;UNPACK LGN
5B04  36 20             	MVI	M,' '
5B06  23                	INX	H
5B07  D1                	POP	D
5B08  13                	INX	D
5B09  D5                	PUSH	D
5B0A  1A                	LDAX	D
5B0B  4F                	MOV	C,A
5B0C  06 00             	MVI	B,0
5B0E  3E 03             	MVI	A,3
5B10  CD 6F19           	CALL	$UDD	;UNPACK LSI
5B13  36 20             	MVI	M,' '
5B15  23                	INX	H
5B16  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES
5B19  D1                	POP	D	;DE = #DIR.LSI
5B1A  1B                	DCX	D	;DE = #DIR.LGN
5B1B  1B                	DCX	D	;DE = #DIR.FGN
5B1C  D5                	PUSH	D	;SAVE PTR
5B1D  1A                	LDAX	D
5B1E  CD 486B           	CALL	$UOB	;UNPACK FGN
5B21  36 20             	MVI	M,' '
5B23  23                	INX	H
5B24  D1                	POP	D
5B25  13                	INX	D
5B26  D5                	PUSH	D
5B27  1A                	LDAX	D
5B28  CD 486B           	CALL	$UOB	;UNPACK LGN
5B2B  36 20             	MVI	M,' '
5B2D  23                	INX	H
5B2E  D1                	POP	D
5B2F  13                	INX	D
5B30  D5                	PUSH	D
5B31  1A                	LDAX	D
5B32  CD 486B           	CALL	$UOB	;UNPACK LSI
5B35  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES
5B38  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES
5B3B  D1                	POP	D	;DE = #DIR.LSI
5B3C  1B                	DCX	D	;DE = #DIR.LGN
5B3D  1B                	DCX	D	;DE = #DIR.FGN
5B3E  D5                	PUSH	D	;SAVE PTR
5B3F  1A                	LDAX	D
5B40  CD 606B           	CALL	$UHB	;UNPACK FGN
5B43  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES
5B46  D1                	POP	D
5B47  13                	INX	D
5B48  D5                	PUSH	D
5B49  1A                	LDAX	D
5B4A  CD 606B           	CALL	$UHB	;UNPACK LGN
5B4D  CD 8E5B           	CALL	PFI40	;INSERT 2 SPACES
5B50  D1                	POP	D
5B51  13                	INX	D
5B52  1A                	LDAX	D
5B53  CD 606B           	CALL	$UHB	;UNPACK LSI

5B56  36 0A             PFI5	MVI	M,NL
5B58  23                	INX	H

                        *	LINE ALL BUILT. WRITE TO DESTFB

5B59  11 58A4           PFI6	LXI	D,-PFIA
5B5C  19                	DAD	D
5B5D  44                	MOV	B,H
5B5E  4D                	MOV	C,L	;(BC) = LEN
5B5F  11 A85B           	LXI	D,PFIA	;(DE) = DATA FWA
5B62  21 5D71           	LXI	H,DESTFB
5B65  C3 466F           	JMP	$FWRIB	;WRITE AND EXIT
5B68                    	SPACE	3,10
                        **	PFI20 - COPY FILE NAME.
                        *
                        *	PFI20 COPIES A NAME FIELD FROM THE DIRECTORY ENTRY TO A CODED
                        *	LINE
                        *
                        *	ENTRY	(DE) = DIRECTORY ADDRESS
                        *		(C) = NAME LENGTH
                        *		(HL) = LINE ADDRESS
                        *	EXIT	(DE) = (DE) + (C)
                        *		'Z' SET IF MAX CHARACTERS COPIED
                        *	USES	A,F,C,D,E,H,L

5B68  77                PFI19	MOV	M,A	;COPY
5B69  23                	INX	H
5B6A  13                	INX	D
5B6B  0D                	DCR	C
5B6C  C8                	RZ			ALL;COPIED
5B6D  1A                PFI20	LDAX	D
5B6E  A7                	ANA	A
5B6F  C2 685B           	JNZ	PFI19	;GOT CHAR

                        *	NO NAME. (C) = COUNT LEFT

5B72  7B                	MOV	A,E
5B73  81                	ADD	C
5B74  5F                	MOV	E,A
5B75  7A                	MOV	A,D
5B76  CE 00             	ACI	0
5B78  57                	MOV	D,A
5B79  B3                	ORA	E	;CLEAR 'Z'
5B7A  C9                	RET
5B7B                    	SPACE	3,10
                        **	PFI30 - DECODE FLAGS
                        *
                        *	PFI30 DECODES A FLAG BYTE FROM THE DIRECTORY ENTRY TO A CODED
                        *	LINE
                        *
                        *	ENTRY	(DE) = FLAG CODES
                        *		(HL) = LINE ADDRESS
                        *		(A)  = FLAG BYTE
                        *	EXIT	(HL) = (HL) + 8
                        *		(DE) = (DE) + 8
                        *		(A)  = 0
                        *	USES	A,F,C,D,E,H,L

5B7B  0E 08             PFI30	MVI	C,8	;8 BITS IN A FLAG BYTE
5B7D  87                PFI31	ADD	A	;SHIFT BIT 7 TO CARRY
5B7E  F5                	PUSH	PSW
5B7F  1A                	LDAX	D	;FLAG CHAR
5B80  DA 855B           	JC	PFI32	;IF BIT IS SET
5B83  3E 20             	MVI	A,' '	;IF BIT IS OFF
5B85  77                PFI32	MOV	M,A	;PUT IN LINE
5B86  23                	INX	H	;BUMP POINTERS
5B87  13                	INX	D
5B88  F1                	POP	PSW
5B89  0D                	DCR	C	;COUNT DOWN
5B8A  C2 7D5B           	JNZ	PFI31	;LOOP
5B8D  C9                	RET
5B8E                    	SPACE	3,10
                        **	PFI40 - PUT TWO SPACES IN CODED LINE
                        *
                        *	ENTRY	(HL) = LINE ADDR
                        *	EXIT	(HL) UPDATED

5B8E  36 20             PFI40	MVI	M,' '
5B90  23                	INX	H
5B91  36 20             	MVI	M,' '
5B93  23                	INX	H
5B94  C9                	RET
5B95                    	SPACE	3,10
                        **	PFI50 - DECODE BCD BYTE INTO CODED LINE
                        *
                        *	ENTRY	(DE) = BCD BYTE ADDR
                        *		(HL) = LINE ADDR
                        *	EXIT	(HL) = (HL) + 2
                        *
                        *	USES	A,F,H,L

5B95  1A                PFI50	LDAX	D	;(A) = BCD BYTE
5B96  E6 F0             	ANI	0F0H
5B98  0F                	RRC
5B99  0F                	RRC
5B9A  0F                	RRC
5B9B  0F                	RRC
5B9C  C6 30             	ADI	'0'
5B9E  77                	MOV	M,A
5B9F  23                	INX	H
5BA0  1A                	LDAX	D	;(A) = BCD BYTE
5BA1  E6 0F             	ANI	0FH
5BA3  C6 30             	ADI	'0'
5BA5  77                	MOV	M,A
5BA6  23                	INX	H
5BA7  C9                	RET
5BA8                    	SPACE	3,10
5BA8   (0000)           PFIA	DS	0	;BUFFER AREA FOR LINE BUILD
5BA8  46494C45 4E414D45 	DB	'FILENAME.EXT.NNNNN.NNNNN..DD-MMM-YY..HH:MMz'
5BB0  2E455854 2E4E4E4E
5BB8  4E4E2E4E 4E4E4E4E
5BC0  2E2E4444 2D4D4D4D
5BC8  2D59592E 2E48483A
5BD0  4D4D7A
5BD3  2E2E534C 57434142 	DB	'..SLWCABDU..01234567..DD-MMM-YY..NNN',0
5BDB  44552E2E 30313233
5BE3  34353637 2E2E4444
5BEB  2D4D4D4D 2D59592E
5BF3  2E4E4E4E 00

5BF8  534C5743 41424455 PFIB	DB	'SLWCABDU';FLAG CODES
                        	ERRNZ	DIF.SYS-200Q
                        	ERRNZ	DIF.LOC-100Q
                        	ERRNZ	DIF.WP-40Q
                        	ERRNZ	DIF.CNT-20Q
                        	ERRNZ	DIF.ARC-10Q
                        	ERRNZ	DIF.BAD-4
                        	ERRNZ	DIF.DL-2
                        	ERRNZ	DIF.USR-1

5C00  00                PFID	DB	0	;FILE COUNT FOR /B
5C01  0000              PFIDIR	DW	0	;TEMP DIR POINTER
5C03  0000              PFIS	DW	0	;FILE SIZE WITHOUT LAST CLUSTER
5C05  00                PFIT	DB	0	;TEMP TIME BYTE

                        	IF	USER
                        	ENDIF
5C06                    	XTEXT	PIPCMDS
5C06                    	STL	'SETFLG - SET FILE(S) FLAGS'
5C06                    	EJECT
                        ***	SETFLG - SET FILE(S) FLAGS
                        *
                        *	SYNTAX:
                        *
                        *	SOURCE1,...,SOURCEN/SET[FLAG]:f..
                        *
                        *	AT LEAST ONE SOURCE FILE MUST BE SPECIFIED.
                        *	THE 'C' FLAG IS INVALID HERE.
                        *	IF '!' IS INCLUDED IN FLAG LIST ONLY SPECIFIED FLAGS WILL BE SET
                        *		ALL OTHERS WILL BE CLEARED EXCEPT 'C'
                        *	IF '*' IS INCLUDED IN FLAG LIST ALL FLAGS EXCEPT 'C' WILL BE SET

      = 5C06            SETFLG	EQU	*

5C06  CD C65C           	CALL	SETUP

                        *	SET FLAGS ON FILES ONE BY ONE

5C09  2A 5971           STFL	LHLD	NAMTLEN
5C0C  7C                	MOV	A,H
5C0D  B5                	ORA	L
5C0E  CA EE5C           	JZ	FSUM	;END OF LIST

5C11  CD 3C5D           	CALL	OFFF	;OPEN FILE & FETCH FLAG

                        *	CHECK FOR AFFECTED

5C14  11 3D71           	LXI	D,D.SET ;OUR DATA
5C17  7E                	MOV	A,M
5C18  32 855D           	STA	D.OF	;SAVE OLD FLAGS

5C1B  3A 0348           	LDA	SYSOP
5C1E  A7                	ANA	A
5C1F  C2 285C           	JNZ	STF0	;SKIP LOCK CHECK IF SYSOP

5C22  7E                	MOV	A,M
5C23  E6 40             	ANI	DIF.LOC
5C25  C2 495C           	JNZ	STF.C

5C28  1A                STF0	LDAX	D
5C29  E6 10             	ANI	DIF.CNT ;'Z' SET IF '!' GIVEN
5C2B  1A                	LDAX	D	;OUR DATA
5C2C  CA 3D5C           	JZ	STF1	;JUST INCLUDE FLAGS
5C2F  E6 EF             	ANI	11101111B;CAN'T SET 'C'
5C31  47                	MOV	B,A
5C32  3E EF             	MVI	A,11101111B
5C34  A6                	ANA	M
5C35  B8                	CMP	B	;SEE IF ALREADY SET
5C36  CA 495C           	JE	STF.C	;CLEAR CHANNEL & SKIP COUNT
5C39  78                	MOV	A,B
5C3A  C3 525C           	JMP	STF.S	;SET, CLOSE, COUNT & PRINT FILE

5C3D  A6                STF1	ANA	M
5C3E  EB                	XCHG
5C3F  BE                	CMP	M	;SEE IF ALREADY SET
5C40  EB                	XCHG
5C41  CA 495C           	JE	STF.C	;CLEAR CHANNEL & SKIP COUNT
5C44  1A                	LDAX	D
5C45  B6                	ORA	M	;INCLUDE OUR DATA
5C46  C3 525C           	JMP	STF.S	;SET, CLOSE, COUNT & PRINT FILE

5C49  AF                STF.C	XRA	A	;CN.SOU = 0
5C4A  FF 2D             	SCALL	.CLEAR
5C4C  DA 8B61           	JC	NAMERR
5C4F  C3 555C           	JMP	STFX

5C52  CD 535D           STF.S	CALL	SCCP	;SET, CLOSE, COUNT & PRINT ONLY IF AFFECTED

5C55  CD FC67           STFX	CALL	REN	;REMOVE ENTRY FROM NAMTAB
5C58  C3 095C           	JMP	STFL	;GET NEXT FILE
5C5B                    	STL	'CLRFLG - CLEAR FILE(S) FLAGS'
5C5B                    	EJECT
                        ***	CLRFLG - CLEAR FILE(S) FLAGS
                        *
                        *	SYNTAX:
                        *
                        *	SOURCE1,...,SOURCEN/CLR[FLAG][:f..]
                        *
                        *	AT LEAST ONE SOURCE FILE MUST BE SPECIFIED.
                        *	THE 'C' FLAG IS INVALID HERE.
                        *	IF NO FLAG LIST IS GIVEN (OR '*' IS INCLUDED IN LIST) ALL FLAGS
                        *		ARE CLEARED EXCEPT 'C'.
                        *	IF '@' IS INCLUDED IN FLAG LIST THE ACCESS DATE AND COUNT ARE CLEARED

      = 5C5B            CLRFLG	EQU	*

5C5B  CD C65C           	CALL	SETUP

                        *	CLEAR FLAGS ON FILES ONE BY ONE

5C5E  2A 5971           CLFL	LHLD	NAMTLEN
5C61  7C                	MOV	A,H
5C62  B5                	ORA	L
5C63  CA EE5C           	JZ	FSUM	;END OF LIST

5C66  CD 3C5D           	CALL	OFFF	;OPEN FILE & FETCH FLAG

                        *	CHECK FOR AFFECTED

5C69  11 3D71           	LXI	D,D.SET ;OUR DATA
5C6C  7E                	MOV	A,M
5C6D  32 855D           	STA	D.OF	;SAVE OLD FLAGS

5C70  E6 40             	ANI	DIF.LOC ;IS FILE LOCKED
5C72  CA 845C           	JZ	CLF0	;NO, DON'T WORRY ABOUT SYSOP

5C75  EB                	XCHG			(HL);=> OUR DATA, (DE) => OLD FLAGS
5C76  3A 0348           	LDA	SYSOP
5C79  A7                	ANA	A
5C7A  3E FF             	MVI	A,377Q	;MASK FOR EVERYTHING
5C7C  C2 815C           	JNZ	CLFA
5C7F  3E 10             	MVI	A,DIF.CNT;MASK FOR ONLY '@'
5C81  A6                CLFA	ANA	M
5C82  77                	MOV	M,A
5C83  EB                	XCHG			(DE);=> OUR DATA, (HL) => OLD FLAGS

5C84  1A                CLF0	LDAX	D
5C85  E6 10             	ANI	DIF.CNT ;'@'?
5C87  C2 A35C           	JNZ	CLF2	;YES

5C8A  1A                CLF1	LDAX	D
5C8B  E6 EF             	ANI	11101111B;CAN'T CLEAR 'C'
5C8D  4F                	MOV	C,A
5C8E  2F                	CMA			FORM;MASK
5C8F  47                	MOV	B,A
5C90  7E                	MOV	A,M
5C91  A1                	ANA	C	;SEE IF ALREADY CLEAR
5C92  CA 9A5C           	JZ	CLF.C	;CLEAR CHANNEL & SKIP COUNT
5C95  7E                	MOV	A,M
5C96  A0                	ANA	B
5C97  C3 BD5C           	JMP	CLF.S	;SET, CLOSE, COUNT & PRINT FILE

5C9A  AF                CLF.C	XRA	A	;CN.SOU = 0
5C9B  FF 2D             	SCALL	.CLEAR
5C9D  DA 8B61           	JC	NAMERR
5CA0  C3 C05C           	JMP	CLFX

5CA3  2B                CLF2	DCX	H	;POINT TO A/C
5CA4  7E                	MOV	A,M
5CA5  23                	INX	H
5CA6  A7                	ANA	A	;SEE IF CLEAR
5CA7  CA 8A5C           	JZ	CLF1	;YES, FILE POSSIBLY NOT AFFECTED
5CAA  E5                	PUSH	H
5CAB  2B                	DCX	H
5CAC  36 00             	MVI	M,0	;CLEAR A/C
5CAE  01 0800           	LXI	B,DIR.ACD-DIR.NOA
5CB1  09                	DAD	B
5CB2  36 00             	MVI	M,0
5CB4  23                	INX	H
5CB5  36 00             	MVI	M,0	;CLEAR ACC. DATE
5CB7  E1                	POP	H
5CB8  1A                	LDAX	D
5CB9  E6 EF             	ANI	11101111B;CLEAR '@' FROM DATA
5CBB  2F                	CMA
5CBC  A6                	ANA	M	;CLEAR ANY AFFECTED FLAGS

                        *	EVEN IF NO FLAGS WERE AFFECTED THE FILE IS AFFECTED BECAUSE OF
                        *	CLEARING THE A/C & ACC. DATE, SO COUNT IT

5CBD  CD 535D           CLF.S	CALL	SCCP	;SET, CLOSE, COUNT & PRINT ONLY IF AFFECTED

5CC0  CD FC67           CLFX	CALL	REN	;REMOVE ENTRY FROM NAMTAB
5CC3  C3 5E5C           	JMP	CLFL	;GET NEXT FILE
5CC6                    	STL	'PUTUSR - PUT FILE(S) IN USER AREAS'
5CC6                    	EJECT
                        ***	PUTUSR - PUT FILE(S) IN USER AREAS
                        *
                        *	SYNTAX:
                        *
                        *	SOURCE1,...,SOURCEN/PUT[USER]:u..
                        *
                        *	AT LEAST ONE SOURCE FILE MUST BE SPECIFIED.
                        *	THE 0 USER AREA IS INVALID HERE.
                        *	IF '!' IS INCLUDED IN USER LIST ONLY SPECIFIED USERS & 0 WILL
                        *		BE SET, ALL OTHERS WILL BE CLEARED.
                        *	IF '*' IS INCLUDED IN USER LIST ALL USER AREAS WILL BE SET

                        	IF	USER
                        	ENDIF
5CC6                    	STL	'REMUSR - REMOVE FILE(S) FROM USER AREAS'
5CC6                    	EJECT
                        ***	REMUSR - REMOVE FILE(S) FROM USER AREAS
                        *
                        *	SYNTAX:
                        *
                        *	SOURCE1,...,SOURCEN/REM[USER][:u..]
                        *
                        *	AT LEAST ONE SOURCE FILE MUST BE SPECIFIED.
                        *	THE 0 USER AREA IS INVALID HERE.
                        *	IF NO USER LIST IS GIVEN (OR '*' IS INCLUDED IN LIST)
                        *		ALL USER AREAS EXCEPT 0 ARE CLEARED.

                        	IF	USER
                        	ENDIF
5CC6                    	STL	'ROUTINES FOR SETFLAG,CLRFLAG,PUTUSER,REMUSER'
5CC6                    	EJECT
                        **	SETUP - SETUP ROUTINE FOR SET,CLR,PUT,REM & PARTIALLY FOR DEL

                        *	ZERO COUNT,CHECK FOR DEST,BUILD SOURCE LIST

5CC6  AF                SETUP	XRA	A
5CC7  32 F150           	STA	COPYC	;CLEAR FILE COUNT

5CCA  CD DE5C           	CALL	CHKLN	;MUST HAVE ONLY SOURCE FILE(S)
5CCD  CA B861           	JZ	ERROR	;NO SOURCE FILE

5CD0  3A 1F71           	LDA	COMAND
5CD3  FE 08             	CPI	I.DEL
5CD5  C8                	RE			IF;CALLED FROM /DELETE

5CD6  AF                	XRA	A	;ALLOW *.*
5CD7  CD FA62           	CALL	BSL	;BUILD SOURCE FILE LIST
5CDA  DA B861           	JC	ERROR	;NO GOOD
5CDD  C9                	RET
5CDE                    	SPACE	3,10
                        **	CHKLN - CHECK FOR TARGET AND SOURCE FILES

5CDE  CD 1365           CHKLN	CALL	CTS	;CHECK FOR TARGET FILE SPECIFICATION
5CE1  C2 B861           	JNZ	ERROR	;TARGET FILE SPECIFICATION ILLEGAL
5CE4  21 1674           	LXI	H,LINE
5CE7  CD E568           	CALL	$SOB	;SKIP OVER ALL THE BLANKS ($DRS TURNS SWITCHES
5CEA  A7                	ANA	A		;TO BLANKS)
5CEB  3E 87             	MVI	A,PEC.SFI;SOURCE FILE ILLEGAL
5CED  C9                	RET			'Z';SET IF NO SOURCE FILE FOUND
5CEE                    	SPACE	3,10
                        **	FSUM - FILE SUMMARY FOR SETFLAG,CLRFLAG,PUTUSER,REMUSER

5CEE  CD 746B           FSUM	CALL	$MOVEL
5CF1  0800255D 1B5D     	DW	8,AFFN,FSUMT

5CF7  3A F150           FSUM.	LDA	COPYC	;COUNT
5CFA  06 00             	MVI	B,0
5CFC  4F                	MOV	C,A
5CFD  3A 2F71           	LDA	SUPRES
5D00  A7                	ANA	A
5D01  C0                	RNZ			SUPRESS;TRAILING MESSAGE
5D02  3E 03             	MVI	A,3
5D04  21 115D           	LXI	H,FNUM
5D07  CD 076B           	CALL	$UDDS
5D0A  CD 9368           	CALL	$GNL
5D0D  CD 5E19           	CALL	$TYPTX
5D10  0A                	DB	NL
5D11  58585820 46696C65 FNUM	DB	'XXX Files '
5D19  7320
5D1B  41666665 63746564 FSUMT	DB	'Affected',ENL
5D23  8A
5D24  C9                	RET

5D25  41666665 63746564 AFFN	DB	'Affected'
5D2D                    	SPACE 3,10
                        **	CFU - KLUDGE FILE TO UPDATE STATUS
                        *
                        *	ENTRY AT CFU WILL SET UPDATE STATUS
                        *
                        *	ENTRY	FILE OPEN ON CN.SOU
                        *	EXIT	NONE
                        *	USES	A,F,D,E,H,L

5D2D  2A EA20           CFU	LHLD	S.CFWA
                        	ERRNZ	CN.SOU
5D30  CD 8918           	CALL	$HLIHL	;HL => CHANNEL 0
5D33  11 0400           	LXI	D,IOC.FLG
5D36  19                	DAD	D	;HL => I/O FLAG BYTE
5D37  3E 0C             	MVI	A,FT.OW+FT.OU;UPDATE STATUS
5D39  B6                	ORA	M
5D3A  77                	MOV	M,A	;CHANGE STATUS
5D3B  C9                	RET
5D3C                    	SPACE	3,10
                        **	OFFF - OPEN FILE & FETCH FLAG

                        *	OPEN FILE FOR READ

5D3C  21 7B74           OFFF	LXI	H,NAMTAB
5D3F  11 3168           OFFF.	LXI	D,SDDA	;DEFAULT BLOCK
5D42  AF                	XRA	A	;CN.SOU = 0
5D43  FF 22             	SCALL	.OPENR	;OPEN FOR READ
5D45  DA 8B61           	JC	NAMERR

                        *	FETCH FLAG BYTE

5D48  2A EA20           	LHLD	S.CFWA
                        	ERRNZ	CN.SOU
5D4B  CD 8918           	CALL	$HLIHL
5D4E  11 2100           	LXI	D,IOC.DIR+DIR.FLG;OFFSET TO FLAG BYTE
5D51  19                	DAD	D	;HL => FILE FLAGS
5D52  C9                	RET
5D53                    	SPACE	3,10
                        **	SCCP

                        *	SET FLAGS, CLOSE FILE, COUNT & PRINT NAME

5D53  32 A75D           SCCP	STA	D.NF	;SAVE FOR PRINTING LATER

5D56  CD F75E           	CALL	FCP.

5D59  21 F150           SCCP.	LXI	H,COPYC
5D5C  34                	INR	M	;COUNT FILE
5D5D  21 7B74           	LXI	H,NAMTAB
5D60  AF                	XRA	A	;PRINT FILE NAME REGARDLESS SO ...
5D61  32 F050           	STA	COPYA	;FLAG AS WILD CARD TO FOOL XCOPY1
5D64  CD F850           	CALL	XCOPY1	;PRINT FILE NAME AS IN COPY

5D67  3A 2F71           	LDA	SUPRES
5D6A  A7                	ANA	A
5D6B  C0                	RNZ
                        	ERRNZ	I.CLR-I.SET-1
5D6C  3A 1F71           	LDA	COMAND
5D6F  FE 06             	CPI	I.SET
5D71  D8                	RC			LESS;THAN /SET
5D72  FE 08             	CPI	I.CLR+1
5D74  D0                	RNC			GREATER;THAN /CLR
5D75  CD 5E19           	CALL	$TYPTX
5D78  094F6C64 20466C61 	DB	TAB,'Old Flags:',' '+200Q
5D80  67733AA0
5D84  3E 00             	MVI	A,0
      = 5D85            D.OF	EQU	*-1
5D86  21 925D           	LXI	H,SCCPO
5D89  11 F85B           	LXI	D,PFIB
5D8C  CD 7B5B           	CALL	PFI30
5D8F  CD 5E19           	CALL	$TYPTX
5D92  534C5743 41424455 SCCPO	DB	'SLWCABDU'
5D9A  094E6577 20466C61 	DB	TAB,'New Flags:',' '+200Q
5DA2  67733AA0
5DA6  3E 00             	MVI	A,0
      = 5DA7            D.NF	EQU	*-1	;NEW FLAG DATA
5DA8  21 B45D           	LXI	H,SCCPF
5DAB  11 F85B           	LXI	D,PFIB
5DAE  CD 7B5B           	CALL	PFI30
5DB1  CD 5E19           	CALL	$TYPTX
5DB4  534C5743 41424455 SCCPF	DB	'SLWCABDU',200Q
5DBC  80
5DBD  C9                	RET
5DBE                    	STL	'DELETE - PROCESS DELETE COMMAND.'
5DBE                    	EJECT
                        ***	DELETE - PROCESS DELETE COMMAND.
                        *
                        *	SYNTAX:
                        *
                        *	SOURCE1,...,SOURCEN/DEL[ETE][/FOR]
                        *
                        *	AT LEAST ONE SOURCE FILE MUST BE SPECIFIED.
                        *	IF *.* IS SPECIFIED, DELETE ASKS,
                        *		DELETE ALL ?!? ARE YOU SURE?

      = 5DBE            DELETE	EQU	*

5DBE  CD C65C           	CALL	SETUP

                        *	NO TARGET FILE SPECIFIED

5DC1  3A 2B71           DEL2	LDA	QUERY	;CHECK FOR *.* ONLY IF /Q NOT ASKED FOR
5DC4  EE 01             	XRI	1	;(A)=0 IF /Q, (A)=1 IF NOT /Q
5DC6  CD FA62           	CALL	BSL	;BUILD SOURCE FILE LIST
5DC9  DA B861           	JC	ERROR	;NO GOOD

                        *	DELETE FILES ONE BY ONE

5DCC  2A 5971           DEL3	LHLD	NAMTLEN
5DCF  7C                	MOV	A,H
5DD0  B5                	ORA	L
5DD1  CA E45D           	JZ	DEL4	;END OF LIST
5DD4  CD 595D           	CALL	SCCP.	;COUNT & PRINT NAME
5DD7  E5                	PUSH	H
5DD8  FF 28             	SCALL	.DELETE ;REMOVE IT
5DDA  DA F05D           	JC	DEL5	;ERROR ON DELETE
5DDD  E1                	POP	H
5DDE  CD FC67           DEL3.	CALL	REN	;REMOVE ENTRY FROM NAMTAB
5DE1  C3 CC5D           	JMP	DEL3	;GET NEXT FILE

5DE4  CD 746B           DEL4	CALL	$MOVEL
5DE7  0800FC5D 1B5D     	DW	8,DELN,FSUMT
5DED  C3 F75C           	JMP	FSUM.

5DF0  CD CE5E           DEL5	CALL	FORCHK
5DF3  E1                	POP	H
5DF4  FF 28             	SCALL	.DELETE
5DF6  DA 8B61           	JC	NAMERR
5DF9  C3 DE5D           	JMP	DEL3.

5DFC  44656C65 74656420 DELN	DB	'Deleted',32
5E04                    	STL	'RENAME - PROCESS RENAME COMMAND'
5E04                    	EJECT
                        ***	RENAME - RENAME FILES.
                        *
                        *	SYNTAX:
                        *
                        *	DEST = SOURCE1,...,SOURCEN/R[ENAME]
                        *
                        *	RENAME IS PROCESSED IN A MANNER SIMILAR TO COPY, EXCEPT THAT THE
                        *	FILE IS RENAMED, RATHER THAN COPIED.

      = 5E04            RENAME	EQU	*

5E04  AF                	XRA	A
5E05  32 F150           	STA	COPYC	;CLEAR FILE COUNT

5E08  CD 2E65           	CALL	DDF	;DECODE DESTINATION FILE
5E0B  32 F050           	STA	COPYA	;SAVE WILD CARD FLAG
5E0E  DA B861           	JC	ERROR

5E11  CD 746B           	CALL	$MOVEL	;SET DEFAULT DEVICE
5E14  0300EB73 7871     	DW	3,PIO.DEV,DEFALT

5E1A  AF                	XRA	A	;ALLOW *.*
5E1B  CD FA62           	CALL	BSL	;BUILD SOURCEFILE LIST
5E1E  DA B861           	JC	ERROR

                        *	DO MULTIPLE RENAMES

5E21  01 6771           REN1	LXI	B,DESTFB+FB.NAM;(BC) = WILDCARDED TARGET NAME
5E24  11 7B74           	LXI	D,NAMTAB;(DE) = NORMAL SOURCE NAME
5E27  21 B171           	LXI	H,RENA	;(HL) = BUFFER FOR RESULT NAME
5E2A  C5                	PUSH	B	;SAVE #DESTFB+FB.NAM
5E2B  D5                	PUSH	D	;SAVE #NAMTAB
5E2C  CD D067           	CALL	MWN	;MERGE WILDCARD NAME
5E2F  D1                	POP	D	;(DE) = #NAMTAB
5E30  E1                	POP	H	;(HL) = #DESTFB+FB.NAM

                        *	SEE IF SOURCE AND DEST FILE ON SAME DEVICE

5E31  D5                	PUSH	D	;SAVE #NAMTAB (SOURCE NAME)
5E32  0E 03             	MVI	C,3
5E34  CD 3018           	CALL	$COMP	;COMPARE DEVICES
5E37  3E 81             	MVI	A,PEC.DNC;DEVICES NOT CONSISTANT
5E39  C2 B861           	JNE	ERROR

                        *	SEE IF TARGET ALREADY EXISTS

5E3C  21 B171           	LXI	H,RENA
5E3F  AF                	XRA	A	;CN.SOU = 0
5E40  FF 22             	SCALL	.OPENR
5E42  21 A771           	LXI	H,RENA-FB.NAM
5E45  DA 4D5E           	JC	REN2	;HAVE AN ERROR (AS WE SHOULD)
5E48  3E 16             	MVI	A,EC.FAP;FILE ALREADY PRESENT
5E4A  C3 AD70           	JMP	$FERROR	;ALREADY THERE

5E4D  FE 0C             REN2	CPI	EC.FNF	;MUST BE NOT FOUND
5E4F  C2 AD70           	JNE	$FERROR	;OTHER ERROR
5E52  E1                	POP	H	;(HL) = SOURCE NAME
5E53  CD A75E           	CALL	XRENAM	;PRINT OLD => NEW NAMES
5E56  01 B171           	LXI	B,RENA	;(BC) = NEW (TARGET) NAME
5E59  C5                	PUSH	B
5E5A  E5                	PUSH	H
5E5B  FF 29             	SCALL	.RENAME ;RENAME IT
5E5D  DA 7D5E           	JC	REN3	;ERROR ON RENAME
5E60  E1                	POP	H
5E61  C1                	POP	B
5E62  21 F150           REN2.	LXI	H,COPYC
5E65  34                	INR	M	;COUNT FILE

                        *	REMOVE NAME FROM NAMTAB

5E66  CD FC67           	CALL	REN	;REMOVE ENTRY FROM NAMTAB
5E69  2A 5971           	LHLD	NAMTLEN
5E6C  7C                	MOV	A,H
5E6D  B5                	ORA	L
5E6E  C2 215E           	JNZ	REN1

                        *	REPORT

5E71  CD 746B           	CALL	$MOVEL
5E74  08009F5E 1B5D     	DW	8,RENN,FSUMT
5E7A  C3 F75C           	JMP	FSUM.

5E7D  E1                REN3	POP	H
5E7E  E5                	PUSH	H
5E7F  CD CE5E           	CALL	FORCHK
5E82  E1                	POP	H
5E83  C1                	POP	B
5E84  FF 29             	SCALL	.RENAME
5E86  DA 8B61           	JC	NAMERR
5E89  3A 3571           	LDA	KEEP
5E8C  B7                	ORA	A
5E8D  CA 625E           	JZ	REN2.
5E90  21 B171           	LXI	H,RENA
5E93  CD 3F5D           	CALL	OFFF.
5E96  3A 3D71           	LDA	D.SET
5E99  CD F75E           	CALL	FCP.
5E9C  C3 625E           	JMP	REN2.

5E9F  52656E61 6D656420 RENN	DB	'Renamed',32

                        **	RENAME command extension by Bill Parrott

5EA7  3A 2F71           XRENAM	LDA	SUPRES
5EAA  A7                	ANA	A
5EAB  C0                	RNZ
5EAC  3A F050           	LDA	COPYA
5EAF  A7                	ANA	A
5EB0  C0                	RNZ
5EB1  E5                	PUSH	H
5EB2  CD 2569           	CALL	$CRLF
5EB5  CD 8C65           	CALL	CAD
5EB8  CD F368           	CALL	TFNS
5EBB  CD 5E19           	CALL	$TYPTX
5EBE  203D3D3E A0       	DB	' ==>',' '+200Q
5EC3  21 B171           	LXI	H,RENA
5EC6  CD 8C65           	CALL	CAD
5EC9  CD F368           	CALL	TFNS
5ECC  E1                	POP	H
5ECD  C9                	RET
5ECE                    	STL	'FORCHK - CHECK FORCE SWITCH'
5ECE                    	EJECT
                        ***	FORCHK - CHECK FORCE SWITCH
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,D,E,H,L

5ECE  F5                FORCHK	PUSH	PSW	;SAVE ERROR CODE

5ECF  3A 3771           	LDA	FORCE
5ED2  B7                	ORA	A
5ED3  CA 005F           	JZ	FCE	;NOT FORCED

5ED6  3A 0348           	LDA	SYSOP
5ED9  A7                	ANA	A
5EDA  C2 E45E           	JNZ	FORCKC	;SKIP LOCK CHECK IF SYSOP

5EDD  F1                	POP	PSW
5EDE  FE 18             	CPI	EC.FL	;FILE LOCKED
5EE0  CA 8B61           	JE	NAMERR
5EE3  F5                	PUSH	PSW	;ANTICIPATE NEXT POP

5EE4  F1                FORCKC	POP	PSW	;RESTORE ERROR CODE
5EE5  FE 14             	CPI	EC.WPV	;WRITE PROTECT VIOLATION
5EE7  CA EF5E           	JE	FCP
5EEA  FE 2C             	CPI	EC.LAD	;LOCKED AGAINST DELETE
5EEC  C2 8B61           	JNE	NAMERR

5EEF  CD 3C5D           FCP	CALL	OFFF	;PROCEED, OPEN & FETCH FLAG
5EF2  7E                	MOV	A,M
5EF3  32 3D71           	STA	D.SET	;SAVE FOR /KEEP
5EF6  AF                	XRA	A	;WIPE OUT ALL FLAGS
5EF7  77                FCP.	MOV	M,A	;SET NEW FLAGS
5EF8  CD 2D5D           	CALL	CFU	;KLUDGE FOR UPDATE
5EFB  AF                	XRA	A	;CN.SOU
5EFC  FF 26             	SCALL	.CLOSE
5EFE  D0                	RNC
5EFF  F5                	PUSH	PSW	;ANTICIPATE NEXT POP

5F00  F1                FCE	POP	PSW	;EXIT WITH ERROR
5F01  C3 8B61           	JMP	NAMERR
5F04                    	STL	'CHECK - CHECKSUM OF A FILE'
5F04                    	EJECT
                        ***	CHECK - CHECKSUM OF A FILE
                        *
                        *	SYNTAX:
                        *
                        *	DEST=SOURCE1,...,SOURCEN/CRC
                        *
                        *	'DEST' IS THE DESTINATION FILE DESIGNATOR. IF NULL
                        *	(IN WHICH CASE THE '=' MAY BE OMITTED) IT DEFAULTS TO
                        *
                        *		TT:PIPDEST.JGL
                        *
                        *	WILDCARDS ARE NOT PERMITTED IN 'DEST'.
                        *
                        *	THE 'SOURCE' FIELDS ARE THE SOURCE FILE DESIGNATORS. WILDCARDS
                        *	MAY BE USED FOR FILE NAME AND EXTENSION.
                        *
                        *	'DEST' WILL CONTAIN A LIST OF FILE NAMES AND CRC'S IN THE
                        *	FOLLOWING FORMAT:
                        *
                        *		Name	.Ext	CRC Dec  CRC Oct   CRC Hex	DD-MMM-YY
                        *
                        *		XXXX	.XXX	NNNNN	 OOO.OOO   HHHH

      = 5F04            CHECK	EQU	*

5F04  CD 2E65           	CALL	DDF	;DECODE DEST FILE
5F07  DA B861           	JC	ERROR
5F0A  A7                	ANA	A
5F0B  3E 85             	MVI	A,PEC.IUW;ASSUME ILLEGAL WILDCARD
5F0D  CA B861           	JZ	ERROR
5F10  AF                	XRA	A	;ALLOW *.*
5F11  32 F250           	STA	COPYCT	;RESET COPY COUNTER
5F14  CD FA62           	CALL	BSL	;BUILD SOURCE FILE LIST
5F17  DA B861           	JC	ERROR

                        *	HAVE DEST & SOURCE FILE NAMES, OPEN DEST FILE & WRITE HEADER

5F1A  11 3360           	LXI	D,CHEA	;DEFALT
5F1D  21 5D71           	LXI	H,DESTFB;FILE NAME
5F20  E5                	PUSH	H
5F21  CD ED6E           	CALL	$FOPEW	;OPEN FOR WRITE
5F24  CD 746B           	CALL	$MOVEL	;MOVE IN CURRENT DATE
5F27  0900BF20 5F60     	DW	9,S.DATE,CHEBD
5F2D  E1                	POP	H

5F2E  3A 2F71           	LDA	SUPRES
5F31  FE 02             	CPI	2
5F33  D2 3F5F           	JNC	CHE0	;NO HEADER WANTED

5F36  01 3100           	LXI	B,CHEBL ;(BC) = LEN
5F39  11 3960           	LXI	D,CHEB	;(DE) = DATA FWA
5F3C  CD 466F           	CALL	$FWRIB	;WRITE HEADER

5F3F  CD 2268           CHE0	CALL	SDD	;RESET DEFAULT DEFAULTS
5F42  CD DA52           	CALL	HMSF	;HOW MANY SOURCE FILES

                        *	PROCESS CHECKSUM FUNCTION

5F45  2A 5971           CHE1	LHLD	NAMTLEN
5F48  7C                	MOV	A,H
5F49  B5                	ORA	L
5F4A  CA CF5F           	JZ	CHE6	;NO MORE FILES TO DO

5F4D  3A 1D71           	LDA	H19FLG
5F50  A7                	ANA	A
5F51  CA 6C5F           	JZ	CHE1.	;NOT H19 SO SKIP THE FANCY STUFF

5F54  3A 2F71           	LDA	SUPRES
5F57  FE 03             	CPI	3
5F59  D2 6C5F           	JNC	CHE1.	;NO STATUS LINE

5F5C  CD FC52           	CALL	SHOW25
5F5F  CD 5E19           	CALL	$TYPTX
5F62  43524327 696EE7   	DB	'CRC''in','g'+200Q
5F69  CD 1A53           	CALL	SHOW25.

5F6C  21 7B74           CHE1.	LXI	H,NAMTAB;(HL) = NAME ADDRESS
5F6F  CD E15F           	CALL	CKSUM	;DO CRC CHECKSUM
5F72  E5                	PUSH	H	;SAVE IT

5F73  CD 3953           	CALL	SHOW25X ;Clean up line 25 if H19

5F76  21 7B74           	LXI	H,NAMTAB;POINT TO FILE NAME
5F79  11 7871           	LXI	D,DEFALT
5F7C  CD 8C65           	CALL	CAD
5F7F  21 A85B           	LXI	H,PFIA	;LINE BUFFER
5F82  11 EE73           	LXI	D,PIO.DIR+DIR.NAM
5F85  0E 08             	MVI	C,8
5F87  CD 6D5B           	CALL	PFI20
5F8A  CA 905F           	JZ	CHE5
5F8D  36 09             	MVI	M,TAB
5F8F  23                	INX	H
5F90  36 2E             CHE5	MVI	M,'.'
5F92  23                	INX	H
5F93  0E 03             	MVI	C,3
5F95  CD 6D5B           	CALL	PFI20
5F98  36 09             	MVI	M,TAB
5F9A  23                	INX	H
5F9B  C1                	POP	B	;(BC) = CRC
5F9C  C5                	PUSH	B
5F9D  3E 05             	MVI	A,5
5F9F  CD 6F19           	CALL	$UDD
5FA2  CD 8E5B           	CALL	PFI40
5FA5  CD 8E5B           	CALL	PFI40
5FA8  C1                	POP	B
5FA9  C5                	PUSH	B
5FAA  CD 406B           	CALL	$UOW.
5FAD  CD 8E5B           	CALL	PFI40
5FB0  36 20             	MVI	M,' '
5FB2  23                	INX	H
5FB3  C1                	POP	B
5FB4  CD 5B6B           	CALL	$UHW
5FB7  36 0A             	MVI	M,NL
5FB9  23                	INX	H
5FBA  11 58A4           	LXI	D,-PFIA
5FBD  19                	DAD	D
5FBE  44                	MOV	B,H
5FBF  4D                	MOV	C,L	;(BC) = LEN
5FC0  11 A85B           	LXI	D,PFIA	;(DE) = LINE FWA
5FC3  21 5D71           	LXI	H,DESTFB
5FC6  CD 466F           	CALL	$FWRIB	;WRITE LINE TO DEST
5FC9  CD FC67           	CALL	REN	;REMOVE ENTRY FROM NAMTAB
5FCC  C3 455F           	JMP	CHE1	;GET NEXT FILE

                        *	FILE CHECKSUMS COMPLETE, CLOSE DEST

5FCF  21 5D71           CHE6	LXI	H,DESTFB
5FD2  CD FB6F           	CALL	$FCLO

5FD5  CD 746B           	CALL	$MOVEL
5FD8  08002B60 1B5D     	DW	8,CHEN,FSUMT
5FDE  C3 F75C           	JMP	FSUM.

                        *	CKSUM - DO CRC CHECKSUM
                        *
                        *	ENTRY	HL => FILE NAME
                        *	EXIT	HL = CRCSUM
                        *	USES	ALL

5FE1  AF                CKSUM	XRA	A	;(A) = CN.SOU
5FE2  FF 22             	SCALL	.OPENR
5FE4  DA 8B61           	JC	NAMERR
5FE7  21 0000           	LXI	H,0
5FEA  22 1720           	SHLD	.CRCSUM ;ZERO CHECKSUM

5FED  CD 9366           	CALL	EBM	;EXPAND BUFFER TO MAX
5FF0  2A 5771           CHE2	LHLD	BUFSIZ
5FF3  44                	MOV	B,H
5FF4  4D                	MOV	C,L	;(BC) = LENGTH OF BUFFER
5FF5  2A 5571           	LHLD	BUFPTR
5FF8  EB                	XCHG			(DE);= BUFFER FWA
5FF9  AF                	XRA	A	;(A) = CN.SOU
5FFA  FF 04             	SCALL	.READ
5FFC  F5                	PUSH	PSW
5FFD  D2 0960           	JNC	CHE3	;FULL BUFFER
6000  FE 01             	CPI	EC.EOF
6002  CA 0960           	JE	CHE3	;IF EOF
6005  F1                	POP	PSW	;RESTORE ERROR CODE
6006  C3 8B61           	JMP	NAMERR

6009  3A 5871           CHE3	LDA	BUFSIZ+1;A = # OF SECTORS IN BUFFER
600C  90                	SUB	B
600D  47                	MOV	B,A	;B = SECTORS READ
600E  0E 00             	MVI	C,0
6010  2A 1720           	LHLD	.CRCSUM
6013  EB                	XCHG			DE;= PREVIOUS CRCSUM (IF ANY)
6014  2A 5571           	LHLD	BUFPTR
6017  FF 0B             	SCALL	.CRC16
6019  EB                	XCHG			HL;= UPDATED CRCSUM
601A  22 1720           	SHLD	.CRCSUM
601D  F1                	POP	PSW	;STATUS FROM READ
601E  D2 F05F           	JNC	CHE2	;NOT EOF, GET NEXT BUNCH
6021  CD 1168           	CALL	SBE	;SHRINK BUFFER TO MIN

6024  AF                	XRA	A	;(A) = CN.SOU
6025  FF 26             	SCALL	.CLOSE
6027  2A 1720           	LHLD	.CRCSUM ;GET CRC
602A  C9                	RET

602B  43524327 65642020 CHEN	DB	'CRC''ed',32,32

6033  53593043 5243     CHEA	DB	'SY0CRC'

6039  0A4E616D 65092E45 CHEB	DB	NL,'Name',TAB,'.Ext',TAB,'CRC Dec',32,32,'CRC Oct'
6041  78740943 52432044
6049  65632020 43524320
6051  4F6374
6054  20202043 52432048 	DB	32,32,32,'CRC Hex',TAB
605C  657809
605F  5747502E 2E2E524C CHEBD	DB	'WGP...RLM';DATE
6067  4D
6068  0A0A              	DB	NL,NL
      = 0031            CHEBL	EQU	*-CHEB
606A                    	STL	'MOUNT - DISMOUNT - RESET'
606A                    	EJECT
                        ***	MOUNT	-  MOUNT A NEW DISK
                        *
                        *	MOUNT MOUNTS A NEW DISK ON THE SPECIFIED UNIT OF THE SELECTED
                        *	DEVICE.
                        *
                        *	DEV:/MOU[NT]

      = 606A            MOUNT	EQU	*
606A  3E 80             	MVI	A,.MOUNT
606C  C3 7660           	JMP	MDR.	;MOUNT/DISMOUNT/RESET
606F                    	SPACE	3,10
                        ***	DISMOU	-  DISMOUNT CURRENT DISK
                        *
                        *	DISMOU DISMOUNTS THE CURRENT DISK ON THE SPECIFIED UNIT OF THE
                        *	SELECTED DEVICE.
                        *
                        *	DEV:/DIS[MOUNT]

      = 606F            DISMOU	EQU	*
606F  3E 81             	MVI	A,.DMOUN
6071  C3 7660           	JMP	MDR.	;MOUNT/DISMOUNT/RESET
6074                    	SPACE	3,10
                        ***	RESET	-  RESET THE CURRENT DISK
                        *
                        *	RESET RESETS THE SPECIFIED UNIT OF THE SELECTED DEVICE BY ISSUING
                        *	THE HDOS RESET CALL, WHICH IN TURN ISSUES A DISMOUNT AND MOUNT
                        *	ASKING THE USER TO OPEN THE DRIVE IN BETWEEN THE TWO.
                        *
                        *	DEV:/RES[ET]

      = 6074            RESET	EQU	*
6074  3E 84             	MVI	A,.RESET
                        *	JMP	MDR.		MOUNT/DISMOUNT/RESET
                        	ERRNZ	*-MDR.
6076                    	SPACE	4,10
                        **	MDR.	-  MOUNT/DISMOUNT/RESET
                        *
                        *	MDR. PERFORMS THE SIMILAR FUNCTIONS OF MOUNT, DISMOUNT, AND RESET.
                        *
                        *
                        *	ENTRY	(A)	=  SYSCALL CODE FOR OPERATION TO BE PERFORMED
                        *
                        *	EXIT	IF  NO ERROR
                        *		    TO CALLER
                        *		  ELSE
                        *		    TO ERROR
                        *
                        *	USES	ALL

6076  32 8D60           MDR.	STA	MDRA	;STORE SYSCALL VALUE
6079  CD 1365           	CALL	CTS	;CHECK FOR TARGET FILE SPECIFICATION
607C  C2 B861           	JNZ	ERROR	;THERE WAS A TARGET FILE
607F  21 1674           	LXI	H,LINE
6082  CD 7D6E           	CALL	$DTB	;DELETE TRAILING BLANKS
6085  FE 01             	CPI	1	;(A) = LINE LENGTH INCLUDING <00> BYTE
6087  3E 80             	MVI	A,PEC.DF;DEVICE FORMAT ERROR
6089  CA B861           	JZ	ERROR	;NULL DEVICE IS ILLEGAL, ONLY BYTE IS NULL
608C  FF 00             	SCALL	0
      = 608D            MDRA	EQU	*-1	;SYSCALL VALUE
608E  DA B861           	JC	ERROR
6091  C9                	RET
6092                    	STL	'VERSN - PIP VERSION INFORMATION'
6092                    	EJECT
                        ***	VERSN - PIP VERSION INFORMATION
                        *
                        *	/VERS[ION]
                        *	/ID
                        *
                        *	PRINT PIP VERSION INFORMATION TO THE SCREEN.

      = 6092            VERSN	EQU	*

6092  CD DE5C           	CALL	CHKLN	;CHECK FOR TARGET & SOURCE FILE SPECS
6095  C2 B861           	JNZ	ERROR	;ONLY ALLOW SWITCH ON LINE

6098  CD 5E19           	CALL	$TYPTX
609B  0A504950 2F706C75 	DB	NL,'PIP/plus',32,32,32,32,'Version: '
60A3  73202020 20566572
60AB  73696F6E 3A20
60B1  332E30            	DB	VERS/16+'0','.',VERS&0FH+'0'
60B4  20526576 2E204120 	DB	' Rev. ','A'+CUSTOM,' ','['+200Q
60BC  DB

60BD  3A 0348           	LDA	SYSOP
60C0  A7                	ANA	A
60C1  CA CD60           	JZ	VERSN0

60C4  CD 5E19           	CALL	$TYPTX
60C7  20537973 6FF0     	DB	' Syso','p'+200Q

60CD  3A 1D71           VERSN0	LDA	H19FLG
60D0  A7                	ANA	A
60D1  CA DB60           	JZ	VERSN1

60D4  CD 5E19           	CALL	$TYPTX
60D7  204831B9          	DB	' H1','9'+200Q

60DB  CD 5E19           VERSN1	CALL	$TYPTX
                        	IF	USER
                        	ENDIF
60DE  205D2041 73206F66 	DB	' ] As of '
60E6  20
60E7  31 312D 4D61722D31	DATE
60EF  35
60F0  8A                	DB	ENL
60F1  C9                	RET

                        *	/ID Entry Point

60F2  CD 9260           VERSNX	CALL	VERSN			; Show version info
60F5  01 0048           	LXI	B,PIP
60F8  21 2C61           	LXI	H,VERSV0
60FB  CD 406B           	CALL	$UOW.
60FE  01 6671           	LXI	B,MEML-1
6101  21 3A61           	LXI	H,VERSV1
6104  CD 406B           	CALL	$UOW.
6107  2A 5571           	LHLD	BUFPTR
610A  44                	MOV	B,H
610B  4D                	MOV	C,L
610C  21 4B61           	LXI	H,VERSV2
610F  CD 406B           	CALL	$UOW.
6112  CD 9366           	CALL	EBM
6115  2A 5771           	LHLD	BUFSIZ
6118  06 00             	MVI	B,0
611A  4C                	MOV	C,H
611B  3E 03             	MVI	A,3
611D  21 5C61           	LXI	H,VERSV3
6120  CD 026B           	CALL	$UDDN

6123  CD 5E19           	CALL	$TYPTX
6126  46574120 3D20     	DB	'FWA = '
612C  3030302E 30303009 VERSV0	DB	'000.000',TAB,'LWA = '
6134  4C574120 3D20
613A  3030302E 30303009 VERSV1	DB	'000.000',TAB,'Buffer = '
6142  42756666 6572203D
614A  20
614B  3030302E 30303020 VERSV2	DB	'000.000','   Size = '
6153  20205369 7A65203D
615B  20
615C  6E6E6E20 73656374 VERSV3	DB	'nnn sectors',ENL
6164  6F72738A
6168  C3 1168           	JMP	SBE			; shrink buffer and return
616B                    	STL	'??? - PRINT PIP HELP FILE'
616B                    	EJECT
                        ***	??? - PRINT PIP HELP FILE
                        *
                        *	/?[??]
                        *
                        *	PRINT PIP HELP FILE TO THE SCREEN.

      = 616B            HELP	EQU	*

616B  CD DE5C           	CALL	CHKLN	;CHECK FOR TARGET & SOURCE FILE SPECS
616E  C2 B861           	JNZ	ERROR	;ONLY ALLOW SWITCH ON LINE

6171  CD 746B           	CALL	$MOVEL	;PASS 'HELP' TO BUFFER
6174  0E007D61 1674     	DW	HELPCL,HELPC,LINE

617A  C3 7848           	JMP	PIP2	;MAKE THIS OUR COMMAND

617D  48454C50 2F53552F HELPC	DB	'HELP/SU/SU/SU',0
6185  53552F53 5500
      = 000E            HELPCL	EQU	*-HELPC
618B                    	STL	'ERROR PROCESSING'
618B                    	EJECT
                        **	ERROR PROCESSING ROUTINES
618B                    	SPACE	3,10
                        ***	NAMERR - FILE TYPE ERROR, OCCURRED ON FILE WHOSE NAME
                        *	IS NEXT UP IN NAMTAB.
                        *
                        *	PROCESS VIA $FERROR

618B  21 7174           NAMERR	LXI	H,NAMTAB-FB.NAM
618E  C3 AD70           	JMP	$FERROR
6191                    	SPACE	4,10
                        **	INTERNAL ERRORS. SHOULD NOT OCCUR.

6191  3E 31             IERR1	MVI	A,'1'
6193  01                	DB	1	;FAKE LXI B,
6194  3E 32             IERR2	MVI	A,'2'
6196  01                	DB	1	;FAKE LXI B,
6197  3E 33             IERR3	MVI	A,'3'

6199  32 AB61           INTERR	STA	IEN	;SAVE CODE
619C  CD 5E19           	CALL	$TYPTX
619F  070A5049 50204352 	DB	BELL,NL,'PIP CRASH '
61A7  41534820
61AB  6E8A              IEN	DB	'n',ENL

61AD  3A 0348           	LDA	SYSOP
61B0  A7                	ANA	A
61B1  CC 0B21           	CZ	S.FASER ;BYE, BYE!

61B4  3E 01             ABORT	MVI	A,1
61B6  FF 00             	SCALL	.EXIT	;ABORT
61B8                    	SPACE	4,10
                        **	ERROR - GENERAL AND SYNTAX ERRORS NOT DIRECTLY ASSOCIATED
                        *	WITH A VALID FILE NAME.

61B8  F5                ERROR	PUSH	PSW	;SAVE CODE
61B9  CD 5E19           	CALL	$TYPTX
61BC  0A455252 4F52202D 	DB	NL,'ERROR -',' '+200Q
61C4  A0
61C5  F1                	POP	PSW
61C6  A7                	ANA	A
61C7  FA D161           	JM	ERROR1	;IS PRODUCT ERROR
61CA  26 07             	MVI	H,BELL	;USE BELL AS MESSAGE TRAIL CHAR
61CC  FF 2F             	SCALL	.ERROR	;LOOK UP SYSTEM ERROR
61CE  C3 3548           	JMP	RESTART

                        *	IS PRODUCT ERROR

61D1  21 E261           ERROR1	LXI	H,ERRORA
61D4  BE                ERROR2	CMP	M
61D5  23                	INX	H
61D6  C2 D461           	JNE	ERROR2	;FIND ERROR MESSAGE
61D9  FF 03             	SCALL	.PRINT	;PRINT MESSAGE
61DB  CD 5E19           	CALL	$TYPTX
61DE  87                	DB	BELL+200Q
61DF  C3 3548           	JMP	RESTART

61E2   (0000)           ERRORA	DS	0	;ERROR MESSAGES
61E2  80446576 69636520 	DB	PEC.DF,'Device Format Erro','r'+200Q
61EA  466F726D 61742045
61F2  72726FF2
61F6  81416C6C 2046696C 	DB	PEC.DNC,'All Files Must Reside on Same Devic','e'+200Q
61FE  6573204D 75737420
6206  52657369 6465206F
620E  6E205361 6D652044
6216  65766963 E5
621B  83496C6C 6567616C 	DB	PEC.TFI,'Illegal Destination File Spec','.'+200Q
6223  20446573 74696E61
622B  74696F6E 2046696C
6233  65205370 6563AE
623A  84436F6E 74726164 	DB	PEC.CS,'Contradictory Switche','s'+200Q
6242  6963746F 72792053
624A  77697463 6865F3
6251  85496C6C 6567616C 	DB	PEC.IUW,'Illegal Use of Wildcar','d'+200Q
6259  20557365 206F6620
6261  57696C64 636172E4
6269  86496C6C 6567616C 	DB	PEC.IDF,'Illegal Destination File Forma','t'+200Q
6271  20446573 74696E61
6279  74696F6E 2046696C
6281  6520466F 726D61F4
6289  87496C6C 6567616C 	DB	PEC.SFI,'Illegal Source File Spec','.'+200Q
6291  20536F75 72636520
6299  46696C65 20537065
62A1  63AE
62A3  88496C6C 6567616C 	DB	PEC.ISS,'Illegal Subswitc','h'+200Q
62AB  20537562 73776974
62B3  63E8
62B5  894D6973 73696E67 	DB	PEC.MSS,'Missing Subswitc','h'+200Q
62BD  20537562 73776974
62C5  63E8
62C7                    	XTEXT	PIPSUBS
62C7                    	STL	'SUBROUTINES'
62C7                    	EJECT
                        **	AEN - ADD ENTRY TO 'NAMTAB'
                        *
                        *	AEN EXPANDS THE FILE INFO IN PIO.XXX INTO A FILE DESCRIPTOR
                        *	AND ENTERS IT IN THE NAMTAB TABLE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' SET IF WILDCARD
                        *	USES	ALL

62C7  21 7E71           AEN	LXI	H,AENA
62CA  CD B866           	CALL	CDA	;CONVERT DIRECTORY FORMAT TO ASCII FORMAT
62CD  D6 01             	SUI	1	;'C' SET IF WILDCARD
62CF  F5                	PUSH	PSW	;SAVE FLAG
62D0  DA D962           	JC	AEN1	;Ignore Query for wild card names
62D3  CD 7163           	CALL	CQF	;Check Query Flag
62D6  C2 F862           	JNZ	AEN2	;Don't copy this file
62D9  2A 5971           AEN1	LHLD	NAMTLEN
62DC  01 1100           	LXI	B,FB.NAML
62DF  09                	DAD	B	;INCREASE SIZE
62E0  22 5971           	SHLD	NAMTLEN
62E3  EB                	XCHG			(DE);= NEW LENGTH
62E4  2A 5B71           	LHLD	NAMTMAX
62E7  7D                	MOV	A,L	;SEE IF WILL OVERFLOW
62E8  93                	SUB	E
62E9  7C                	MOV	A,H
62EA  9A                	SBB	D
62EB  DC A667           	CC	INA	;INCREASE NAMTAB ALLOCATION
62EE  21 6A74           	LXI	H,NAMTAB-FB.NAML
62F1  19                	DAD	D	;(HL) = *TO* ADDRESS
62F2  11 7E71           	LXI	D,AENA	;(DE) = *FROM* ADDRESS
62F5  CD AA18           	CALL	$MOVE	;MOVE ENTRY IN
62F8  F1                AEN2	POP	PSW	;(PSW) = WILDCARD FLAG
62F9  C9                	RET
62FA                    	SPACE	4,10
                        **	BSL - BUILD SOURCE FILE LIST.
                        *
                        *	BSL CRACKS THE LIST OF THE SOURCE FILES FROM THE COMMAND LINE AND
                        *	BUILDS THEM INTO THE NAMTAB MANAGED TABLE.
                        *	WILD CARDS ENCOUNTERED ARE EXPANDED.
                        *
                        *	ENTRY	(A) <> 0 IF TO ASK ABOUT '*.*' USE
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *		 (A) = CODE
                        *	USES	ALL

62FA  32 6A63           BSL	STA	BSLA	;SAVE ASK FLAG
62FD  CD C067           	CALL	LSN	;LOCATE SOURCE NAME

                        *	GO THROUGH SOURCE LIST CRACKING NAMES

6300  7E                BSL1	MOV	A,M
6301  A7                	ANA	A
6302  CA 2563           	JZ	BSL3	;ALL DONE
6305  11 7871           	LXI	D,DEFALT
6308  CD 8C65           	CALL	CAD	;CONVERT ASCII NAME TO DIRECTORY FORMAT
630B  D8                	RC			ERROR
630C  CD 4368           	CALL	SND	;SET NEW DEFAULTS
630F  E5                	PUSH	H	;SAVE LINE ADDRESS
6310  3A 6A63           	LDA	BSLA
6313  A7                	ANA	A
6314  C4 E663           	CNZ	CCW	;CHECK FOR COMPLETE WILDCARD (*.*)
6317  DA 3548           	JC	RESTART ;USER CHICKENED OUT
631A  CD F166           	CALL	EWS	;EXPAND WILDCARD SPECIFICATION
631D  E1                BSL2	POP	H	;RESTORE LINE ADDRESS
631E  D8                	RC			USER;REFUSED *.*
631F  CD 3768           	CALL	SFS	;SKIP FILE SEPERATOR (BLANKS AND/OR COMMA)
6322  C3 0063           	JMP	BSL1	;DO MORE

6325  3A 2D71           BSL3	LDA	SORT
6328  A7                	ANA	A
6329  C8                	RZ
632A  2A 5971           	LHLD	NAMTLEN
632D  44                	MOV	B,H
632E  4D                	MOV	C,L
632F  11 1100           	LXI	D,FB.NAML
6332  CD 4618           	CALL	$DU66	;(HL) = # OF FILE NAMES
6335  7C                	MOV	A,H
6336  A7                	ANA	A
6337  C2 9461           	JNZ	IERR2
633A  22 6363           	SHLD	BSLN

                        *	MAKE SURE SORTAB IS 2 BYTES + A NULL & HAS ONLY 0,1,2 OR 3 IN IT

633D  21 D56C           	LXI	H,SORTAB;1 = NAME FIELD
6340  7E                	MOV	A,M	;2 = DEVICE FIELD (FAKED SO IT WORKS)
6341  FE 04             	CPI	4	;3 = DEVICE FIELD
6343  D2 F14D           	JNC	SW.ERR
6346  23                	INX	H
6347  7E                	MOV	A,M
6348  FE 04             	CPI	4
634A  D2 F14D           	JNC	SW.ERR
634D  23                	INX	H
634E  36 00             	MVI	M,0	;FORCE FINAL NULL

6350  3A 2E71           	LDA	REVERSE ;(A)=0 IF ASCEND. (A)=3 IF DESCEND.
6353  21 DB6C           	LXI	H,$SORT
6356  CD 3A18           	CALL	$DADA
6359  22 5D63           	SHLD	CALSRT

635C  CD DB6C           	CALL	$SORT
      = 635D            CALSRT	EQU	*-2
635F  7B74              	DW	NAMTAB
6361  1100              	DW	FB.NAML
6363  0000              BSLN	DW	*-*
6365  6B63              	DW	BSLFLD
6367  D56C              	DW	SORTAB

6369  C9                	RET

636A  00                BSLA	DB	0	;<>0 IF TO CHECK FOR *.*

636B  040C              BSLFLD	DB	4,12;'N'	NAME & EXT	FIELD #1
636D  0004              	DB	0,4;'E'	TREAT AS DEV:	FIELD #2
636F  0004              	DB	0,4;'D'	DEV:		FIELD #3

6371                    	SPACE	4,10
                        **	CQF - Check Query Flag
                        *
                        *	CQF checks the query flag, and if it is set, asks
                        *	the user if the file is to be transfered by typing
                        *	the filename followed by a question mark.  If the
                        *	response begins with a 'Y' the file is transfered,
                        *	else, it is to be ignored.
                        *
                        *	ENTRY:	PIO.XXX = File Specification
                        *
                        *	EXIT:	PSW	= 'Z'  if     to Copy
                        *			  'NZ' if NOT to Copy
                        *
                        *	USES:	ALL

6371  3A 2B71           CQF	LDA	QUERY
6374  A7                	ANA	A
6375  C8                	RZ			NO;Query, so transfer file
6376  FE 4E             	CPI	'N'
6378  CA C063           	JE	CQFN

637B  CD 8463           	CALL	CQF.
637E  F5                	PUSH	PSW
637F  CD 2569           	CALL	$CRLF
6382  F1                	POP	PSW
6383  C9                	RET

6384  CD F368           CQF.	CALL	TFNS	;Type the file name padded with spaces
6387  CD 5E19           	CALL	$TYPTX
638A  203FA0            	DB	' ?',' '+200Q
638D  FF 07             	SCALL	.CLRCO	;Clear the console

638F  AF                	XRA	A	;A = I.CSLMD
6390  06 01             	MVI	B,CSL.CHR
6392  0E 81             	MVI	C,CSL.ECH+CSL.CHR
6394  FF 06             	SCALL	.CONSL	;Set CHAR/ECHO

6396  FF 01             CQFX	SCALL	.SCIN
6398  DA 9663           	JC	CQFX
639B  CD AF68           	CALL	$MCU
639E  FE 59             	CPI	'Y'
63A0  C8                	RE			Transfer;this file
63A1  FE 4E             	CPI	'N'
63A3  CA C063           	JE	CQFN
63A6  FE 2A             	CPI	'*'	;Special marker ?
63A8  C2 C863           	JNE	CQF1	;Oops
63AB  FF 01             CQFX.	SCALL	.SCIN	;Yes, get Y or N
63AD  DA AB63           	JC	CQFX.
63B0  CD AF68           	CALL	$MCU
63B3  FE 59             	CPI	'Y'
63B5  CA C363           	JE	CQFY
63B8  FE 4E             	CPI	'N'
63BA  C2 C863           	JNE	CQF1
63BD  32 2B71           	STA	QUERY	;Don't transfer any of the rest either
63C0  F6 01             CQFN	ORI	1	;'NZ' => DON'T transfer this file
63C2  C9                	RET

63C3  AF                CQFY	XRA	A	;Set 'Z'
63C4  32 2B71           	STA	QUERY	;Transfer all of the rest also
63C7  C9                	RET

63C8  CD 5E19           CQF1	CALL	$TYPTX	;Illegal Character Entered
63CB  073F2028 59296573 	DB	BELL,'? (Y)es (N)o (*Y) (*N)',ENL
63D3  20284E29 6F20282A
63DB  59292028 2A4E298A
63E3  C3 8463           	JMP	CQF.
63E6                    	SPACE	4,10
                        **	CCW - CHECK FOR COMPLETE WILDCARD.
                        *
                        *	CCW IS CALLED WITH A NAME CRACKED INTO PIO.XXX, TO SEE IF
                        *	IT IS A *.* SPECIFICATION.
                        *
                        *	IF SO, CCW ASKS,
                        *
                        *	!?! DELETE ALL FILES ON DEV: (Y/N/Q)?
                        *
                        *	THE USER REPLY IS ACCEPTED AND DECODED.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' CLEAR IF NOT *.*, OR 'Y' OR 'Q' REPLIED
                        *		'C' SET IF *.* AND NOT 'Y'
                        *	USES	A,F,B,H,L

63E6  21 EE73           CCW	LXI	H,PIO.DIR+DIR.NAM
63E9  06 0B             	MVI	B,8+3
63EB  3E 80             	MVI	A,200Q
63ED  A6                CCW1	ANA	M	;SEE IF ALL HAVE 200Q BIT SET
63EE  23                	INX	H
63EF  05                	DCR	B
63F0  C2 ED63           	JNZ	CCW1
63F3  A7                	ANA	A
63F4  F0                	RP			NOT;*.*

                        *	IS *.*

63F5  CD 5E19           	CALL	$TYPTX
63F8  07213F21 2044454C 	DB	BELL,'!?! DELETE ALL FILES ON',' '+200Q
6400  45544520 414C4C20
6408  46494C45 53204F4E
6410  A0
6411  21 EB73           	LXI	H,PIO.DEV
6414  3E 03             	MVI	A,3
6416  CD 1969           	CALL	$TYPCC	;TYPE DEVICE NAME
6419  CD 5E19           	CALL	$TYPTX
641C  3A202859 2F4E2F51 	DB	': (Y/N/Q)?',' '+200Q
6424  293FA0
6427  21 EB71           	LXI	H,DESTBUF
642A  CD B868           	CALL	$RTL.	;READ REPLY
642D  3A EB71           	LDA	DESTBUF
6430  FE 59             	CPI	'Y'
6432  C8                	RE			IS;OK
6433  FE 51             	CPI	'Q'
6435  C2 3E64           	JNZ	CCW2
6438  3E 01             	MVI	A,1
643A  32 2B71           	STA	QUERY	;SET QUERY MODE
643D  C9                	RET
643E  37                CCW2	STC
643F  3E 85             	MVI	A,PEC.IUW;FLAG ILLEGAL USE OF WILDCARD
6441  C9                	RET			FORGET;IT
6442                    	SPACE	4,10
                        **	CFE - CHECK FILE ELIGIBILITY.
                        *
                        *	CFE CHECKS TO SEE IF A WILDCARD-SELECTED FILE IS ELIGIBLE FOR
                        *	PROCESSING. IF THE FILE IS FLAGGED SYSTEM, AND /S IS NOT SPECIFIED,
                        *	THE FILE IS NOT ELIGIBLE. IF /FL OR /NOF OR /US OR /NOU OR /CUR
                        *	OR /BEF OR /AFT FAILS, THE FILE IS NOT ELIGIBLE.
                        *
                        *	ENTRY	(HL) = DIRECTORY ENTRY POINTER
                        *	EXIT	'Z' SET IF ELIGIBLE
                        *	USES	A,F

6442  D5                CFE	PUSH	D
6443  E5                	PUSH	H
6444  3E 0D             	MVI	A,DIR.NOA
6446  CD 4118           	CALL	$DADA.
6449  7E                	MOV	A,M	;(A) = A/C
644A  32 FC64           	STA	CFEA	;SAVE ACCESS COUNT

                        	ERRNZ	DIR.FLG-DIR.NOA-1
644D  23                	INX	H
644E  7E                	MOV	A,M	;(A) = FLAG
644F  32 FD64           	STA	CFEF	;SAVE FILE FLAGS

                        	ERRNZ	DIR.USR-DIR.FLG-1
6452  23                	INX	H

                        	IF	USER
                        	ENDIF

                        	ERRNZ	DIR.CRD-DIR.USR-4
6453  23                	INX	H
6454  23                	INX	H
6455  23                	INX	H
6456  23                	INX	H
6457  5E                	MOV	E,M
6458  23                	INX	H
6459  56                	MOV	D,M

645A  3A 2871           	LDA	ACCESS
645D  B7                	ORA	A
645E  CA 6564           	JZ	CFE00
6461  23                	INX	H
6462  5E                	MOV	E,M
6463  23                	INX	H
6464  56                	MOV	D,M
6465  EB                CFE00	XCHG
6466  22 FE64           	SHLD	TDATE

6469  3A 2171           CFE0	LDA	FLAG	;CHECK /FL:
646C  B7                	ORA	A
646D  CA 7B64           	JZ	CFE1
6470  21 2171           	LXI	H,FLAG
6473  3A FD64           	LDA	CFEF
6476  A6                	ANA	M
6477  BE                	CMP	M
6478  C2 0065           	JNZ	CFE.N

647B  3A 2271           CFE1	LDA	NOFLAG	;CHECK /NOF:
647E  B7                	ORA	A
647F  CA 8C64           	JZ	CFE2
6482  21 2271           	LXI	H,NOFLAG
6485  3A FD64           	LDA	CFEF
6488  A6                	ANA	M
6489  C2 0065           	JNZ	CFE.N

      = 648C            CFE2	EQU	*

                        	IF	USER
                        	ENDIF

648C  3A 2371           CFE4	LDA	BEFORE	;CHECK /BEF:
648F  B7                	ORA	A
6490  CA A364           	JZ	CFE5
6493  2A FE64           	LHLD	TDATE
6496  EB                	XCHG			(DE);= FILE'S DATE
6497  2A 4071           	LHLD	DATEB	;(HL) = WORKING DATE
649A  CD 2B69           	CALL	CPDEHL
649D  CA 0065           	JZ	CFE.N
64A0  DA 0065           	JC	CFE.N

64A3  3A 2471           CFE5	LDA	CURREN	;CHECK /CUR:
64A6  B7                	ORA	A
64A7  CA B764           	JZ	CFE6
64AA  2A FE64           	LHLD	TDATE
64AD  EB                	XCHG			(DE);= FILE'S DATE
64AE  2A 4271           	LHLD	DATEC	;(HL) = WORKING DATE
64B1  CD 8E18           	CALL	$CDEHL
64B4  C2 0065           	JNZ	CFE.N

64B7  3A 2571           CFE6	LDA	AFTER	;CHECK /AFT:
64BA  B7                	ORA	A
64BB  CA CE64           	JZ	CFE7
64BE  2A FE64           	LHLD	TDATE
64C1  EB                	XCHG			(DE);= FILE'S DATE
64C2  2A 4471           	LHLD	DATEA	;(HL) = WORKING DATE
64C5  CD 2B69           	CALL	CPDEHL
64C8  CA 0065           	JZ	CFE.N
64CB  D2 0065           	JNC	CFE.N

64CE  3A 2971           CFE7	LDA	COUNT	;CHECK /COU:
64D1  B7                	ORA	A
64D2  CA DD64           	JZ	CFE8
64D5  5F                	MOV	E,A
64D6  3A FC64           	LDA	CFEA
64D9  BB                	CMP	E	;OK, if accesses >= COUNT #
64DA  DA 0065           	JC	CFE.N

64DD  3A 2A71           CFE8	LDA	NOCOUNT ;CHECK /NOC:
64E0  B7                	ORA	A
64E1  CA EF64           	JZ	CFE9
64E4  5F                	MOV	E,A
64E5  3A FC64           	LDA	CFEA
64E8  BB                	CMP	E	;OK, if accesses < COUNT #
64E9  D2 0065           	JNC	CFE.N
64EC  CA 0065           	JZ	CFE.N

64EF  E1                CFE9	POP	H	;CHECK /S
64F0  D1                	POP	D
64F1  3A FD64           	LDA	CFEF
64F4  E6 80             	ANI	DIF.SYS
64F6  C8                	RZ			ELIGIBLE
64F7  3A 2071           	LDA	SYSTEM	;CHECK /S FLAG
64FA  3D                	DCR	A
64FB  C9                	RET

64FC  00                CFEA	DB	0	;ACCESS COUNT BYTE
64FD  00                CFEF	DB	0	;FLAG BYTE
                        	IF	USER
                        	ENDIF
64FE  0000              TDATE	DW	0

6500  E1                CFE.N	POP	H	;IS NOT ELIGIBLE
6501  D1                	POP	D
6502  F6 01             	ORI	1	;FORCE 'NZ'
6504  C9                	RET
6505                    	SPACE	4,10
                        **	CFS - COMPUTE FILE SIZE
                        *
                        *	CFS COMPUTES THE SIZE OF A FILE. THE DEVICE'S GRT MUST BE IN
                        *	THE 'GRT' BUFFER.
                        *
                        *	ENTRY	(A) = FIRST GROUP NUMBER
                        *	EXIT	(DE) = SIZE
                        *	USES	ALL

6505  2A 6D57           CFS	LHLD	LSTE
6508  11 0000           CFS.	LXI	D,0
650B  A7                CFS1	ANA	A
650C  C8                	RZ			ALL;DONE
650D  6F                	MOV	L,A
650E  7E                	MOV	A,M	;(A) = NEXT GRT
650F  13                	INX	D
6510  C3 0B65           	JMP	CFS1	;TRY AGAIN
6513                    	SPACE	4,10
                        **	CTS	-  CHECK TARGET FILE SPECIFICATION
                        *
                        *	CTS CHECKS FOR A TARGET FILE SPECIFICATION
                        *
                        *
                        *	ENTRY	NONE
                        *
                        *	EXIT	(PSW)	= 'Z' SET IF NO TARGET FILE
                        *			= 'Z' CLEAR IF    TARGET FILE
                        *			   (A)  = PEC.TFI ERROR CODE
                        *
                        *	USES	(PSW),(HL)

6513  CD C067           CTS	CALL	LSN	;(HL) = ADDRESS OF FIRST SOURCE NAME
6516  11 EA8B           	LXI	D,-LINE
6519  19                	DAD	D	;(HL) == 0 IF NO '=' IN COMMAND LINE
651A  7D                	MOV	A,L
651B  B4                	ORA	H
651C  C8                	RZ			NO;TARGET FILE
651D  3E 83             	MVI	A,PEC.TFI;TARGET FILE ILLEGAL
651F  C9                	RET			TARGET;FILE SPECIFIED
6520                    	SPACE	4,10
                        **	CWM - CHECK WILDCARD MATCH.
                        *
                        *	CWM CHECKS TO SEE IF A WILDCARDED FIELD MATCHES A NON-WILDCARDED
                        *	FIELD.
                        *
                        *	ENTRY	(DE) = ADDRESS OF WC NAME
                        *		(HL) = ADDRESS OF NON/WC NAME
                        *		(B) = NUMBER OF CHARACTERS TO CHECK
                        *	EXIT	'Z' SET IF MATCH
                        *		 (HL) = (HL)+(B)
                        *		 (DE) = (DE)+(B)
                        *		'Z' CLEAR IF NO MATCH
                        *	USES	A,F,B,D,E,H,L

6520  1A                CWM	LDAX	D
6521  A7                	ANA	A
6522  FA 2765           	JM	CWM1	;IS MATCH
6525  BE                	CMP	M
6526  C0                	RNE			NO;MATCH
6527  13                CWM1	INX	D
6528  23                	INX	H	;ADVANCE ADDRESSES
6529  05                	DCR	B
652A  C2 2065           	JNZ	CWM	;GO FOR MORE
652D  C9                	RET			GOT;MATCH
652E                    	SPACE	4,10
                        **	DDF - DECODE DESTINATION FILE.
                        *
                        *	DDF DECODES THE DESTINATION FILE NAME FROM THE COMMAND LINE.
                        *
                        *	IF NO DESTINATION NAME IS SPECIFIED, IT DEFAULTS TO
                        *		TT:PIPDEST.JGL
                        *
                        *	IF THE DESTINATION IS SPECIFIED AS A DEVICE NAME ONLY, IT
                        *	IS EXPANDED TO DEV:????????.???
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' CLEAR IF OK
                        *		 (A) = 0 IF NAME HAS WILDCARDS
                        *		 (A) = 1 IF NO WILDCARD USED
                        *		 DESTFB+FB.NAM CONTAINS A COMPLETE DESTINATION FILE NAME
                        *		 (HL) = COMMAND LINE POINTER UDPATED
                        *		'C' SET IF ERROR
                        *		 (A) = CODE
                        *	USES	ALL

652E  11 1674           DDF	LXI	D,LINE
6531  62                	MOV	H,D
6532  6B                	MOV	L,E	;(HL) = COMMAND POINTER
6533  1A                DDF1	LDAX	D
6534  13                	INX	D
6535  FE 3D             	CPI	'='
6537  CA 4165           	JE	DDF2	;HAVE A SOURCE FILE
653A  A7                	ANA	A
653B  C2 3365           	JNZ	DDF1	;MORE TO CHECK
653E  21 7C65           DDF1.0	LXI	H,DDFA	;USE DEFAULT

                        *	(HL) = ADDRESS FOR NAME

6541  11 7871           DDF2	LXI	D,DEFALT
6544  CD 8C65           	CALL	CAD	;CONVERT ASCII NAME TO DIRECTORY FORMAT
6547  D8                	RC			ERROR
6548  CA 3E65           	JZ	DDF1.0	;NO FILE NAME SPECIFIED, USE DEFAULT
654B  7E                	MOV	A,M
654C  FE 3D             	CPI	'='
654E  3E 86             	MVI	A,PEC.IDF;ASSUME ILLEGAL DESTINATION FORMAT
6550  37                	STC
6551  C0                	RNE			MUST;HAVE '='

                        *	check for device name without file name.

6552  21 EE73           	lxi	h,pio.dir+DIR.NAM
6555  3A F673           	lda	pio.dir+DIR.EXT
6558  B6                	ora	m
6559  C2 7465           	jnz	ddf4			; have name and/or extension

                        *	Check it to see if it's a valid device. Non-directoried
                        *	devices will not be converted to the wild-card format.

655C  E5                	push	h			; save
655D  2A EB73           	lhld	pio.dev 		; get device name
6560  EB                	xchg				;  in (de)
6561  FF 0A             	scall	.gda			; (bc) = driver address
pipsubs.acm:512: *** Error:  Illegal opcode 'JRC' ***
                        	jrc	ddf5			; yep, skip out.
6563  21 0600           	lxi	h,DEV.FLG		; offset to device flag
6566  09                	dad	b			; get it
6567  3E 01             	mvi	a,DT.DD
6569  A6                	ana	m			; directory device?
656A  E1                	pop	h
656B  CA 7465           	jrz	ddf4			; no, don't wild-card it.

                        *	have device only, make it the same as ????????.???

656E  06 0B             	mvi	b,8+3
6570  36 80             ddf3	mvi	m,200Q
6572  23                	inx	h
6573  05                	dcr	b
pipsubs.acm:526: *** Error:  Illegal opcode 'JRNZ' ***
                        	jrnz	ddf3

                        *	HAVE NAME DECODED. EXPAND INTO DESTFB+FB.NAM

6574  21 6771           DDF4	LXI	H,DESTFB+FB.NAM
6577  C3 B866           	JMP	CDA	;CONVERT DIRECTORY FORMAT TO ASCII FORMAT

                        *	abort

657A  E1                ddf5	pop	h			; clear stack
657B  C9                	ret

657C  54543A50 49504445 DDFA	DB	'TT:PIPDEST.JGL=',0
6584  53542E4A 474C3D00
658C                    	SPACE	4,10
                        **	CAD - CONVERT ASCII FILE NAME INTO DIRECTORY FORMAT.
                        *
                        *	CAD CRACKS AN ALPHANUMERIC FILE DESCRIPTION, OF THE FORM
                        *
                        *	DEV:NAME.EXT
                        *
                        *	INTO THE PIO.XXX FIELDS.
                        *
                        *	THE DEFAULT BLOCK DETERMINES THE VALUES FOR THE DEVICE AND EXTENSION
                        *	FIELDS, IF THEY ARE UNSPECIFIED. IF *CAD* IS ENTERED
                        *	AT *CAD*, AN UNSPECIFIED NAME FIELD IS RETURNED AS ZERO BYTES.
                        *	IF ENTERED AT *CAD.*, AN UNSPECIFIED NAME FIELD IS
                        *	RETURNED AS 200Q (MATCH-ONE) BYTES.
                        *
                        *	ENTRY	(DE) = POINT TO DEFAULT BLOCK
                        *		(HL) = POINTER TO TEXT
                        *	EXIT	'C' SET IF ERROR
                        *		 (A) = ERROR CODE
                        *		'C' CLEAR IF OK
                        *		 (HL) = POINTS PAST FILE NAME
                        *		 'Z' SET IF NULL NAME
                        *		 'Z' CLEAR IF NON-NULL
                        *		  PIO.DIR.NAM = NAME
                        *		  PIO.DIR.EXT = EXTENSION
                        *		  PIO.DEV = DEVICE CODE
                        *		  PIO.UNI = UNIT NUMBER (ASCII DIGIT)
                        *	USES	ALL

658C  AF                CAD	XRA	A	;SET TO NULLS
658D  C3 9265           	JMP	CAD0

6590  3E 80             CAD.	MVI	A,200Q
6592  E5                CAD0	PUSH	H
6593  32 3F66           	STA	CADA	;SAVE DEFAULT VALUE

                        *	SET DEFAULTS IN PIO.xxx

6596  21 EB73           	LXI	H,PIO.DEV
6599  01 0300           	LXI	B,3
659C  CD AA18           	CALL	$MOVE	;SET DEFALUT DEVICE
659F  01 0300           	LXI	B,3
65A2  21 F673           	LXI	H,PIO.DIR+DIR.EXT
65A5  CD AA18           	CALL	$MOVE	;SET DEFAULT EXTENSION
65A8  E1                	POP	H
65A9  CD E568           	CALL	$SOB	;SKIP BLANKS
65AC  06 00             	MVI	B,0
65AE  FE 3F             	CPI	'?'
65B0  CA C765           	JE	CAD1	;IS '?'
65B3  FE 2A             	CPI	'*'
65B5  CA C765           	JE	CAD1	;IS '*'
65B8  FE 2E             	CPI	'.'
65BA  CA C765           	JE	CAD1	;IS '.'
65BD  FE 41             	CPI	'A'
65BF  DA 3166           	JC	CAD4	;NOT NAME
65C2  FE 5B             	CPI	'Z'+1
65C4  D2 3166           	JNC	CAD4	;NOT NAME

                        *	HAVE ALPHA STRING. CRACK IT

65C7  CD 4066           CAD1	CALL	DNT	;DECODE NEXT TOKEN
65CA  DA 3B66           	JC	CAD5	;ERROR
65CD  FE 3A             	CPI	':'
65CF  C2 F465           	JNE	CAD2	;NOT DEVICE

                        *	HAVE EXPLICIT DEVICE

65D2  23                	INX	H	;SKIP ':'
65D3  3E 03             	MVI	A,3
65D5  B9                	CMP	C
65D6  DA 3B66           	JC	CAD5	;TOO MANY CHARACTERS
65D9  3E 01             	MVI	A,PIO.UNI-PIO.DEV-1
65DB  B9                	CMP	C
65DC  D2 3B66           	JNC	CAD5	;Too Few characters

65DF  3E 30             	MVI	A,'0'
65E1  32 ED73           	STA	PIO.UNI ;Assume Unit 0
65E4  06 00             	MVI	B,0	;BC = Move Count
65E6  E5                	PUSH	H	;SAVE (HL)
65E7  21 EB73           	LXI	H,PIO.DEV
65EA  CD AA18           	CALL	$MOVE	;SET EXPLICIT DEVICE
65ED  E1                	POP	H
65EE  CD 4066           	CALL	DNT	;DECODE NEXT TOKEN
65F1  DA 3B66           	JC	CAD5	;ERROR

                        *	DECODE NAME

65F4  01 0800           CAD2	LXI	B,8	;(BC) = COUNT
65F7  E5                	PUSH	H	;SAVE TEXT ADDR

                        *	SEE IF NAME IS UNSPECIFIED

65F8  21 EE73           	LXI	H,PIO.DIR+DIR.NAM
65FB  E5                	PUSH	H	;SAVE ADDRESS OF DIR.NAM
65FC  CD AA18           	CALL	$MOVE	;MOVE IN NAME
65FF  E1                	POP	H	;(HL) = #PIO.DIR+DIR.NAM
6600  7E                	MOV	A,M
6601  A7                	ANA	A
6602  C2 1066           	JNZ	CAD2.6	;IS SPECIFIED
6605  3A 3F66           	LDA	CADA	;(A) = FILL CHARACTER
6608  0E 08             	MVI	C,8	;(C) = COUNT
660A  77                CAD2.4	MOV	M,A
660B  23                	INX	H
660C  0D                	DCR	C
660D  C2 0A66           	JNZ	CAD2.4
6610  E1                CAD2.6	POP	H
6611  7E                	MOV	A,M	;(A) = DELIMITER
6612  FE 2E             	CPI	'.'
6614  C2 2F66           	JNE	CAD3	;NOT EXTENSION

                        *	HAVE EXPLICIT EXTENSION

6617  23                	INX	H
6618  CD 4066           	CALL	DNT
661B  DA 3B66           	JC	CAD5	;ERROR
661E  3E 03             	MVI	A,3
6620  B9                	CMP	C
6621  DA 3B66           	JC	CAD5	;TOO LONG
6624  01 0300           	LXI	B,3
6627  E5                	PUSH	H	;SAVE TEXT POINTER
6628  21 F673           	LXI	H,PIO.DIR+DIR.EXT
662B  CD AA18           	CALL	$MOVE	;MOVE EXTENSION
662E  E1                	POP	H

                        *	DONE WITH NAME. MUST HAVE LEGIT DELIMITER

662F  06 01             CAD3	MVI	B,1	;(B) = NAME PRESENT FLAG

                        *	END OF NAME. EXIT
                        *	(B) = 0 IF NULL, (B) <> 0 IF NON-NULL

6631  CD E568           CAD4	CALL	$SOB	;SKIP BLANKS
6634  CD 7468           	CALL	$CFD	;CHECK FILE NAME DELIMITER
6637  D8                	RC			ERROR
6638  78                	MOV	A,B
6639  A7                	ANA	A	;SET 'Z' IF NULL
663A  C9                	RET

                        *	ERROR

663B  3E 07             CAD5	MVI	A,EC.IFN;ILLEGAL FILE NAME
663D  37                	STC
663E  C9                	RET

663F  00                CADA	DB	0	;FILL CHARACTER FOR OMITTED NAME FIELD
6640                    	SPACE	4,10
                        **	DNT - DECODE NEXT TOKEN.
                        *
                        *	DNT COPIES THE NEXT ALPHANUMERIC FIELD INTO A ZERO-FILLED WORK AREA.
                        *
                        *	ENTRY	(HL) = TEXT POINTER
                        *	EXIT	'C' SET IF ERROR
                        *		'C' CLEAR IF OK
                        *		(A) = DELIMTER CHARACTER
                        *		(HL) UPDATED TO DELIMITER CHARACTER
                        *		(DNTA) = STRING
                        *		(C) = LENGTH
                        *		(DE) = #DNTA
                        *	USES	ALL

6640  11 8A66           DNT	LXI	D,DNTA
6643  0E 09             	MVI	C,9	;(C) = SIZE OF DNTA
6645  41                	MOV	B,C	;(B) = MAX ALLOWED +1
6646  AF                	XRA	A
6647  12                DNT1	STAX	D	;ZERO BUFFER
6648  13                	INX	D
6649  0D                	DCR	C
664A  C2 4766           	JNZ	DNT1
664D  11 8A66           	LXI	D,DNTA

                        *	COPY CHARACTERS

6650  7E                DNT2	MOV	A,M
6651  FE 3F             	CPI	'?'
6653  3E 80             	MVI	A,200Q
6655  CA 7266           	JE	DNT3	;IS MATCHONE
6658  7E                	MOV	A,M
6659  FE 2A             	CPI	'*'
665B  CA 7C66           	JE	DNT5	;IS WILDCARD
665E  FE 30             	CPI	'0'
6660  DA 8566           	JC	DNT4	;NOT ALPHANUMERIC
6663  FE 3A             	CPI	'9'+1
6665  DA 7266           	JC	DNT3	;NUMERIC
6668  FE 41             	CPI	'A'
666A  DA 8566           	JC	DNT4	;DELIMITER
666D  FE 5B             	CPI	'Z'+1
666F  D2 8566           	JNC	DNT4	;DELIMITER

                        *	HAVE GOOD CHARACTER

6672  12                DNT3	STAX	D	;STORE CHAR
6673  13                	INX	D
6674  23                	INX	H
6675  0C                	INR	C	;COUNT
6676  05                	DCR	B	;LIMIT DECREMENT
6677  C2 5066           	JNZ	DNT2	;NOT OVERFLOW

                        *	OVERFLOW

667A  37                	STC			FLAG;ERR
667B  C9                	RET

                        *	IS '*' WILDCARD

667C  3E 80             DNT5	MVI	A,200Q
667E  12                	STAX	D
667F  13                	INX	D
6680  05                	DCR	B
6681  C2 7C66           	JNZ	DNT5	;FILL WITH MATCH ONE
6684  23                	INX	H	;SKIP '*'

                        *	END OF STRING

6685  A7                DNT4	ANA	A	;CLEAR 'C'
6686  11 8A66           	LXI	D,DNTA	;SET POINTER
6689  C9                	RET

668A   (0009)           DNTA	DS	9	;WORK AREA
6693                    	SPACE	4,10
                        **	EBM - EXPAND BUFFER TO MAXIMUM.
                        *
                        *	EBM IS CALLED TO EXPAND THE BUFFER 'BUF' TO THE MAXIMUM SIZE.
                        *	WHICH DOES NOT REQUIRE THE OVERLAYING OF THE SYSTEM.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(BUFSIZ) = BUFFER SIZE (MULTIPLE OF 256)
                        *	USES	ALL

6693  2A D020           EBM	LHLD	S.SYSM
6696  11 FAFF           	LXI	D,-6
6699  19                	DAD	D	;(HL) = NEW ADDRESS SOUGHT
669A  FF 2A             	SCALL	.SETTOP
669C  DA 9161           	JC	IERR1	;INTERNAL ERROR 1
669F  2A D220           	LHLD	S.USRM
66A2  EB                	XCHG
66A3  2A 5571           	LHLD	BUFPTR
66A6  CD 9418           	CALL	$CHL	;(HL) = - BUFFER FWA
66A9  19                	DAD	D
66AA  2E 00             	MVI	L,0
66AC  22 5771           	SHLD	BUFSIZ
66AF  3E 01             	MVI	A,BUFMINL/256-1
66B1  BC                	CMP	H
66B2  D8                	RC			IF;OK
66B3  3E 11             	MVI	A,EC.NEM
66B5  C3 B861           	JMP	ERROR	;NOT ENOUGH MEMORY
66B8                    	SPACE	4,10
                        **	CDA - CONVERT DIRECTORY FORMAT TO ASCII.
                        *
                        *	CDA COPIES A DIRECTORY ENTRY FROM PIO.XXX TO A TARGET FIELD.
                        *	THE DEVICE SPECIFICATION (IN PIO.DEV AND PIO.UNI) IS ALSO ENCODED.
                        *	THE TARGET FIELD IS LEFT IN THE FORM:
                        *
                        *	DEV:NAME.XXX <00>
                        *
                        *	ENTRY	(HL) = FWA NAME FIELD
                        *	EXIT	(A) = 0, HAVE WILDCARD
                        *		    = 1, NO WILDCARDS USED
                        *		'C' CLEAR
                        *	USES	ALL

66B8  01 0003           CDA	LXI	B,3*256	;(B) = CHARACTER COUNT, (C) = WILDCARD FLAG
66BB  11 EB73           	LXI	D,PIO.DEV
66BE  CD DC66           	CALL	CDA5	;COPY IT
66C1  36 3A             	MVI	M,':'
66C3  23                	INX	H
66C4  06 08             	MVI	B,8
66C6  11 EE73           	LXI	D,PIO.DIR+DIR.NAM
66C9  CD DC66           	CALL	CDA5	;COPY IT
66CC  36 2E             	MVI	M,'.'
66CE  23                	INX	H
66CF  06 03             	MVI	B,3
                        	ERRNZ	DIR.EXT-DIR.NAM-8
66D1  CD DC66           	CALL	CDA5	;COPY IT
66D4  36 00             	MVI	M,0	;FLAG END OF NAME
66D6  79                	MOV	A,C	;(A) (BIT 7) = 1 IF WILDCARDS
66D7  07                	RLC
66D8  2F                	CMA
66D9  E6 01             	ANI	1	;=0 IF WILDCARD
66DB  C9                	RET
66DC                    	SPACE	2,10
                        **	CDA5 - CONVERT DIRECTORY FIELD TO ASCII.
                        *
                        *	ZEROS ARE IGNORED, 200Q WILDCARDS ARE MAPPED TO '?'
                        *
                        *	ENTRY	(DE) = FROM
                        *		(HL) = T0
                        *		(B) = COUNT
                        *		(C) = ORA ACCUMULATOR
                        *	EXIT	(DE) ADVANCED
                        * 		(HL) = (HL)+(B)
                        *		(C) = (C) .OR. (FROM CHARACTERS PROCESSED)
                        *	USES	ALL

66DC  1A                CDA5	LDAX	D	;(A) = CHARACTER
66DD  B1                	ORA	C
66DE  4F                	MOV	C,A
66DF  1A                	LDAX	D
66E0  13                	INX	D
66E1  A7                	ANA	A
66E2  CA EC66           	JZ	CDA7	;IS 00
66E5  F2 EA66           	JP	CDA6	;NOT 200Q
66E8  3E 3F             	MVI	A,'?'
66EA  77                CDA6	MOV	M,A
66EB  23                	INX	H	;INCREMENT TO
66EC  05                CDA7	DCR	B
66ED  C2 DC66           	JNZ	CDA5	;IF MORE TO GO
66F0  C9                	RET
66F1                    	SPACE	4,10
                        **	EWS - EXPAND WILDCARD SPECIFICATION.
                        *
                        *	DWS ENTERS THE FILE NAME IN PIO.XXX INTO THE MANAGED TABLE
                        *	NAMTAB. IF THE FILE NAME CONTAINS WILDCARDS, THE DIRECTORY
                        *	IS READ FOR ELIGIBLE FILES.
                        *
                        *	ENTRY	PIO.XXX = FILE NAME
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *	USES	ALL

66F1  CD C762           EWS	CALL	AEN	;TRY TO ENTER IT
66F4  D0                	RNC			NO;WILDCARDS, AM DONE

                        *	IS WILDCARD. LOOK UP DEVICE TYPE

66F5  2A 5971           	LHLD	NAMTLEN
66F8  11 6A74           	LXI	D,NAMTAB-FB.NAML
66FB  19                	DAD	D	;(HL) = ADDRESS OF LAST ENTRY
66FC  CD 8C65           	CALL	CAD	;CONVERT ASCII NAME TO DIRECTORY FORMAT
66FF  D8                	RC			ERROR
6700  2A 5971           	LHLD	NAMTLEN
6703  11 EFFF           	LXI	D,-FB.NAML
6706  19                	DAD	D
6707  22 5971           	SHLD	NAMTLEN	;REMOVE WILDCARD FROM TABLE
670A  CD 746B           	CALL	$MOVEL
670D  0300EB73 4671     	DW	3,PIO.DEV,DIRNAM;SET DIRECTORY NAME IN XXX:DIRECT.SYS
6713  CD 746B           	CALL	$MOVEL
6716  0B00EE73 E071     	DW	8+3,PIO.DIR+DIR.NAM,EWSC;SAVE WILDCARD PATTERN
671C  01 C271           	LXI	B,EWSB
671F  21 4671           	LXI	H,DIRNAM
6722  FF 2B             	SCALL	.DECODE ;GET INFORMATION ABOUT DEVICE
6724  D8                	RC			ERROR
6725  3A C271           	LDA	EWSB	;SEE IF A DIRECTORY DEVICE
6728  E6 01             	ANI	DT.DD
672A  3E 05             	MVI	A,EC.DNS	;ASSUME DEVICE NOT SUITABLE
672C  37                	STC
672D  C8                	RZ			ERROR

                        *	IS DIRECTORY DEVICE. OPEN DIRECTORY

672E  21 4671           	LXI	H,DIRNAM
6731  3E 02             	MVI	A,CN.DIR
6733  FF 22             	SCALL	.OPENR
6735  3E 80             	MVI	A,PEC.DF
6737  D8                	RC			DEVICE;FORMAT FAILURE

                        *	READ DIRECTORY ENTRYS FOR MATCH

6738  CD 9C67           EWS1	CALL	GDWP	;DE = DIRECTORY WORKSPACE PTR
673B  01 0002           	LXI	B,512
673E  3E 02             	MVI	A,CN.DIR
6740  D5                	PUSH	D	;SAVE ADDRESS
6741  FF 04             	SCALL	.READ	;READ BLOCK
6743  E1                	POP	H	;(HL) = DIRECTORY ADDRESS
6744  DA 9167           	JC	EWS7	;ALL DONE

                        *	LOOK AT DIRECTORY BLOCK FOR MATCHES

6747  E5                	PUSH	H
6748  CD A267           	CALL	GDWP.
674B  CD 3169           	CALL	$INDLB
674E  FB01              	DW	DIS.ENL ;A  = DIRECTORY ENTRY LENGTH
6750  E1                	POP	H

6751  4F                	MOV	C,A	;(C) = LENGTH

                        *	CHECK NEXT ENTRY

6752  7E                EWS3	MOV	A,M	;(A) = 1ST CHAR THIS ENTRY
6753  A7                	ANA	A
6754  CA 3867           	JZ	EWS1	;END OF BLOCK
                        	ERRNZ	DF.EMP-377Q
6757  3C                	INR	A
6758  CA 8B67           	JZ	EWS6	;ENTRY EMPTY
                        	ERRNZ	DF.CLR-376Q
675B  3C                	INR	A
675C  CA 9167           	JZ	EWS7	;END OF LIST
675F  CD 4264           	CALL	CFE	;CHECK FOR FILE ELIGIBILITY
6762  C2 8B67           	JNZ	EWS6	;NOT TO PROCESS
6765  E5                	PUSH	H
6766  11 E071           	LXI	D,EWSC
6769  06 0B             	MVI	B,8+3
676B  CD 2065           	CALL	CWM	;CHECK WILDCARD MATCH

                        *	KLUDGE FOR NEGATE STATE OF 'Z' FLAG IF /- SPECIFIED

676E  F5                	PUSH	PSW	;FLIP-FLOP ON /-
676F  3A 2C71           	LDA	NEGATE		    ;/
6772  E3                	XTHL			    /
6773  AD                	XRA	L	;IF NOT /- 'Z' STATE IS UNCHANGED
6774  6F                	MOV	L,A		 ;/
6775  E3                	XTHL			 /
6776  F1                	POP	PSW	;/

6777  C2 8A67           	JNZ	EWS4	;NO MATCH

                        *	HAVE MATCH. ADD TO LIST

677A  D1                	POP	D	;(DE) = FROM
677B  D5                	PUSH	D
677C  C5                	PUSH	B	;SAVE (C)
677D  01 0B00           	LXI	B,8+3
6780  21 EE73           	LXI	H,PIO.DIR+DIR.NAM
6783  CD AA18           	CALL	$MOVE
6786  CD C762           	CALL	AEN	;ADD TO TABLE
6789  C1                	POP	B	;RESTORE (C)

                        *	LOOKUP NEXT ENTRY

678A  E1                EWS4	POP	H
678B  06 00             EWS6	MVI	B,0
678D  09                	DAD	B	;POINT TO NEXT
678E  C3 5267           	JMP	EWS3

                        *	ALL DONE. CLOSE DIRECTORY FILE

6791  3E 02             EWS7	MVI	A,CN.DIR
6793  FF 26             	SCALL	.CLOSE
6795  C9                	RET

6796  53593080 8080     EWSA	DB	'SY0',200Q,200Q,200Q
679C                    	SPACE	4,10
                        **	GDWP	-  GET DIRECTORY WORKSPACE POINTER
                        *
                        *	GDWP GETS THE DIRECTORY WORKSPACE POINTER
                        *
                        *	ENTRY:	NONE
                        *
                        *	EXIT:	DE	= DIRECTORY WORKSPACE POINTER
                        *
                        *	USES:	DE

679C  EB                GDWP	XCHG
679D  CD A267           	CALL	GDWP.	;HL = DIRECTORY WORKSPACE POINTER
67A0  EB                	XCHG
67A1  C9                	RET

67A2  2A 5121           GDWP.	LHLD	S.SCR	;HL = SYSTEM SCRATCH
67A5  C9                	RET
67A6                    	SPACE	4,10
                        **	INA - INCREASE NAMTAB ALLOCATION.
                        *
                        *	INA IS CALLED TO INCREASE THE NAMTAB ALLOCATION. THE
                        *	BUFFER AREA IS MOVED UP TO MAKE ROOM.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,H,L

67A6  21 5C71           INA	LXI	H,NAMTMAX+1
67A9  34                	INR	M	;INCREMENT LENGTH
67AA  21 5671           	LXI	H,BUFPTR+1
67AD  34                	INR	M	;MOVE BUFFER
67AE  2A 5771           	LHLD	BUFSIZ
67B1  7C                	MOV	A,H
67B2  B5                	ORA	L
67B3  3E 11             	MVI	A,EC.NEM;FLAG OUT OF MEMORY IF BUFFER NOT EMPTY
67B5  C2 B861           	JNZ	ERROR
67B8  C5                	PUSH	B
67B9  D5                	PUSH	D
67BA  CD 1168           	CALL	SBE	;NOTIFY SYSTEM
67BD  D1                	POP	D
67BE  C1                	POP	B
67BF  C9                	RET
67C0                    	SPACE	4,10
                        **	LSN - LOCATE SOURCE NAME
                        *
                        *	LSN SCANS THE COMMAND LINE FOR THE FIRST SOURCE FILE NAME.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(HL) = 1ST FILE NAME FWA
                        *	USES	A,F,H,L

67C0  21 1674           LSN	LXI	H,LINE
67C3  7E                LSN1	MOV	A,M
67C4  23                	INX	H
67C5  FE 3D             	CPI	'='
67C7  C8                	RE			GOT;IT
67C8  A7                	ANA	A
67C9  C2 C367           	JNZ	LSN1	;MORE LINE
67CC  21 1674           	LXI	H,LINE	;THERE WAS NO '='
67CF  C9                	RET
67D0                    	SPACE	4,10
                        **	MWN - MERGE WILDCARD NAMES.
                        *
                        *	MWN MERGES A COMPLETELY SPECIFIED FILENAME WITH A WILDCARDED COMPLETELY
                        *	SPECIFIED FILE NAME.
                        *
                        *	BOTH FILE NAMES SHOULD HAVE THE SAME DEVICE SPECIFICATION.
                        *
                        *	FILE NAME FORMAT:
                        *
                        *	DEV:NAMEXXXX.EXT 00
                        *
                        *	ENTRY	(BC) = ADDRESS OF WILDCARDED ASCII NAME
                        *		(DE) = ADDRESS OF NON-WC ASCII NAME
                        *		(HL) = ADDRESS FOR RESULTANT ASCII NAME
                        *	EXIT	NONE
                        *	USES	ALL

67D0  E5                MWN	PUSH	H	;SAVE TARGET ADDRESS
67D1  C5                	PUSH	B	;SAVE WC PATTERN
67D2  EB                	XCHG			(HL);= MASTER NAME
67D3  CD 8C65           	CALL	CAD	;CONVERT TO DIRECTORY FORMAT
67D6  CD 746B           	CALL	$MOVEL
67D9  0B00EE73 A071     	DW	8+3,PIO.DIR,MWNA;(MWNA) = DECODED MASTER
67DF  E1                	POP	H	;(HL) = WC PATTERN
67E0  CD 8C65           	CALL	CAD	;(PIO.DIR) = WC PATTERN
67E3  11 A071           	LXI	D,MWNA	;(DE) = MASTER PATTERN
67E6  21 EE73           	LXI	H,PIO.DIR;(DE) = WC PATTERN ADDRESS
67E9  0E 0B             	MVI	C,8+3	;MERGE NAME AND EXTENSION

                        *	MERGE NAMES

67EB  7E                MWN1	MOV	A,M	;(A) = WC PATTERN
67EC  A7                	ANA	A
67ED  F2 F167           	JP	MWN2	;USE THIS
67F0  1A                	LDAX	D	;IS MATCH CHARACTER, USE MASTER INSTEAD
67F1  77                MWN2	MOV	M,A	;STORE CHARACTER
67F2  13                	INX	D
67F3  23                	INX	H
67F4  0D                	DCR	C
67F5  C2 EB67           	JNZ	MWN1	;MERGE TILL DONE
67F8  E1                	POP	H	;(HL) = TARGET ADDRESS
67F9  C3 B866           	JMP	CDA	;CONVERT DIRECTORY FORMAT TO ASCII
67FC                    	SPACE	4,10
                        **	REN - REMOVE ENTRY FROM *NAMTAB*
                        *
                        *	REN REMOVES THE FIRST 'FB.NAML' BYTES FROM NAMTAB.
                        *
                        *	THE AMOUNT (FB.NAML) IS REMOVED FROM THE SIZE OF THE TABLE. THE
                        *	TABLE IS NOT CHECKED FOR UNDERFLOW, THE CALLER MUST GUARANTEE THE
                        *	PRESENSE OF AT LEAST FB.NAML BYTES IN NAMTAB.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

67FC  2A 5971           REN	LHLD	NAMTLEN
67FF  11 EFFF           	LXI	D,-FB.NAML
6802  19                	DAD	D	;REMOVE COUNT FROM LEN
6803  22 5971           	SHLD	NAMTLEN
6806  44                	MOV	B,H
6807  4D                	MOV	C,L	;(BC) = REMAINING LENGTH
6808  11 8C74           	LXI	D,NAMTAB+FB.NAML;(DE) = START OF 2ND ENTRY
680B  21 7B74           	LXI	H,NAMTAB
680E  C3 AA18           	JMP	$MOVE	;MOVE DOWN AND RETURN
6811                    	SPACE	4,10
                        **	SBE - SET BUFFER EMPTY.
                        *
                        *	THE SYSTEM IS NOTIFIED.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

6811  21 0000           SBE	LXI	H,0
6814  22 5771           	SHLD	BUFSIZ
6817  2A 5571           	LHLD	BUFPTR	;(HL) = BUFFER FWA (AND LWA!)
681A  23                	INX	H
681B  23                	INX	H
681C  FF 2A             	SCALL	.SETTOP
681E  D0                	RNC			OK
681F  C3 B861           	JMP	ERROR	;NOT ENOUGH ROOM
6822                    	SPACE	4,10
                        **	SDD - SET DEFAULT DEFAULT.
                        *
                        *	SDD IS CALLED TO SETUP THE CURRENT DEFAULT DEVICE
                        *	AND EXTENSION TO 'SY0' AND <NULL>, RESPECTIVELY.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	NONE

6822  CD 2C19           SDD	CALL	$SAVALL
6825  CD 746B           	CALL	$MOVEL
6828  06003168 7871     	DW	6,SDDA,DEFALT;SET DEFAULT DEFAULT
682E  C3 2719           	JMP	$RSTALL	;RESTORE AND RETURN

6831  53593000 0000     SDDA	DB	'SY0',0,0,0;DEFAULT DEFAULT VALUES
6837                    	SPACE	4,10
                        **	SFS - SKIP FILE SEPERATOR.
                        *
                        *	SFS IS CALLED TO SKIP OVER THE CHARACTERS SEPERATING ONE
                        *	FILE NAME FROM ANOTHER ON THE LINE. THE FILES MAY BE SEPERATED
                        *	BY BLANKS OR A COMMA ALONE, OR BY BLANKS WITH A COMMA. THE
                        *	SYNTAX IS
                        *
                        *	<BLANKS> <,> <BLANKS>
                        *
                        *	ONE, TWO OR ALL THREE FIELDS MAY BE PRESENT.
                        *
                        *	ENTRY	(HL) = POINT TO START OF SEP FIELD
                        *	EXIT	(HL) ADVANCED PAST SEPERATOR FIELD
                        *	USES	A,F,H,L

6837  CD E568           SFS	CALL	$SOB	;SKIP BLANKS
683A  FE 2C             	CPI	','
683C  C2 4068           	JNE	SFS1	;NOT ,
683F  23                	INX	H	;SKIP ,
6840  C3 E568           SFS1	JMP	$SOB	;GET ANY MORE BLANKS AND EXIT
6843                    	SPACE	4,10
                        **	SND - SET NEW DEFAULTS.
                        *
                        *	SND IS CALLED TO SET A NEW DEFAULT DEVICE AND EXTENSION
                        *	IN THE 'DEFALT' AREA.
                        *
                        *	ENTRY	PIO.DEV = DEVICE CODE
                        *		PIO.UNI = UNIT #
                        *		PIO.DIR+DIR.EXT = EXTENSION
                        *	EXIT	NONE
                        *	USES	NONE

6843  CD 2C19           SND	CALL	$SAVALL	;SAVE REGS
                        	ERRNZ	PIO.UNI-PIO.DEV-2
6846  CD 746B           	CALL	$MOVEL
6849  0300              	DW	3
684B  EB73              	DW	PIO.DEV
684D  7871              	DW	DEFALT
684F  CD 746B           	CALL	$MOVEL
6852  0300              	DW	3
6854  F673              	DW	PIO.DIR+DIR.EXT
6856  7B71              	DW	DEFALT+3
6858  C3 2719           	JMP	$RSTALL	;RETURN
685B                    	STL	'COMMON DECKS'
685B                    	EJECT
685B                    	XTEXT	H17SUBS
685B                    	SPACE	4,10
                        **	$COMP - COMPARE TWO CHARACTER STRINGS.
                        *
                        *	$COMP COMPARES TWO BYTE STRINGS.
                        *
                        *	ENTRY	(C) = COMPARE COUNT
                        *		(DE) = FWA OF STRING #1
                        *		(HL) = FWA OF STRING #2
                        *	EXIT	'Z' CLEAR, IS MIS-MATCH
                        *		 (C) = LENGTH REMAINING
                        *		 (DE) = ADDRESS OF MISMATCH IN STRING#1
                        *		 (HL) = ADDRESS OF MISMATCH IN STRING #2
                        *		'Z' SET, HAVE MATCH
                        *		 (C) = 0
                        *		 (DE) = (DE) + (0C)
                        *		 (HL) = (HL) + (0C)
                        *	USES	A,F,C,D,E,H,L

      = 1830            $COMP	EQU	30060A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$DADA - PERFORM (H,L) = (H,L) + (0,A)
                        *
                        *	ENTRY	(H,L) = BEFORE VALUE
                        *		(A) = BEFORE VALUE
                        *	EXIT	(H,L) = (H,L) + (0,A)
                        *		'C' SET IF OVERFLOW
                        *	USES	F,H,L

      = 183A            $DADA	EQU	30072A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$DADA. - ADD (0,A) TO (H,L)
                        *
                        *	ENTRY	NONE
                        *	EXIT	(HL) = (HL) + (0A)
                        *	USES	A,F,H,L

      = 1841            $DADA.	EQU	30101A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$DU66 - UNSIGNED 16 / 16 DIVIDE.
                        *
                        *	(HL) = (BC)/(DE)
                        *
                        *	ENTRY	(BC), (DE) PRESET
                        *	EXIT	(HL) = RESULT
                        *		(DE) = REMAINDER
                        *	USES	ALL

      = 1846            $DU66	EQU	30106A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$HLIHL - LOAD HL INDIRECT THROUGH HL.
                        *
                        *	(HL) = ((HL))
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,H,L

      = 1889            $HLIHL	EQU	30211A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$CDEHL - COMPARE (DE) TO (HL)
                        *
                        *	$CDEHL COMPARES (DE) TO (HL) FOR EQUALITY.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'Z' SET IF (DE) = (HL)
                        *	USES	A,F

      = 188E            $CDEHL	EQU	30216A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$CHL - COMPLEMENT (HL).
                        *
                        *	(HL) = -(HL)		TWO'S COMPLEMENT
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,H,L

      = 1894            $CHL	EQU	30224A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$INDL - INDEXED LOAD.
                        *
                        *	$INDL LOADS DE WITH THE TWO BYTES AT (HL)+DISPLACMENT
                        *
                        *	THIS ACTS AS AN INDEXED FULL WORD LOAD.
                        *
                        *	(DE) = ( (HL) + DSPLACEMENT )
                        *
                        *	ENTRY	((RET)) = DISPLACMENT (FULL WORD)
                        *		(HL) = TABLE ADDRESS
                        *	EXIT	TO (RET+2)
                        *	USES	A,F,D,E

      = 189C            $INDL	EQU	30234A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$MOVE - MOVE DATA
                        *
                        *	$MOVE MOVES A BLOCK OF BYTES TO A NEW MEMORY ADDRESS.
                        *	IF THE MOVE IS TO A LOWER ADDRESS, THE BYTES ARE MOVED FROM
                        *	FIRST TO LAST.
                        *
                        *	IF THE MOVE IS TO A HIGHER ADDRESS, THE BYTES ARE MOVED FROM
                        *	LAST TO FIRST.
                        *
                        *	THIS IS DONE SO THAT AN OVERLAPED MOVE WILL NOT 'RIPPLE'.
                        *
                        *	ENTRY	(BC) = COUNT
                        *		(DE) = FROM
                        *		(HL) = TO
                        *	EXIT	MOVED
                        *		(DE) = ADDRESS OF NEXT FROM BYTE
                        *		(HL) = ADDRESS OF NEXT *TO* BYTE
                        *		'C' CLEAR
                        *	USES	ALL

      = 18AA            $MOVE	EQU	30252A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$MU10 - MULTIPLY UNSIGNED 16 BIT QUANTITY BY 10
                        *
                        *	(HL) = (DE) * 10
                        *
                        *	ENTRY:	(DE) = MULTIPLIER
                        *	EXIT:	'C' CLEAR IF OK
                        *		 (HL) = PRODUCT
                        *		'C' SET IF ERROR
                        *	USES:	F,D,E,H,L

      = 18D4            $MU10	EQU	30324A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$MU66 - UNSIGNED 16 X 16 MULTIPLY.
                        *
                        *	ENTRY:	(BC) = MULTIPLICAND
                        *		(DE) = MULTIPLIER
                        *	EXIT:	(HL) = RESULT
                        *		'Z' SET IF NOT OVERFLOW
                        *	USES:	ALL

      = 18DF            $MU66	EQU	30337A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$MU86 - MULTIPLY 8 X 16 UNSIGNED.
                        *
                        *	$MU86 MULTIPLIES A 16 BIT VALUE BY AN 8 BIT VALUE.
                        *
                        *	ENTRY	(A) = MULTIPLIER
                        *		(DE) = MULTIPLICAND
                        *	EXIT	(HL) = RESULT
                        *		'Z' SET IF NOT OVERFLOW
                        *	USES	A,F,H,L

      = 1907            $MU86	EQU	31007A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$RSTALL - RESTORE ALL REGISTERS.
                        *
                        *	$RSTALL RESTORES ALL THE REGISTERS OFF THE STACK, AND
                        *	RETURNS TO THE PREVIOUS CALLER.
                        *
                        *	ENTRY	(SP) = PSW
                        *		(SP+2) = BC
                        *		(SP+4) = DE
                        *		(SP+6) = HL
                        *		(SP+8) = RET
                        *	EXIT	TO *RET*, REGISTERS RESTORED
                        *	USES	ALL

      = 1927            $RSTALL	EQU	31047A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$SAVALL - SAVE ALL REGISTERS ON STACK.
                        *
                        *	$SAVALL SAVES ALL THE REGISTERS ON THE STACK.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(SP) = PSW
                        *		(SP+2) = BC
                        *		(SP+4) = DE
                        *		(SP+6) = HL
                        *	USES	H,L

      = 192C            $SAVALL	EQU	31054A	;IN H17 ROM
685B                    	SPACE	  4,10
                        **	$TJMP - TABLE JUMP.
                        *
                        *	USAGE
                        *
                        *	CALL	  $TJMP 	   (A) = INDEX
                        *	DW	  ADDR1
                        *	.	    .
                        *	.	    .
                        *	.	    .
                        *	DW	  ADDRN
                        *
                        *	ENTRY	  (A) = INDEX
                        *	EXIT	  TO PROCESSOR
                        *		 (A) = INDEX*2
                        *	USES	  NONE.

      = 1931            $TJMP	EQU	31061A	;IN H17 ROM, (A) = INDEX*2

      = 1932            $TJMP.	EQU	31062A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$TBRA - BRANCH RELATIVE THROUGH TABLE.
                        *
                        *	$TBRA USES THE SUPPLIED INDEX TO SELECT A BYTE FROM THE
                        *	JUMP TABLE. THE CONTENTS OF THIS BYTE ARE ADDED TO THE
                        *	ADDRESS OF THE BYTE, YIELDING THE PROCESSOR ADDRESS.
                        *
                        *	CALL	$TBRA
                        *	DB	LAB1-*		; INDEX = 0 FOR LAB1
                        *	DB	LAB2-*		; INDEX = 1 FOR LAB2
                        *	DB	LABN-*		; INDEX = N-1 FOR LABN
                        *
                        *	ENTRY:	(A) = INDEX
                        *		(RET) = TABLE FWA
                        *	EXIT:	TO COMPUTED ADDRESS
                        *	USES:	F,H,L

      = 193E            $TBRA	EQU	31076A	;IN H17 ROM
685B                    	SPACE	4,10
                        **	$TBLS - TABLE SEARCH
                        *
                        *	TABLE FORMAT
                        *
                        *	DB	KEY1,VAL1,
                        *	.	.
                        *	.	.
                        *	DB	KEYN,VALN
                        *	DB	0
                        *
                        *	ENTRY	(A) = PATTERN
                        *		(H,L) = TABLE FWA
                        *	EXIT	(A) = PATTERN IF FOUND
                        *		'Z' SET IF FOUND
                        *		'Z' CLEAR IF NOT FOUND OR PATTERN=0
                        *	USES	A,F,H,L

                        	IF	H17TBLS
                        	ELSE
685B  C5                $TBLS	PUSH	B	;REPLACEMENT FOR H17 ROM
685C  FE 00             	CPI	0
685E  CA 7068           	JZ	TBL2
6861  47                	MOV	B,A
6862  7E                TBL1	MOV	A,M	;(A) = CHARACTER
6863  23                	INX	H
6864  B8                	CMP	B
6865  CA 7268           	JZ	TBL3	;IF MATCH
6868  A7                	ANA	A
6869  23                	INX	H	;SKIP PAST
686A  C2 6268           	JNZ	TBL1	;IF NOT END OF TABLE
686D  2B                	DCX	H
686E  2B                	DCX	H
686F  AF                	XRA	A	;SET TO ZERO FOR OLD USERS
6870  FE 01             TBL2	CPI	1	;CLEAR ZERO

                        *	DONE

6872  C1                TBL3	POP	B
6873  C9                	RET
                        	ENDIF
6874                    	SPACE	4,10
                        **	$TYPTX - TYPE TEXT.
                        *
                        *	$TYPTX IS CALLED TO TYPE A BLOCK OF TEXT ON THE SYSTEM CONSOLE.
                        *
                        *	A BYTE WITH THE 200Q BIT SET IS THE LAST BYTE IN THE MESSAGE.
                        *
                        *	ENTRY	(RET) = TEXT
                        *	EXIT	TO (RET+LENGTH)
                        *	USES	A,F

      = 195E            $TYPTX	EQU	31136A	;IN H17 ROM

      = 1964            $TYPTX.	EQU	31144A	;IN H17 ROM
6874                    	SPACE	4,10
                        **	$UDD - UNPACK DECIMAL DIGITS.
                        *
                        *	UDD CONVERTS A 16 BIT VALUE INTO A SPECIFIED NUMBER OF
                        *	DECIMAL DIGITS. THE RESULT IS ZERO FILLED.
                        *
                        *	ENTRY	(B,C) = ADDRESS VALUE
                        *		(A) = DIGIT COUNT
                        *		(H,L) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + (A)
                        *	USES	ALL

      = 196F            $UDD	EQU	31157A	;IN H17 ROM
6874                    	SPACE	4,10
                        **	$ZERO - ZERO MEMORY
                        *
                        *	$ZERO ZEROS A BLOCK OF MEMORY.
                        *
                        *	ENTRY	(HL) = ADDRESS
                        *		(B) = COUNT
                        *	EXIT	(A) = 0
                        *	USES	A,B,F,H,L

      = 198A            $ZERO	EQU	31212A	;IN H17 ROM
6874                    	SPACE	4,10
                        **	8 CONSTANT ZERO BYTES.

      = 19D0            $ZEROS	EQU	31320A	;IN H17 ROM
6874                    	SPACE	4,10
                        **	$REL - RELOCATE CODE.
                        *
                        *	REL PROCESSES A RELOCATION LIST.
                        *
                        *	ENTRY:	(BC) = DISPLACEMENT FROM ASSEMBLED ADDRESS
                        *		(DE) = RELOCATION FACTOR (FROM CURRENT ADDRESS)
                        *		(HL) = FWA RELOCATION LIST
                        *	EXIT:	NONE
                        *	USES:	ALL
                        *
                        *	IF (DE) WILL BE EQUAL TO (BC), CALL $REL.

      = 1B7D            $REL.	EQU	33175A	;IN H17 ROM

      = 1B7F            $REL	EQU	33177A	;IN H17 ROM
6874                    	SPACE	4,10
                        **	BOOT - BOOT CODE.
                        *
                        *	ENTERED TO BOOT DISK SYSTEM.

      = 1F0C            BOOT	EQU	37014A	;IN H17 ROM
6874                    	XTEXT	CFD
6874                    	SPACE	4,10
                        **	$CFD - CHECK FILE DELIMITER.
                        *
                        *	$CFD CHECKS AN ASCII CHARACTER TO SEE IF IT IS A LEGAL FILE
                        *	NAME DELIMITER. LEGAL DELIMITERS ARE
                        *
                        *	, = / <BLANK>  <00>
                        *
                        *	ENTRY	(A) = CHARACTER
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *		 (A) = ERROR CODE
                        *	USES	A,F

6874  A7                $CFD	ANA	A
6875  C8                	RZ				; IS 00
6876  FE 2C             	CPI	','
6878  C8                	RE				; IS ,
6879  FE 3D             	CPI	'='
687B  C8                	RE				; IS =
687C  FE 2F             	CPI	'/'
687E  C8                	RE				; IS /
687F  FE 20             	CPI	' '
6881  C8                	RE				; IS ' '
6882  3E 07             	MVI	A,EC.IFN		; ILLEGAL FILE NAME
6884  37                	STC
6885  C9                	RET
6886                    	XTEXT	CCO
6886                    CCO	SPACE	4,10
                        **	$CCO - CLEAR CONTROL-O
                        *
                        *	$CCO IS CALLED TO CLEAR THE EFFECT OF THE CTL-O CHARACTER.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	NONE


6886  CD 2C19           $CCO	CALL	$SAVALL 		; SAVE REGISTERS
6889  3E 04             	MVI	A,I.CONFL
688B  01 0100           	LXI	B,CO.FLG		; CLEAR CO.FLG
688E  FF 06             	SCALL	.CONSL
6890  C3 2719           	JMP	$RSTALL 		; RESTORE REGISTERS AND RETURN
6893                    	XTEXT	GNL
6893                    	SPACE	4,10
                        **	$GNL - GUARANTEE NEW LINE.
                        *
                        *	$GNL GUARANTEES THE START OF A NEW LINE BY ISSUING A CRLF
                        *	IF THE CURSOR IS NOT AT COLUMN 1..
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

6893  3E 02             $GNL	MVI	A,I.CUSOR
6895  01 0000           	LXI	B,0
6898  FF 06             	SCALL	.CONSL			; READ CURSOR
689A  3D                	DCR	A
689B  C8                	RZ				; AT COLUMN 1
689C  C3 2569           	JMP	$CRLF			;  ELSE, NEW LINE
689F                    	XTEXT	MLU
689F                    	SPACE	4,10
                        **	MLU - MAP LOWER CASE LINE TO UPPER CASE.
                        *
                        *	MLU MAPS THE LOWER CASE ALPHABETICS IN A LINE TO UPPER CASE.
                        *
                        *	ENTRY	(HL)  = LINE FWA
                        *	EXIT	NONE
                        *	USES	NONE

689F  F5                $MLU	PUSH	PSW	;SAVE (PSW)
68A0  E5                	PUSH	H	;SAVE FWA
68A1  2B                	DCX	H	;ANTICIPATE INX H
68A2  23                $MLU1	INX	H
68A3  7E                	MOV	A,M	;(A)= CHARACTER
68A4  CD AF68           	CALL	$MCU	;MAP CHAR TO UPPER
68A7  77                	MOV	M,A
68A8  A7                	ANA	A
68A9  C2 A268           	JNZ	$MLU1	;MORE TO GO
68AC  E1                	POP	H	;RESTORE (HL)
68AD  F1                	POP	PSW	;RESTORE (PSW)
68AE  C9                	RET
68AF                    	XTEXT	MCU
68AF                    	SPACE	4,10
                        **	MCU - MAP LOWER CASE TO UPPER CASE.
                        *
                        *	MCU MAPS A LOWER CASE ALPHABETIC TO UPPER
                        *	CASE.
                        *
                        *	ENTRY	(A) = CHARACTER
                        *	EXIT	(A) = CHARACTER RESULT
                        *	USES	A,F

68AF  FE 61             $MCU	CPI	'a'
68B1  D8                	RC				; NOT LOWER CASE
68B2  FE 7B             	CPI	'z'+1
68B4  D0                	RNC				; NOT LOWER CASE
68B5  D6 20             	SUI	'a'-'A'
68B7  C9                	RET
68B8                    	XTEXT	RTL2
68B8                    	SPACE	4,10
                        **	$RTL - READ TEXT LINE.
                        *
                        *	$RTL READS A LINE FROM THE TERMINAL.
                        *
                        *	CHARACTER ARE ACCEPTED FROM THE TERMINAL, RUBOUT AND BACKSPACE
                        *	CHARACTERS ARE PROCESSED. WHEN A CARRIAGE RETURN IS ENTERED,
                        *	$RTL RETURNS.
                        *
                        *	IF USER SETS:
                        *
                        *	$MULTI	EQU	0
                        *
                        *	THEN USER CAN ENTER MULTIPLE COMMANDS ON ONE
                        *	LINE SEPERATED BY A '\'
                        *
                        *	ENTRY	(HL) = BUFFER FWA
                        *	EXIT	'C' CLEAR IF OK
                        *		 DATA IN BUFFER
                        *		 (A) = TEXT LENGTH
                        *		'C' SET IF CTL-D STRUCK
                        *	USES	A,F

68B8  CD BF68           $RTL.	CALL	$RTL	;$RTL IN UPPER CASE
68BB  D8                	RC			CTL-D
68BC  C3 9F68           	JMP	$MLU	;MAP LINE TO UPPER CASE

      = 68BF            $RTL	EQU	*
68BF  E5                	PUSH	H	;SAVE FWA

      = 68C0            $RTL1	EQU	*
                        	IF	$BATCH
                        	ENDIF

68C0  FF 01             $RTLX	SCALL	.SCIN	;READ CHARACTER
68C2  DA C068           	JC	$RTLX

68C5  FE 04             $RTLXX	CPI	CTLD
68C7  CA DC68           	JE	$RTL4	;CTL-D STRUCK
68CA  77                	MOV	M,A
68CB  23                	INX	H

                        	IF	$BATCH
                        	ENDIF

                        	IF	$MULTI
                        	ENDIF

68CC  FE 0A             	CPI	NL
68CE  C2 C068           	JNE	$RTL1
68D1  2B                $RTL2	DCX	H
68D2  36 00             	MVI	M,0
68D4  23                	INX	H

                        *	ALL DONE. COMPUTE LENGTH

68D5  EB                $RTL3	XCHG			(DE);= LWA+1
68D6  E3                	XTHL			(HL);= FWA
68D7  7B                	MOV	A,E
68D8  95                	SUB	L	;(A) = LENGTH
68D9  A7                	ANA	A	;CLEAR CARRY
68DA  D1                	POP	D	;RESTORE (DE)
68DB  C9                	RET

                        *	CTL-D STRUCK

68DC  CD 5E19           $RTL4	CALL	$TYPTX
68DF  5E448A            	DB	'^D',ENL
68E2  E1                	POP	H	;(HL) = FWA
68E3  37                	STC
68E4  C9                	RET
68E5                    	XTEXT	SOB
68E5                    	SPACE	4,10
                        **	$SOB - SKIP OVER BLANKS.
                        *
                        *	$SOB IS CALLED TO SKIP AN ARBITRARILY LONG STRING OF BLANKS AND TABS.
                        *
                        *	ENTRY	(HL) = FWA OF (POSSIBLE) BLANK STRING
                        *	EXIT	(HL) = LWA+1 OF BLANK STRING (UNCHANGED IF NO BLANKS)
                        *		(A) = FIRST NON-BLANK, NON-TAB CHARACTER EEN
                        *	USES	A,F,H,L

68E5  2B                $SOB	DCX	H			; PRE-DECREMENT
68E6  23                $SOB1	INX	H
68E7  7E                	MOV	A,M
68E8  FE 20             	CPI	' '
68EA  CA E668           	JE	$SOB1			; GOT BLANK
68ED  FE 09             	CPI	TAB
68EF  CA E668           	JE	$SOB1			; GOT TAB
68F2  C9                	RET
68F3                    	XTEXT	TFNS
68F3                    	SPACE	4,10
                        **	TFNS - TYPE FILE NAME PADDED WITH SPACES			/3.0a/
                        *
                        *	TFNS TYPES THE FILE WHOSE NAME IS LOCATED AT PIO.DEV
                        *	NULLS ARE PRINTED AS SPACES SO FILE NAMES LINE UP PRETTY
                        *
                        *	OPTIONAL ENTRY AT 'TFNS.' WITH HL POINTING TO STANDARD
                        *	FORMAT FILE NAME
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,B,H,L

68F3  21 EB73           TFNS	LXI	H,PIO.DEV

68F6  06 03             TFNS.	MVI	B,3	;TYPE DEVICE
68F8  CD 0A69           	CALL	TFNS1
68FB  CD 5E19           	CALL	$TYPTX	;TYPE ':'
68FE  BA                	DB	':'+EOL

68FF  06 08             	MVI	B,8	;TYPE FILE NAME
6901  CD 0A69           	CALL	TFNS1
6904  CD 5E19           	CALL	$TYPTX	;TYPE '.'
6907  AE                	DB	'.'+EOL

6908  06 03             	MVI	B,3	;TYPE EXTENSION
690A  7E                TFNS1	MOV	A,M
690B  A7                	ANA	A
690C  C2 1169           	JNZ	TFNS2
690F  3E 20             	MVI	A,' '
6911  FF 02             TFNS2	SCALL	.SCOUT
6913  23                	INX	H
6914  05                	DCR	B
6915  C2 0A69           	JNZ	TFNS1
6918  C9                	RET
6919                    	XTEXT	TYPCC
6919                    	SPACE	4,10
                        **	$TYPCC - TYPE A CHARACTER STRING BY COUNT.
                        *
                        *	$TYPCC TYPES A STRING OF CHARACTERS. THE CALLER SUPPLIES
                        *	THE CHARACTER ADDRESS AND COUNT.
                        *
                        *	ENTRY	(HL) = ADDRESS
                        *		(A) = COUNT
                        *	EXIT	(HL) = LAST CHARACTER ADDRESS+1
                        *	USES	A,F,H,L

      = 6919            $TYPCC	EQU	*

6919  A7                	ANA	A
691A  C8                	RZ				; NOTHING TO TYPE
691B  F5                	PUSH	PSW			; SAVE COUNT
691C  7E                	MOV	A,M			; (A) = CHARACTER
691D  23                	INX	H
691E  FF 02             	SCALL	.SCOUT
6920  F1                	POP	PSW
6921  3D                	DCR	A
6922  C3 1969           	JMP	$TYPCC
6925                    	XTEXT	CRLF
6925                    CRLF	SPACE	4,10
                        **	$CRLF - TYPE CARRIAGE RETURN/ LINE FEED
                        *
                        *	$CRLF IS USED TO GENERATE PADDED CRLF'S.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(A) = 0
                        *	USES	A,F

6925  3E 0A             $CRLF	MVI	A,NL
6927  FF 02             	SCALL	.SCOUT
6929  AF                	XRA	A
692A  C9                	RET
692B                    	XTEXT	CPDEHL
692B                    	SPACE	4,10
                        ***	CPDEHL - Compare (HL) to (DE)
                        *
                        *	Entry:	NONE
                        *	Exit:	'C' Set if (HL) < (DE)
                        *		'Z' Set if (HL) = (DE)
                        *		 else (HL) > (DE)
                        *	Uses:	A,F

692B  7C                CPDEHL	MOV	A,H
692C  BA                	CMP	D
692D  C0                	RNZ
692E  7D                	MOV	A,L
692F  BB                	CMP	E
6930  C9                	RET
6931                    	XTEXT	INDLB
6931                    	SPACE	4,10
                        **	$INDLB	-  INDEXED LOAD BYTE
                        *
                        *	BYTE INDEXED LOAD PRIMITIVE
                        *
                        *	ENTRY:	HL	= BASE ADDRESS
                        *		(RET)	= FULL WORD RELOCATION
                        *
                        *	EXIT:	A	= ( HL + (RET) )
                        *
                        *	USES:	A

6931  EB                $INDLB	XCHG			DE;= BASE
6932  E3                	XTHL			SAVE ;.DE.
6933  D5                	PUSH	D	;SAVE  BASE
6934  C5                	PUSH	B	;SAVE  .BC.

6935  4E                	MOV	C,M
6936  23                	INX	H
6937  46                	MOV	B,M	;BC = OFFSET
6938  23                	INX	H	;HL =  .RET.

6939  EB                	XCHG			HL;= BASE
693A  09                	DAD	B	;HL = BASE + OFFSET
693B  7E                	MOV	A,M	;A  = ( BASE + OFFSET )
693C  EB                	XCHG			HL;=  .RET.

693D  C1                	POP	B	;RESTORE  .BC.
693E  D1                	POP	D	;RESTORE  BASE
693F  E3                	XTHL			HL;= .DE. ; (SP) = .RET.
6940  EB                	XCHG			DE;= .DE. ; HL = BASE
6941  C9                	RET
6942                    	XTEXT	ISDEHL
6942                    	SPACE	4,10
                        **	ISDEHL	-  INDEXED STORE OF DE AT HL
                        *
                        *	STORE 'DE' AT THE ADDRESS POINTED TO BY 'HL', AND INCREMENT 'HL'
                        *	BY 2.
                        *
                        *	ENTRY:	DE = VALUE
                        *		HL = ADDRESS OF VALUE
                        *	EXIT:	(HL) = DE
                        *		HL = HL + 2
                        *	USES:	HL

6942  73                ISDEHL	MOV	M,E
6943  23                	INX	H
6944  72                	MOV	M,D
6945  23                	INX	H
6946  C9                	RET
6947                    	XTEXT	CAD
6947                    	SPACE	4,10
                        **	$CAD - CODE AUGUSTAN DATE.
                        *
                        *	$CAD IS CALLED TO CODE AN AUGUSTAN DATE INTO THE FORM:
                        *
                        *
                        *	----------------------------------------
                        *	I  0  I  6 BITS  I  4 BITS  I  5 BITS  I
                        *	----------------------------------------
                        *		YEAR-70       MON       DAY
                        *		 1-63        1-12       1-31
                        *
                        *	FROM THE FORM:
                        *
                        *	DD-MMM-YY
                        *
                        *	Optional partial forms: 				/3.0a/
                        *
                        *	DD-MMM		If same year				/3.0a/
                        *	DD		If same month and year			/3.0a/
                        *
                        *	Rest of date is filled in from the S.DATE system area	/3.0a/
                        *
                        *	ENTRY	(HL) = ADDRESS OF STRING
                        *	EXIT	'C' CLEAR IF OK
                        *		 (DE) = 15 BIT VALUE
                        *		 (HL) ADVANCED PAST '-YY' or Short Form Date if Used
                        *		'C' SET IF ERROR
                        *	USES	ALL

6947  E5                $CAD	PUSH	H
6948  0E 07             	MVI	C,$CADBL
694A  11 376A           	LXI	D,$CADB
694D  CD 3018           	CALL	$COMP
6950  C2 5969           	JNZ	$CAD0	;Is not 'No-Date'
6953  D1                	POP	D
6954  11 0000           	LXI	D,0	;0  =>  No Date
6957  A7                	ANA	A	;Clear 'C'
6958  C9                	RET

6959  E1                $CAD0	POP	H
695A  CD E56A           	CALL	$DDD	;DECODE DECIMAL DIGITS
695D  D8                	RC			ERROR
695E  7A                	MOV	A,D
695F  A7                	ANA	A
6960  37                	STC			ASSUME;TOO LARGE
6961  C0                	RNZ			TOO;LARGE
6962  7B                	MOV	A,E
6963  A7                	ANA	A
6964  37                	STC
6965  C8                	RZ			TOO;SMALL FOR DD
6966  FE 20             	CPI	32
6968  3F                	CMC	
6969  D8                	RC			TOO;LARGE
696A  EB                	XCHG			(HL);= DAY
696B  3E 20             	MVI	A,100000B
696D  85                	ADD	L
696E  6F                	MOV	L,A	;COUNT 1ST MONTH
696F  EB                	XCHG			(DE);= DD*16+1, (HL) = ADDRESS

                        *	DECODE MONTH

6970  D5                	PUSH	D	;SAVE DD*16+1
6971  3E C9             	MVI	A,311Q	;RET Code			/3.0a/
6973  32 FF69           	STA	CADR	;Assume whole DATE given 	/3.0a/
6976  7E                	MOV	A,M
6977  FE 2D             	CPI	'-'
6979  CA A169           	JE	CAD.M	;OK so far			/3.0a/
697C  CD 046A           	CALL	$CADD	;Is it end of entry ?		/3.0a/
697F  C2 C169           	JNZ	$CAD2	;FORMAT ERROR

6982  22 016A           	SHLD	CADHL	;Given ONLY day, save (HL)	/3.0a/
6985  AF                	XRA	A	;and poke NULL at end so 	|
6986  32 FF69           	STA	CADR	;(HL) gets restored		|
6989  21 C220           	LXI	H,S.DATE+3;Point at MMM-YY in system	|
698C  11 3E6A           	LXI	D,DBUF	;and copy it to buffer		|
698F  0E 06             	MVI	C,6					;|
6991  7E                CADL	MOV	A,M					;|
6992  CD AF68           	CALL	$MCU	;Map to upper case		|
6995  12                	STAX	D					;|
6996  23                	INX	H					;|
6997  13                	INX	D					;|
6998  0D                	DCR	C					;|
6999  C2 9169           	JNZ	CADL					;|
699C  AF                	XRA	A	;Mark end of string		|
699D  12                	STAX	D	;with a NULL byte		|
699E  21 3D6A           	LXI	H,DBUF-1;Point to buffer 		|

69A1  23                CAD.M	INX	H	;Bump pointer			/3.0a/
69A2  11 126A           	LXI	D,$CADA ;(DE) = MONTH TABLE ADDRESS
69A5  01 0300           $CAD1	LXI	B,3
69A8  E5                	PUSH	H	;SAVE TEXT ADDRESS, $CADA ADDRESS
69A9  D5                	PUSH	D
69AA  CD 3018           	CALL	$COMP	;COMPARE
69AD  D1                	POP	D	;(DE) = *$CADA* ADDRESS
69AE  CA C469           	JE	$CAD3	;GOT MONTH
69B1  E1                	POP	H	;(HL) = BUFFER ADDRESS OF MMM-YY
69B2  13                	INX	D
69B3  13                	INX	D
69B4  13                	INX	D	;TRY NEXT MONTH
69B5  E3                	XTHL
69B6  3E 20             	MVI	A,100000B
69B8  CD 4118           	CALL	$DADA.	;COUNT MONTH
69BB  E3                	XTHL
69BC  1A                	LDAX	D	;(A) = ENTRY IN $CADA
69BD  A7                	ANA	A
69BE  C2 A569           	JNZ	$CAD1	;MORE MONTHS TO GO

                        *	ERROR

69C1  E1                $CAD2	POP	H	;CLEAR STACK
69C2  37                	STC
69C3  C9                	RET			FLAG;ERROR

                        *	CRACK -YY

69C4  C1                $CAD3	POP	B	;DISCARD ADDRESS IF MMM-YY
69C5  7E                	MOV	A,M
69C6  FE 2D             	CPI	'-'
69C8  CA E469           	JE	CAD.Y	;OK So Far			/3.0a/
69CB  CD 046A           	CALL	$CADD	;Is it end of entry ?		/3.0a/
69CE  C2 C169           	JNZ	$CAD2	;FORMAT ERROR

69D1  22 016A           	SHLD	CADHL	;Given all but year, save (HL)	/3.0a/
69D4  AF                	XRA	A	;and poke NULL at end so (HL)	|
69D5  32 FF69           	STA	CADR	;gets restored			|
69D8  32 406A           	STA	DBUF+2	;Mark end of number with NULL	|
69DB  2A C620           	LHLD	S.DATE+7;Get ascii year from system	|
69DE  22 3E6A           	SHLD	DBUF	;and put it in buffer		|
69E1  21 3D6A           	LXI	H,DBUF-1;Point to buffer 		|

69E4  23                CAD.Y	INX	H	;Bump pointer			/3.0a/
69E5  CD E56A           	CALL	$DDD	;DECODE DECIMAL DIGITS
69E8  DA C169           	JC	$CAD2	;IF ERROR
69EB  7A                	MOV	A,D
69EC  A7                	ANA	A
69ED  C2 C169           	JNZ	$CAD2	;ERROR
69F0  7B                	MOV	A,E	;(A) = YEAR
69F1  D6 46             	SUI	70	;SUBTRACT DISPLACEMENT
69F3  DA C169           	JC	$CAD2	;ERROR
69F6  FE 3F             	CPI	63
69F8  D2 C169           	JNC	$CAD2	;TOO LARGE
69FB  D1                	POP	D	;(DE) = MONTH AND DAY
69FC  87                	ADD	A	;(A) = YEAR*2
69FD  82                	ADD	D
69FE  57                	MOV	D,A	;MERGE WITH REST OF IT

69FF  C9                CADR	RET			or;NOP if we must restore (HL)	/3.0a/
6A00  21 0000           	LXI	H,*-*					;|
      = 6A01            CADHL	EQU	*-2					;/3.0a/
6A03  C9                	RET

6A04  A7                $CADD	ANA	A	;CHECK FOR A VALID DELIMITER	/3.0a/
6A05  C8                	RZ			NULL			;|
6A06  FE 2F             	CPI	'/'					;|
6A08  C8                	RE			SLASH			;|
6A09  FE 20             	CPI	' '					;|
6A0B  C8                	RE			SPACE			;|
6A0C  FE 09             	CPI	TAB					;|
6A0E  C8                	RE			TAB			;|
6A0F  FE 2C             	CPI	','					;|
6A11  C9                	RET			COMMA			;/3.0a/

6A12   (0000)           $CADA	DS	0	;TABLE OF MONTHS
6A12  4A414E46 45424D41 	DB	'JAN','FEB','MAR','APR','MAY','JUN'
6A1A  52415052 4D41594A
6A22  554E
6A24  4A554C41 55475345 	DB	'JUL','AUG','SEP','OCT','NOV','DEC'
6A2C  504F4354 4E4F5644
6A34  4543
6A36  00                	DB	0

6A37  4E4F2D44 415445   $CADB	DB	'NO-DATE'
      = 0007            $CADBL	EQU	*-$CADB

6A3E  4D4D4D2D 595900   DBUF	DB	'MMM-YY',0	  ;Date Buffer for Partials	/3.0a/
6A45                    	XTEXT	DAD
6A45                    	SPACE	4,10
                        **	$DAD - DECODE AUGUSTAN DATE.
                        *
                        *	$DAD DECODES A 15 BIT DATE CODE OF THE FORMAT:
                        *
                        *	----------------------------------------
                        *	I  0  I  6 BITS  I  4 BITS  I  5 BITS  I
                        *	----------------------------------------
                        *		YEAR-70       MON       DAY
                        *		 1-63        1-12       1-31
                        *
                        *	TO THE FORM:
                        *
                        *	DD-MMM-YY
                        *
                        *	ENTRY	(DE) = 15 BIT VALUE
                        *		(HL) = ADDRESS FOR DECODE
                        *	EXIT	(HL) = (HL)+9
                        *	USES	ALL

6A45  7A                $DAD	MOV	A,D
6A46  B3                	ORA	E
6A47  CA A66A           	JZ	DAD2	;No-Date

6A4A  22 9E6A           	SHLD	DAD1.	;Save HL in case of bad data

6A4D  42                	MOV	B,D
6A4E  4B                	MOV	C,E
6A4F  11 2000           	LXI	D,32
6A52  E5                	PUSH	H	;SAVE ADDRESS
6A53  CD 4618           	CALL	$DU66	;(DE) = DAY, (HL) = YEAR & MONTH
6A56  E3                	XTHL			(HL);= ADDRESS
6A57  42                	MOV	B,D
6A58  4B                	MOV	C,E
6A59  7B                	MOV	A,E
6A5A  A7                	ANA	A
6A5B  CA 9C6A           	JZ	DAD1X	;BAD VALUE
6A5E  3E 02             	MVI	A,2
6A60  CD 6F19           	CALL	$UDD	;UNPACK DAY
6A63  36 2D             	MVI	M,'-'
6A65  23                	INX	H
6A66  C1                	POP	B	;(BC) = YEAR & MONTH
6A67  11 1000           	LXI	D,16
6A6A  E5                	PUSH	H	;SAVE ADDRESS
6A6B  CD 4618           	CALL	$DU66
6A6E  E3                	XTHL			(HL);= ADDRESS, ((SP)) = YEAR
6A6F  7B                	MOV	A,E
6A70  87                	ADD	A
6A71  83                	ADD	E	;(A) = 3*MONTH
6A72  CA 9C6A           	JZ	DAD1X	;BAD VALUE
6A75  FE 27             	CPI	13*3
6A77  D2 9C6A           	JNC	DAD1X	;TOO LARGE
6A7A  EB                	XCHG			(DE);= ADDRESS
6A7B  21 AC6A           	LXI	H,DADB-3
6A7E  CD 4118           	CALL	$DADA.	;(HL) = ADDRESS OF MONTH
6A81  01 0300           	LXI	B,3
6A84  EB                	XCHG			(HL);= BUFFER ADDR, (DE) = ADDR IN 'DADB'
6A85  CD AA18           	CALL	$MOVE	;MOVE MONTH IN
6A88  36 2D             	MVI	M,'-'
6A8A  23                	INX	H
6A8B  C1                	POP	B	;(BC) = YEAR
6A8C  79                	MOV	A,C
6A8D  C6 46             	ADI	70
6A8F  FE 64             	CPI	100
6A91  D2 9D6A           	JNC	DAD1	;TOO LARGE
6A94  4F                	MOV	C,A	;(BC) = YEAR
6A95  3E 02             	MVI	A,2
6A97  CD 6F19           	CALL	$UDD	;UNPACK YEAR
6A9A  A7                	ANA	A
6A9B  C9                	RET

                        *	ILLEGAL FORMAT

6A9C  E1                DAD1X	POP	H	;RESTORE STACK
6A9D  21 0000           DAD1	LXI	H,*-*
      = 6A9E            DAD1.	EQU	*-2
6AA0  11 DC6A           	LXI	D,DADCX
6AA3  C3 A96A           	JMP	DAD3

                        *	No-Date

6AA6  11 D36A           DAD2	LXI	D,DADC
6AA9  01 0900           DAD3	LXI	B,DADCL
6AAC  C3 AA18           	JMP	$MOVE

6AAF  4A616E46 65624D61 DADB	DB	'Jan','Feb','Mar','Apr','May','Jun'
6AB7  72417072 4D61794A
6ABF  756E
6AC1  4A756C41 75675365 	DB	'Jul','Aug','Sep','Oct','Nov','Dec'
6AC9  704F6374 4E6F7644
6AD1  6563

6AD3  3C4E6F2D 44617465 DADC	DB	'<No-Date>'
6ADB  3E
      = 0009            DADCL	EQU	*-DADC

6ADC  3F3F2D3F 3F3F2D3F DADCX	DB	'??-???-??'
6AE4  3F
                        	ERRNZ	*-DADCX-DADCL
6AE5                    	XTEXT	DDD
6AE5                    	SPACE	4,10
                        **	$DDD - DECODE DECIMAL DIGITS.
                        *
                        *	$DDD DECODES A STRING OF DECIMAL DIGITS INTO A DECIMAL INTEGER.
                        *
                        *	THE CHARACTERS ARE TAKEN OUT OF MEMORY. CONVERSION STOPS WITH THE
                        *	FIRST NON-DIGIT CHARACTER FOUND.
                        *
                        *	ENTRY	(HL) = ADDRESS OF CHARACTERS
                        *	EXIT	'C' CLEAR IF OK
                        *		 (DE) = NUMBER
                        *		 (HL) = INDEX OF FIRST NON-DIGIT ENCOUNTERED
                        *		'C' SET IF ERROR
                        *	USES	A,F,D,E,H,L

6AE5  11 0000           $DDD	LXI	D,0			; (DE) = ACCUM

6AE8  7E                $DDD1	MOV	A,M
6AE9  D6 30             	SUI	'0'
6AEB  3F                	CMC
6AEC  D0                	RNC				; TOO SMALL
6AED  FE 0A             	CPI	10
6AEF  D0                	RNC				; TOO LARGE
6AF0  23                	INX	H			; ADVANCE ADDRESS
6AF1  E5                	PUSH	H			; SAVE (HL)
6AF2  CD D418           	CALL	$MU10			; (HL) = ACCUM*10
6AF5  EB                	XCHG				; (DE) = ACCUM
6AF6  E1                	POP	H			; (HL) = ADDRESS OF STRING
6AF7  D8                	RC				; OVERFLOW
6AF8  83                	ADD	E
6AF9  5F                	MOV	E,A
6AFA  3E 00             	MVI	A,0
6AFC  8A                	ADC	D
6AFD  57                	MOV	D,A
6AFE  D2 E86A           	JNC	$DDD1			; NOT OVERFLOW
6B01  C9                	RET
6B02                    	XTEXT	UDDX
6B02                    	SPACE	4,10
                        **	$UDDX - UNPACK DECIMAL DIGITS.					/3.0/
                        *
                        *	UDDX CONVERTS A 16 BIT VALUE INTO A SPECIFIED NUMBER OF DECIMAL
                        *	DIGITS.
                        *
                        *	$UDDN = PAD WITH NULLS
                        *
                        *	$UDDS = PAD WITH SPACES
                        *
                        *	ENTRY	(B,C) = ADDRESS VALUE
                        *		(A) = DIGIT COUNT
                        *		(H,L) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + (A)
                        *	USES	ALL

      = 6B02            $UDDN	EQU	*

6B02  57                	MOV	D,A	;SAVE (A)
6B03  AF                	XRA	A	;(A) = NUL
6B04  C3 0A6B           	JMP	$UDDX

      = 6B07            $UDDS	EQU	*

6B07  57                	MOV	D,A	;SAVE (A)
6B08  3E 20             	MVI	A,' '	;(A) = SPACE

6B0A  32 356B           $UDDX	STA	UDDPAD	;SET PAD CHARACTER
6B0D  7A                	MOV	A,D	;RESTORE (A)
6B0E  CD 3A18           	CALL	$DADA
6B11  E5                	PUSH	H	;SAVE FINAL (H,L) VALUE

6B12  F5                UDDX1	PUSH	PSW
6B13  E5                	PUSH	H
6B14  11 0A00           	LXI	D,10
6B17  CD 4618           	CALL	$DU66	;(H,L) = VALUE/10
6B1A  44                	MOV	B,H
6B1B  4D                	MOV	C,L	;(BC) = QUOTIENT
6B1C  E1                	POP	H
6B1D  3E 30             	MVI	A,'0'
6B1F  83                	ADD	E	;ADD REMAINDER
6B20  2B                	DCX	H
6B21  77                	MOV	M,A	;STORE DIGIT
6B22  78                	MOV	A,B
6B23  B1                	ORA	C
6B24  CA 2E6B           	JZ	UDDX2	;ALL ZEROS
6B27  F1                	POP	PSW
6B28  3D                	DCR	A
6B29  C2 126B           	JNZ	UDDX1	;IF MORE TO GO

                        *	ALL DONE. EXIT

6B2C  E1                UDDX1.5	POP	H	;RESTORE H
6B2D  C9                	RET			RETURN

                        *	DIGITS LEADING THIS ONE ARE ZERO. STORE NULLS INSTEAD.

6B2E  F1                UDDX2	POP	PSW
6B2F  3D                UDDX3	DCR	A
6B30  CA 2C6B           	JE	UDDX1.5 ;ALL DONE
6B33  2B                	DCX	H
6B34  36 00             	MVI	M,0
      = 6B35            UDDPAD	EQU	*-1
6B36  C3 2F6B           	JMP	UDDX3
6B39                    	XTEXT	UOW
6B39                    	SPACE	4,8
                        **	$UOW - UNPACK OCTAL WORD
                        *
                        *	ENTRY	(BC) = VALUE
                        *		(HL) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + 6
                        *	USES	A,F,H,L
                        *
6B39                    	SPACE	3,8
                        **	$UOW. - UNPACK OCTAL WORD (ADD '.' BETWEEN BYTES)
                        *
                        *	ENTRY	(BC) = VALUE
                        *		(HL) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + 7
                        *	USES	A,F,H,L
                        *
6B39                    	SPACE	3,10
                        **	$UOB - UNPACK OCTAL BYTE
                        *
                        *	ENTRY	(A) = VALUE
                        *		(HL) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + 3
                        *	USES	A,F,H,L

6B39  78                $UOW	MOV	A,B
6B3A  CD 486B           	CALL	$UOB
6B3D  C3 476B           	JMP	UOW1

6B40  78                $UOW.	MOV	A,B			; GET MSB
6B41  CD 486B           	CALL	$UOB
6B44  36 2E             	MVI	M,'.'			; FOR SHOW
6B46  23                	INX	H

6B47  79                UOW1	MOV	A,C			; GET LSB

6B48  A7                $UOB	ANA	A			; CLEAR CARRY
6B49  CD 4F6B           	CALL	UOD
6B4C  CD 4F6B           	CALL	UOD

                        *	UNPACK OCTAL DIGIT

6B4F  17                UOD	RAL				; ROTATE DIGIT INTO PLACE
6B50  17                	RAL
6B51  17                	RAL
6B52  F5                	PUSH	PSW
6B53  E6 07             	ANI	00000111B		; MASK OFF EXCESS
6B55  C6 30             	ADI	'0'			; MAKE IT ASCII
6B57  77                	MOV	M,A			; POKE DIGIT
6B58  23                	INX	H			; BUMP POINTER
6B59  F1                	POP	PSW
6B5A  C9                	RET
6B5B                    	XTEXT	UHW
6B5B                    	SPACE	4,8
                        **	$UHW - UNPACK HEXADECIMAL WORD
                        *
                        *	ENTRY	(BC) = VALUE
                        *		(HL) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + 4
                        *	USES	A,F,H,L
                        *
6B5B                    	SPACE	3,10
                        **	$UHB - UNPACK HEXADECIMAL BYTE
                        *
                        *	ENTRY	(A) = VALUE
                        *		(HL) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + 2
                        *	USES	A,F,H,L

6B5B  78                $UHW	MOV	A,B			; GET MSB
6B5C  CD 606B           	CALL	$UHB
6B5F  79                	MOV	A,C			; GET LSB

6B60  F5                $UHB	PUSH	PSW
6B61  1F                	RAR				; ROTATE DIGIT INTO PLACE
6B62  1F                	RAR
6B63  1F                	RAR
6B64  1F                	RAR
6B65  CD 696B           	CALL	NIBL
6B68  F1                	POP	PSW
6B69  E6 0F             NIBL	ANI	00001111B		; MASK OFF EXCESS
6B6B  C6 90             	ADI	90H			; MAKE IT 0 THRU F
6B6D  27                	DAA
6B6E  CE 40             	ACI	40H
6B70  27                	DAA				; MAKE IT ASCII
6B71  77                	MOV	M,A			; POKE DIGIT
6B72  23                	INX	H			; BUMP POINTER
6B73  C9                	RET
6B74                    	XTEXT	MOVEL
6B74                    	SPACE	4,10
                        **	$MOVEL - MOVE DATA
                        *
                        *	$MOVEL MOVES A BLOCK OF BYTES TO A NEW MEMORY ADDRESS.
                        *	IF THE MOVE IS TO A LOWER ADDRESS, THE BYTES ARE MOVED FROM
                        *	FIRST TO LAST.
                        *
                        *	IF THE MOVE IS TO A HIGHER ADDRESS, THE BYTES ARE MOVED FROM
                        *	LAST TO FIRST.
                        *
                        *	THIS IS DONE SO THAT AN OVERLAPED MOVE WILL NOT 'RIPPLE'.
                        *
                        *	CALL	$MOVEL
                        *	DW	COUNT
                        *	DW	FROM
                        *	DW	TO
                        *
                        *	ENTRY	((SP)) = RET
                        *		(RET+0) = COUNT (WORD VALUE)
                        *		(RET+2) = FROM
                        *		(RET+4) = TO
                        *	EXIT	TO (RET+6)
                        *		(DE) = ADDRESS OF NEXT FROM BYTE
                        *		(HL) = ADDRESS OF NEXT *TO* BYTE
                        *		'C' CLEAR
                        *	USES	ALL

6B74  E1                $MOVEL	POP	H			; (HL) = RET
6B75  4E                	MOV	C,M
6B76  23                	INX	H
6B77  46                	MOV	B,M			; (BC) = COUNT
6B78  23                	INX	H
6B79  5E                	MOV	E,M
6B7A  23                	INX	H
6B7B  56                	MOV	D,M			; (DE) = FROM
6B7C  23                	INX	H
6B7D  D5                	PUSH	D			; ((SP)) = FROM
6B7E  5E                	MOV	E,M
6B7F  23                	INX	H
6B80  56                	MOV	D,M			; (DE) = TO
6B81  23                	INX	H
6B82  E3                	XTHL				; ((SP)) = RET, (HL) = FROM
6B83  EB                	XCHG				; (DE) = FROM , (HL) = TO
6B84  C3 AA18           	JMP	$MOVE			; MOVE IT
6B87                    	XTEXT	DRS
6B87                    	SPACE	4,10
                        **	$DRS - DECODE AND REMOVE SWITCHES.
                        *
                        *	$DRS IS CALLED TO DECODE COMMAND SWITCHES FROM A LINE
                        *	OF TEXT. SWITCHES TAKE THE FORM:
                        *
                        *	/XXXXX
                        *
                        *	AFTER A SWITCH HAS BEEN LOCATED, IT (AND THE PRECEDING '/')
                        *	ARE REPLACED WITH BLANKS.
                        *
                        *	VALID SWITCH DESCRIPTIONS ARE ENCODED INTO A TABLE
                        *	SUPPLIED BY THE CALLER, IN THE FORMAT:
                        *
                        *	DB	'X...X'		REQUIRED SWITCH CHARACTERS
                        *	DB	'C'+200Q,...,'C'+200Q	OPTIONAL CHARACTERS
                        *	DB	200Q		END OF CHARACTERS
                        *	DW	ADDR		PROCESSOR ADDRESS (CALLED WHEN SWITCH DETECTED)
                        *
                        *	DB	'Y...Y'		NEXT SWITCH
                        *	.	 .
                        *	.	 .
                        *	.	 .
                        *
                        *	DB	0		FLAGS END OF TABLE
                        *
                        *	SWITCHES MUST BE FOLLOWED BY A ':', A '/' (ANOTHER SWITCH)
                        *	A ',', OR A 00 BYTE.
                        *
                        *	UPON DETECTION OF A VALID SWITCH, $DRS CALLS THE USER PROCESS
                        *	ROUTINE. UPON ENTRY,
                        *	(HL) = ADDRESS OF THE FIRST BYTE FOLLOWING THE SWTICH
                        *	'Z' CLEAR IF CHARACTER = '/', ',', OR 00
                        *	'Z' SET IF CHARACTER = ':'
                        *
                        *	THE USER ROUTINE CAN DECODE SWITCH SUB-OPTIONS, IF DESIRED.
                        *	THE USER ROUTINE MAY USE ALL REGISTERS.
                        *
                        *	ENTRY	(DE) = SWITCH TABLE FWA
                        *		(HL) = LINE FWA
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *		 (HL) = ADDRESS OF START OF BAD SWITCH
                        *		 (A) = ERROR CODE
                        *	USES	ALL

      = 6B87            $DRS	EQU	*

                        *	LOOK FOR SWITCHES

6B87  7E                $DRS1	MOV	A,M
6B88  A7                	ANA	A
6B89  C8                	RZ			END;OF LINE
6B8A  23                	INX	H
6B8B  FE 2F             	CPI	'/'
6B8D  C2 876B           	JNE	$DRS1	;NOT A SWITCH
6B90  22 0C6C           	SHLD	$DRSB	;($DRSB) = SWITCH FWA (AFTER '/')

                        *	GOT A SWITCH. LOOK FOR A MATCH IN THE CALLER'S TABLE

6B93  D5                	PUSH	D	;SAVE TABLE FWA
6B94  2A 0C6C           $DRS2	LHLD	$DRSB	;(HL) = SWITCH FWA
6B97  1A                $DRS3	LDAX	D	;(A) = TABLE ENTRY
6B98  E6 7F             	ANI	177Q
6B9A  CA C26B           	JZ	$DRS6	;GOT A MATCH
6B9D  BE                	CMP	M
6B9E  C2 A66B           	JNE	$DRS4	;NO MATCH
6BA1  13                	INX	D
6BA2  23                	INX	H
6BA3  C3 976B           	JMP	$DRS3	;SEE IF MORE MATCH

                        *	HAVE MIS-MATCH. SEE IF THE MISSING CHARACTER IS SIGNIFICANT

6BA6  7E                $DRS4	MOV	A,M	;(A) = LINE CHARACTER WE COULDNT MATCH
6BA7  CD EA6B           	CALL	$DRS15	;SEE IF OK TERMINATOR
6BAA  C2 B26B           	JNE	$DRS4.5	;NO MATCH ON THIS SWITCH
6BAD  1A                	LDAX	D	;(A) = NEXT CHARACTER IN SWITCH PATTERN
6BAE  A7                	ANA	A
6BAF  FA C26B           	JM	$DRS6	;HAVE SUFFICIENT MATCH
6BB2  CD FE6B           $DRS4.5	CALL	$DRS20	;SKIP TABLE ENTRY
6BB5  1A                	LDAX	D
6BB6  A7                	ANA	A
6BB7  C2 946B           	JNZ	$DRS2	;MORE SWITCHES IN TABLE TO CHECK

                        *	BAD SWITCH

6BBA  D1                $DRS5	POP	D	;RESTORE STACK
6BBB  2A 0C6C           	LHLD	$DRSB	;POINT TO BAD SWITCH
6BBE  37                	STC
6BBF  3E 1A             	MVI	A,EC.IS	;ILLEGAL SWITCH
6BC1  C9                	RET

                        *	HAVE SWITCH. CHECK IT'S FOLLOWING CHARACTER

6BC2  CD E568           $DRS6	CALL	$SOB	;SKIP OVER BLANKS
6BC5  CD EA6B           	CALL	$DRS15	;CHECK CHARACTER
6BC8  C2 BA6B           	JNE	$DRS5	;IN ERROR
6BCB  CD FE6B           	CALL	$DRS20	;GET PROCESSOR ADDRESS
6BCE  11 D86B           	LXI	D,$DRS7
6BD1  E5                	PUSH	H	;SAVE (HL)
6BD2  D5                	PUSH	D	;SET RETURN ADDRESS FOR TABLE CODE
6BD3  C5                	PUSH	B	;SAVE PROCESSOR ADDRESS
6BD4  7E                	MOV	A,M	;(A) = NEXT CHARACTER
6BD5  FE 3A             	CPI	':'	;SET CONDITION CODES
6BD7  C9                	RET			CALL;USER PROCESS

                        *	USER PROCESS RETURNS HERE

6BD8  D1                $DRS7	POP	D	;(DE) = LAST CHARACTER OF SWITCH+1
6BD9  2A 0C6C           	LHLD	$DRSB	;(HL) = FIRST CHARACTER OF SWITCH AFTER /
6BDC  2B                	DCX	H	;(HL) = ADDRESS OF '/'

                        *	REPLACE SWITCH WITH BLANKS

6BDD  36 20             $DRS8	MVI	M,' '
6BDF  23                	INX	H
6BE0  CD 8E18           	CALL	$CDEHL
6BE3  C2 DD6B           	JNE	$DRS8	;NOT THERE YET
6BE6  D1                	POP	D	;(DE) = SWITCH TABLE FWA
6BE7  C3 876B           	JMP	$DRS1	;LOOK FOR MORE SWITCHES
6BEA                    	SPACE	2,10
                        **	$DRS15 - CHECK FOR VALID DELIMITER CHARACTER.
                        *
                        *	$DRS15 CHECKS THE NEXT TEXT CHARACTER TO SEE IF IT IS
                        *
                        *	00, '/', ' ', TAB, ',', ':'
                        *
                        *	ENTRY	(A) = CHARACTER
                        *	EXIT	'Z' SET IF CHARACTER IS ONE OF THE ABOVE
                        *	USES	F

6BEA  A7                $DRS15	ANA	A
6BEB  C8                	RZ			IS;00
6BEC  FE 2F             	CPI	'/'
6BEE  C8                	RE
6BEF  FE 20             	CPI	' '						;/3.0a/
6BF1  C8                	RE								/
6BF2  FE 09             	CPI	TAB						;/
6BF4  C8                	RE								/3.0a/
6BF5  FE 2C             	CPI	','
6BF7  C8                	RE
6BF8  FE 3A             	CPI	':'
6BFA  C8                	RE
6BFB  FE 3D             	CPI	'='						;/3.0a/
6BFD  C9                	RET
6BFE                    	SPACE	2,10
                        **	$DRS20 - GET PROCESSOR ADDRESS.
                        *
                        *	$DRS20 IS CALLED TO GET THE PROCESSOR ADDRESS FIELD OUT OF
                        *	AN ENTRY IN THE SWITCH TABLE. THE CALLER SUPPLIES A POINTER
                        *	TO SOMEWHERE IN THE TEXT PART OF THE SWITCH DESCRIPTION;
                        *	$DRS20 ADVANCES THE POINTER TO THE PROCESSOR ADDRESS.
                        *
                        *	ENTRY	(DE) = POINTER TO TEXT PART OF SWITCH ENTRY
                        *	EXIT	(DE) = POINTER TO 1ST BYTE OF NEXT SWITCH TABLE ENTRY
                        *		(BC) = PROCESSOR ADDRESS FROM TABLE
                        *	USES	A,F,B,C,D,E

6BFE  1A                $DRS20	LDAX	D
6BFF  13                	INX	D
6C00  FE 80             	CPI	200Q
6C02  C2 FE6B           	JNE	$DRS20
6C05  1A                	LDAX	D	;(A) = LOW BYTE OF PROCESSOR ADDRESS
6C06  4F                	MOV	C,A
6C07  13                	INX	D
6C08  1A                	LDAX	D
6C09  47                	MOV	B,A	;(BC) = PROCESSOR ADDRESS
6C0A  13                	INX	D
6C0B  C9                	RET

6C0C  0000              $DRSB	DW	0	;POINTER TO SWITCH BEING PROCESSED
6C0E                    	XTEXT	DFSS
6C0E                    	SPACE	4,10
                        **	DFSS - DECODE FLAG SUB-SWITCHES 			/3.0a/
                        *
                        *	DFSS IS CALLED TO DECODE THE SPECIFIED FLAG SUB-SWITCHES FOR
                        *	THE /FLAG: AND THE /NOFLAG: SWITCHES.
                        *
                        *	DFSS. IS CALLED TO DECODE THE SPECIFIED USER SUB-SWITCHES FOR
                        *	THE /USER: AND THE /NOUSER: SWITCHES.
                        *
                        *	THE SUB-SWITCHES ARE ANALYZED AND REPLACED WITH BLANKS
                        *
                        *	ENTRY:	(HL) = ADDRESS OF ':ff..'
                        *	EXIT:	'C' CLEAR IF OK
                        *		 (A) = BITS SET FOR EACH SPECIFIED OPTION
                        *		'C' SET IF ERROR
                        *	USES:	ALL

                        	IF	USER
                        	ELSE
      = 6C0E            DFSS	EQU	*
                        	ENDIF

6C0E  7E                	MOV	A,M	;(A) = SUPPOSED ':'
6C0F  FE 3A             	CPI	':'	;CHECK IT OUT
6C11  37                	STC
6C12  C0                	RNE			NOT;':'
6C13  EB                	XCHG			(DE);= ADDRESS
6C14  06 00             	MVI	B,0

                        *	DECODE NEXT SUB-SWITCH

6C16  3E 20             DFSS1	MVI	A,' '
6C18  12                	STAX	D	;CLEAR THAT ONE
6C19  13                	INX	D
6C1A  1A                	LDAX	D
6C1B  FE 20             	CPI	' '
6C1D  CA 166C           	JE	DFSS1	;SKIP
6C20  FE 2F             	CPI	'/'	;NEXT SWITCH
6C22  CA 3C6C           	JE	DFSS2	;DONE
6C25  FE 2C             	CPI	','	;DELIMITER
6C27  CA 3C6C           	JE	DFSS2	;DONE
6C2A  A7                	ANA	A	;END OF LINE
6C2B  CA 3C6C           	JE	DFSS2	;DONE

                        *	MUST BE A SUB-SWITCH

6C2E  21 426C           	LXI	H,DFSSA ;OPTION TABLE
      = 6C2F            DFTT	EQU	*-2
6C31  CD 5B68           	CALL	$TBLS
6C34  37                	STC
6C35  C0                	RNZ			NOT;A GOOD OPTION
6C36  7E                	MOV	A,M
6C37  B0                	ORA	B	;SET SUB-SWITCH
6C38  47                	MOV	B,A
6C39  C3 166C           	JMP	DFSS1	;GET ANOTHER

                        *	ALL DONE

6C3C  78                DFSS2	MOV	A,B
6C3D  A7                	ANA	A
6C3E  37                	STC
6C3F  C8                	RZ			NONE;FOUND, ERROR
6C40  A7                	ANA	A	;CLEAR CARRY
6C41  C9                	RET			GO;BACK WITH ALL OK

      = 6C42            DFSSA	EQU	*	;FLAG TABLE
6C42  5380              	DB	'S',DIF.SYS
6C44  4C40              	DB	'L',DIF.LOC
6C46  5720              	DB	'W',DIF.WP
6C48  4310              DFSSC	DB	'C',DIF.CNT
6C4A  4108              	DB	'A',DIF.ARC
6C4C  4204              	DB	'B',DIF.BAD
6C4E  4402              	DB	'D',DIF.DL
6C50  5501              	DB	'U',DIF.USR
6C52  2AEF              	DB	'*',11101111B;ALL BUT 'C'
6C54  0000              	DB	0,0

                        	IF	USER
                        	ENDIF
6C56                    	XTEXT	DSSS
6C56                    	SPACE	4,10
                        **	DSSS - DECODE SORT SUBSWITCH				/3.0a/
                        *
                        *	DSSS DECODES THE SORT SUBSWITCHES. ORDER IS IMPORTANT.
                        *	AFTER A SUBSWITCH IS PROCESSED IT IS MAPPED TO LOWER CASE
                        *	SO YOU CAN'T ASK FOR IT AGAIN THIS TIME THRU.
                        *
                        *	ENTRY:	(HL) = ADDRESS OF ':sssss'
                        *	EXIT:	'C' CLEAR IF OK
                        *		 SORTAB LOADED
                        *		'C' SET IF ERROR
                        *	USES:	ALL

      = 6C56            DSSS	EQU	*

6C56  EB                	XCHG			(DE);= ':sssss'
6C57  06 06             	MVI	B,SRTABL
6C59  21 D56C           	LXI	H,SORTAB
6C5C  CD 8A19           	CALL	$ZERO	;ZERO SORT TABLE

6C5F  0E 05             	MVI	C,5	;RESET *DSSST*
6C61  21 C96C           	LXI	H,DSSST
6C64  7E                DSSSL	MOV	A,M
6C65  E6 DF             	ANI	11011111B;MAP TO UPPER CASE
6C67  77                	MOV	M,A
6C68  23                	INX	H
6C69  23                	INX	H
6C6A  0D                	DCR	C
6C6B  C2 646C           	JNZ	DSSSL

6C6E  1A                	LDAX	D
6C6F  FE 3A             	CPI	':'
6C71  C2 C16C           	JNE	DEFSRT	;DEFAULT SORT
6C74  01 D56C           	LXI	B,SORTAB

                        *	DECODE NEXT SUBSWITCH

6C77  3E 20             DSSS1	MVI	A,' '
6C79  12                	STAX	D
6C7A  13                DSSS1.	INX	D
6C7B  1A                	LDAX	D
6C7C  FE 20             	CPI	' '
6C7E  CA 7A6C           	JE	DSSS1.	;SKIP
6C81  FE 52             	CPI	'R'	;FIELD REVERSE
6C83  CA A76C           	JE	DSSSR	;SET HI BIT
6C86  FE 2F             	CPI	'/'	;NEXT SWITCH
6C88  CA BC6C           	JE	DSSS2	;DONE
6C8B  FE 2C             	CPI	','	;DELIMITER
6C8D  CA BC6C           	JE	DSSS2	;DONE
6C90  A7                	ANA	A	;END OF LINE
6C91  CA BC6C           	JZ	DSSS2	;DONE

                        *	MUST BE A SUBSWITCH

6C94  21 C96C           	LXI	H,DSSST
6C97  CD 5B68           	CALL	$TBLS
6C9A  37                	STC
6C9B  C0                	RNZ			NOT;A GOOD OPTION
6C9C  7E                	MOV	A,M	;GET FIELD INDEX
6C9D  02                	STAX	B	;SAVE IT IN SORTAB
6C9E  03                	INX	B
6C9F  2B                	DCX	H	;POINT BACK TO SUBSWITCH
6CA0  7E                	MOV	A,M
6CA1  F6 20             	ORI	00100000B;MAP TO LOWER CASE SO CAN'T REPEAT IT
6CA3  77                	MOV	M,A
6CA4  C3 776C           	JMP	DSSS1	;GET ANOTHER

                        *	FIELD REVERSE

6CA7  0B                DSSSR	DCX	B
6CA8  0A                	LDAX	B
6CA9  B7                	ORA	A
6CAA  CA BA6C           	JZ	DSSSE	;CAN'T REV. NULL ENTRY
6CAD  E6 80             	ANI	200Q
6CAF  C2 BA6C           	JNZ	DSSSE	;ALREADY SAID 'R' ONCE
6CB2  0A                	LDAX	B
6CB3  F6 80             	ORI	200Q	;SET HI BIT
6CB5  02                	STAX	B
6CB6  03                	INX	B
6CB7  C3 776C           	JMP	DSSS1	;GET ANOTHER

6CBA  37                DSSSE	STC			ERROR
6CBB  C9                	RET

                        *	ALL DONE

6CBC  3A D56C           DSSS2	LDA	SORTAB
6CBF  A7                	ANA	A	;SEE IF ANYTHING THERE (ALSO, CLEAR CARRY)
6CC0  C0                	RNZ

6CC1  21 0102           DEFSRT	LXI	H,002001A;'NE'
6CC4  22 D56C           	SHLD	SORTAB
6CC7  AF                	XRA	A	;CLEAR CARRY
6CC8  C9                	RET

6CC9  4E01              DSSST	DB	'N',1	;FIVE LEGAL ENTRIES
6CCB  4502              	DB	'E',2
6CCD  4403              	DB	'D',3
6CCF  4104              	DB	'A',4
6CD1  4305              	DB	'C',5
6CD3  0000              	DB	0,0

                        *	SORTAB MUST BE PRECEEDED BY A NULL, WHICH WE FIND ABOVE.
6CD5  00000000 0000     SORTAB	DB	0,0,0,0,0,0;SIX BYTES
      = 0006            SRTABL	EQU	*-SORTAB
6CDB                    	XTEXT	SORT
6CDB                    	SPACE	4,10
                        **	$SORT - SORT FIXED LENGTH RECORDS ON MULTIPLE KEYS.	/3.0a/
                        *
                        *	SHELL/METZNER SORT ROUTINE
                        *	SORT THE ENTRIES BASED ON SORT TABLE
                        *
                        *	BEFORE ENTERING *SORT* USER MUST SET UP A FIELD TABLE
                        *	AND A SORT TABLE
                        *
                        *	FIELD TABLE DESCRIBES THE FIELDS IN EACH RECORD
                        *	FIELD TABLE TAKES THE FOLLOWING FORM:
                        *	(OFFSET FROM RECORD START),(LENGTH OF FIELD)
                        *
                        *	FIELDS	DB	0,8		FILENAME
                        *		DB	8,3		EXTENSION
                        *		DB	19,0		CREATION DATE
                        *		DB	21,0		LAST ACCESS DATE
                        *		DB	13,1		ACCESS COUNT
                        *
                        *	A FIELD LENGTH OF 0 TELLS $SORT THAT WE HAVE A TWO BYTE WORD
                        *	IN LO.HI FORMAT TO SORT ON. ANY OTHER LENGTH SIGNIFIES A STRING
                        *	OF CHARACTERS OR BYTES. MAXIMUM FIELD LENGTH IS, THEREFORE, 255.
                        *
                        *	SORT TABLE DESCRIBES WHICH FIELDS TO SORT ON.
                        *	SORT TABLE MUST CONTAIN (# OF FIELDS)+1 BYTES
                        *	SORT TABLE MUST TERMINATE WITH A ZERO BYTE.
                        *
                        *	SORTAB	DB	1,2,3,4,5,0
                        *
                        *	IF A SORT TABLE ENTRY HAS THE HI BIT SET THEN THAT FIELD WILL
                        *	BE SORTED IN REVERSE.  IT IS POSSIBLE TO DO A DOUBLE REVERSE
                        *	WHICH YIELDS A NORMAL SORT (NEATO, AIN'T IT).
                        *
                        *	USAGE:
                        *
                        *	CALL	$SORT
                        *	DW	FWA RECORD TABLE
                        *	DW	RECORD LENGTH
                        *	DW	RECORD COUNT
                        *	DW	FIELD TABLE
                        *	DW	SORT TABLE
                        *
                        *	ENTRY:	((SP)) = RET
                        *		(RET)+0 = FWA RECORD TABLE
                        *		(RET)+2 = RECORD LENGTH
                        *		(RET)+4 = RECORD COUNT
                        *		(RET)+6 = FIELD TABLE
                        *		(RET)+8 = SORT TABLE
                        *
                        *	EXIT:	TO (RET)+10
                        *	USES:	ALL

                        *	$SORT = ENTRY FOR ASCENDING SORT

6CDB  3E EB             $SORT	MVI	A,353Q	;XCHG INSTRUCTION
6CDD  26                	DB	46Q	;FAKE MVI H,

                        *	$SORT. = ENTRY FOR DESCENDING SORT
                        *		IF YOU ENTER HERE AND ASK FOR A REVERSE FIELD, YOU GET
                        *		A NORMAL SORT ON THAT FIELD.

6CDE  AF                $SORT.	XRA	A
6CDF  32 A76D           	STA	COMPX
6CE2  E1                	POP	H	;GET RETURN PTR
6CE3  5E                	MOV	E,M
6CE4  23                	INX	H
6CE5  56                	MOV	D,M	;(DE) = FWA RECORD TABLE
6CE6  23                	INX	H
6CE7  EB                	XCHG			SAVE;PTR
6CE8  22 F06D           	SHLD	RECTAB
6CEB  EB                	XCHG			GET;PTR
6CEC  7E                	MOV	A,M	;(A) = RECORD LENGTH
6CED  23                	INX	H	;SKIP HI BYTE (LIMIT IS 256 BYTES)
6CEE  23                	INX	H	;CALLER MUST INSURE THIS LIMIT IS WATCHED!
6CEF  32 CC6D           	STA	SWP1
6CF2  32 D86D           	STA	SWP2
6CF5  32 DF6D           	STA	SWP3
6CF8  32 EB6D           	STA	INDX
6CFB  5E                	MOV	E,M
6CFC  23                	INX	H
6CFD  56                	MOV	D,M	;(DE) = RECORD COUNT
6CFE  23                	INX	H
6CFF  EB                	XCHG			SAVE;PTR
6D00  22 FD6D           	SHLD	RECCNT
6D03  22 FB6D           	SHLD	VAR.M	;PRIME M AT FIRST
6D06  EB                	XCHG			GET;PTR
6D07  5E                	MOV	E,M
6D08  23                	INX	H
6D09  56                	MOV	D,M	;(DE) = FIELD TABLE
6D0A  23                	INX	H
6D0B  EB                	XCHG			SAVE;PTR
6D0C  22 926D           	SHLD	FLDTAB
6D0F  EB                	XCHG			GET;PTR
6D10  5E                	MOV	E,M
6D11  23                	INX	H
6D12  56                	MOV	D,M	;(DE) = SORT TABLE
6D13  23                	INX	H
6D14  D5                	PUSH	D
6D15  E3                	XTHL			SAVE;RETURN ADDR
6D16  22 786D           	SHLD	SRTBX

6D19  2A FB6D           SORT1	LHLD	VAR.M
6D1C  A7                	ANA	A	;CLEAR CARRY
6D1D  7C                	MOV	A,H
6D1E  1F                	RAR
6D1F  67                	MOV	H,A
6D20  7D                	MOV	A,L
6D21  1F                	RAR
6D22  6F                	MOV	L,A
6D23  22 FB6D           	SHLD	VAR.M	;M=M/2
6D26  B4                	ORA	H
6D27  C8                	RZ			SORT;IS DONE!

6D28  CD 9418           	CALL	$CHL
6D2B  EB                	XCHG			(DE);= -M
6D2C  2A FD6D           	LHLD	RECCNT
6D2F  19                	DAD	D
6D30  22 F96D           	SHLD	VAR.K	;K=N-M
6D33  21 0100           	LXI	H,1	;J=1

6D36  22 F76D           SORT2	SHLD	VAR.J	;SAVE NEW J

6D39  22 F56D           SORT3	SHLD	VAR.I	;SAVE NEW I
6D3C  EB                	XCHG
6D3D  2A FB6D           	LHLD	VAR.M
6D40  19                	DAD	D	;(DE)=I, (HL)=I+M
6D41  CD E76D           	CALL	INDEX
6D44  EB                	XCHG			DE=PTR;TO ENTRY (I+M)
6D45  CD E76D           	CALL	INDEX	;HL=PTR TO ENTRY (I)
6D48  CD 776D           	CALL	COMPARE
6D4B  D2 656D           	JNC	SORT4
6D4E  CD C96D           	CALL	SWAP	;EXCHANGE THE ENTRIES
6D51  2A FB6D           	LHLD	VAR.M
6D54  CD 9418           	CALL	$CHL	;(HL) = -M
6D57  EB                	XCHG
6D58  2A F56D           	LHLD	VAR.I
6D5B  EB                	XCHG			DE=I
6D5C  19                	DAD	D
6D5D  D2 656D           	JNC	SORT4	;'NC' IMPLIES I-M<0
6D60  7C                	MOV	A,H
6D61  B5                	ORA	L
6D62  C2 396D           	JNZ	SORT3	;CONTINUE IF NZ

6D65  2A F76D           SORT4	LHLD	VAR.J
6D68  23                	INX	H
6D69  EB                	XCHG			(DE)=J+1
6D6A  2A F96D           	LHLD	VAR.K	;(HL)=K
6D6D  CD 2B69           	CALL	CPDEHL
6D70  EB                	XCHG
6D71  DA 196D           	JC	SORT1	;J>K
6D74  C3 366D           	JMP	SORT2

                        *	COMPARE - COMPARE TWO ENTRIES FOR SORTING
                        *	ENTER:	(DE)=START OF FIRST ENTRY IN MEMORY
                        *		(HL)=START OF SECOND ENTRY IN MEMORY
                        *	EXIT:	'C' SET IF ENTRIES SHOULD BE SWAPPED
                        *	USES:	A,F,B,C

6D77  01 0000           COMPARE LXI	B,*-*	;FIELD SEQUENCE FOR FILES
      = 6D78            SRTBX	EQU	*-2

6D7A  0A                COMP1	LDAX	B	;GET NEXT SORT FIELD #
6D7B  03                	INX	B
6D7C  A7                	ANA	A
6D7D  C8                	RZ			ZERO;IS LAST
6D7E  E6 80             	ANI	200Q
6D80  CA 866D           	JZ	COMP1.1
6D83  3E EB             	MVI	A,353Q	;XCHG INST.
6D85  FE                	DB	376Q	;FAKE CPI
6D86  AF                COMP1.1 XRA	A
6D87  32 B46D           	STA	COMPY
6D8A  32 BE6D           	STA	COMPZ
6D8D  C5                	PUSH	B
6D8E  D5                	PUSH	D
6D8F  E5                	PUSH	H
6D90  E5                	PUSH	H
6D91  21 0000           	LXI	H,*-*	;FIELD DESCRIPTION FOR FILES
      = 6D92            FLDTAB	EQU	*-2
6D94  0B                	DCX	B
6D95  0A                	LDAX	B	;GET BACK SORT FIELD #
6D96  E6 7F             	ANI	177Q	;STRIP HI BIT
6D98  3D                	DCR	A	;RELATIVE TO 0
6D99  87                	ADD	A	;X 2
6D9A  CD 4118           	CALL	$DADA.	;INDEX INTO FIELD DESCRIPTIONS
6D9D  4E                	MOV	C,M
6D9E  06 00             	MVI	B,0	;BC=OFFSET VALUE
6DA0  23                	INX	H
6DA1  7E                	MOV	A,M
6DA2  E1                	POP	H
6DA3  F5                	PUSH	PSW	;SAVE FIELD LENGTH
6DA4  09                	DAD	B	;ADD OFFSET TO HL
6DA5  EB                	XCHG
6DA6  09                	DAD	B	;ADD OFFSET TO DE
6DA7  EB                COMPX	XCHG			MAJOR;REVERSE SORT
6DA8  F1                	POP	PSW
6DA9  A7                	ANA	A
6DAA  C2 BB6D           	JNZ	COMP2

6DAD  CD 8918           	CALL	$HLIHL	;GET 16 BIT WORD
6DB0  EB                	XCHG
6DB1  CD 8918           	CALL	$HLIHL	;GET 16 BIT WORD
6DB4  00                COMPY	NOP			FIELD;REVERSE SORT
6DB5  CD 2B69           	CALL	CPDEHL
6DB8  C3 C26D           	JMP	COMP3

6DBB  4F                COMP2	MOV	C,A
6DBC  06 00             	MVI	B,0	;BC=FIELD LENGTH
6DBE  00                COMPZ	NOP			FIELD;REVERSE SORT
6DBF  CD 3018           	CALL	$COMP

6DC2  E1                COMP3	POP	H
6DC3  D1                	POP	D
6DC4  C1                	POP	B
6DC5  C0                	RNZ
6DC6  C3 7A6D           	JMP	COMP1	;USE NEXT FIELD IF EQUAL

                        *	SWAP - EXCHANGE TWO ENTRIES
                        *
                        *	ENTRY:	(DE) = ONE RECORD
                        *		(HL) = ANOTHER RECORD
                        *	EXIT:	RECORDS SWAPPED
                        *	USES:	ALL

6DC9  D5                SWAP	PUSH	D
6DCA  E5                	PUSH	H
6DCB  01 0000           	LXI	B,*-*
      = 6DCC            SWP1	EQU	*-2

6DCE  21 EB72           	LXI	H,LABEL
6DD1  CD AA18           	CALL	$MOVE	;MOVE (DE) TO (SAVE)
6DD4  D1                	POP	D	;GET OLD HL
6DD5  E1                	POP	H	;GET OLD DE
6DD6  D5                	PUSH	D	;SAVE OLD HL
6DD7  01 0000           	LXI	B,*-*
      = 6DD8            SWP2	EQU	*-2

6DDA  CD AA18           	CALL	$MOVE	;MOVE (HL) TO (DE)
6DDD  E1                	POP	H	;GET OLD HL
6DDE  01 0000           	LXI	B,*-*
      = 6DDF            SWP3	EQU	*-2

6DE1  11 EB72           	LXI	D,LABEL
6DE4  C3 AA18           	JMP	$MOVE	;MOVE (SAVE) TO (HL)

                        *	INDEX - RETURN MEMORY LOCATION OF RECORD
                        *
                        *	ENTRY:	(HL) = DESIRED ENTRY INDEX (FIRST ONE = 1)
                        *	EXIT:	(HL) = ADDRESS OF DESIRED ENTRY
                        *	USES:	A,F,H,L

6DE7  D5                INDEX	PUSH	D	;SAVE (DE)
6DE8  EB                	XCHG			(DE);= INDEX
6DE9  1B                	DCX	D	;MAKE RELATIVE TO 0
6DEA  3E 00             	MVI	A,0	;RECORD LENGTH
      = 6DEB            INDX	EQU	*-1

6DEC  CD 0719           	CALL	$MU86	;(HL) = INDEX X RECORD LENGTH
6DEF  11 0000           	LXI	D,*-*
      = 6DF0            RECTAB	EQU	*-2	;START OF RECORD TABLE

6DF2  19                	DAD	D
6DF3  D1                	POP	D
6DF4  C9                	RET

                        *	VARIABLE STORAGE CELLS

6DF5  0000              VAR.I	DW	0
6DF7  0000              VAR.J	DW	0
6DF9  0000              VAR.K	DW	0
6DFB  0000              VAR.M	DW	0
6DFD  0000              RECCNT	DW	0
6DFF                    	XTEXT	DNS
6DFF                    	SPACE	4,10
                        **	$DNS - DECODE NUMERIC SWITCH.
                        *
                        *	$DNS DECODES A NUMERIC SWITCH OF THE FORM:
                        *
                        *	:NNN
                        *
                        *	A POSTRADIX OF D, Q, O, OR B IS ALLOWED. IF THE VALUE
                        *	IS SYNTATICALLY VALID, IT IS REPLACED WITH BLANKS.
                        *
                        *	ENTRY	(HL) = ADDRESS IF ':'
                        *		(A) = DEFAULT BASE (2, 8 OR 10)
                        *	EXIT	'C' CLEAR IF OK
                        *		 (HL) ADVANCED PAST VALUE
                        *		 VALUE BLANKED
                        *		 (DE) = VALUE
                        *		'C' SET IF ERROR
                        *	USES	ALL

6DFF  3E 0A             $DNS.	MVI	A,10			; BASE 10 DEFAULT

6E01  47                $DNS	MOV	B,A			; (B) = DEFAULT BASE
6E02  7E                	MOV	A,M
6E03  FE 3A             	CPI	':'
6E05  37                	STC
6E06  C0                	RNE				; NOT ':'
6E07  E5                	PUSH	H			; SAVE ADDRESS OF SWITCH START
6E08  23                	INX	H
6E09  78                	MOV	A,B
6E0A  CD 1E6E           	CALL	$DNV			; DECODE NUMERIC VALUE
6E0D  C1                	POP	B			; (BC) = ADDRESS OF ':'
6E0E  D8                	RC				; ERROR

6E0F  3E 20             $DNS1	MVI	A,' '
6E11  02                	STAX	B			; BLANK LINE
6E12  03                	INX	B			; INCREMENT ADDRESS
6E13  7D                	MOV	A,L
6E14  B9                	CMP	C
6E15  C2 0F6E           	JNE	$DNS1
6E18  78                	MOV	A,B
6E19  BC                	CMP	H			; SEE IF IN RIGHT BANK
6E1A  C2 0F6E           	JNE	$DNS1

6E1D  C9                	RET				; RETURN WITH 'C' CLEAR AND VALUE
6E1E                    	XTEXT	DNV
6E1E                    	SPACE	4,10
                        **	$DNV - DECODE NUMERIC VALUE.
                        *
                        *	$DNV DECODES A NUMERIC VALUE (IN THE FORM OF AN ASCII STRING)
                        *	INTO A BINARY NUMBER. THE MAXIMUM MAGNITUDE IS
                        *	65535D.
                        *
                        *	THE NUMBER MAY CONTAIN A POSTRADIX OF 'B' (BINARY)
                        *	'O' OR 'Q' (OCTAL) OR 'D' (DECIMAL)
                        *
                        *	ENTRY	(HL) = ADDRESS OF FIRST BYTE OF NUMBER
                        *		(A) = DEFAULT BASE (2 FOR BINARY, 10 FOR DECIMAL, ETC.)
                        *	EXIT	'C' CLEAR IF OK
                        *		 (HL) ADVANCED PAST NUMBER (AND POSTRADIX)
                        *		 (DE) = VALUE
                        *		'C' SET IF ERROR
                        *	USES	ALL

6E1E  32 6B6E           $DNV	STA	$DNVA			; SET DEFAULT BASE
6E21  44                	MOV	B,H
6E22  4D                	MOV	C,L			; (BC) = TEXT ADDRESS

                        *	SCAN FOR POSTRADIX

6E23  7E                $DNV1	MOV	A,M
6E24  CD 766E           	CALL	$CVD.			; CHECK FOR VALID DECIMAL DIGIT
6E27  23                	INX	H
6E28  D2 236E           	JNC	$DNV1			; MORE TO GO
6E2B  2B                	DCX	H			; REMOVE EXTRA INCREMENT
6E2C  79                	MOV	A,C
6E2D  BD                	CMP	L			; SEE IF THERE WERE ANY NUMBERS
6E2E  37                	STC				; ASSUME NOT
6E2F  C8                	RE				; ERROR

                        *	OUT OF NUMBERS. SEE IF POSTRADIX FOLLOWS

6E30  7E                	MOV	A,M			; (A) = PROPOSED POSTRADIX
6E31  E5                	PUSH	H			; SAVE END ADDRESS
6E32  21 6C6E           	LXI	H,$DNVB
6E35  A7                	ANA	A
6E36  CA 466E           	JZ	$DNV2			; NO POSTRADIX
6E39  CD 5B68           	CALL	$TBLS
6E3C  7E                	MOV	A,M
6E3D  C2 466E           	JNE	$DNV2			; NOT POSTRADIX
6E40  E1                	POP	H
6E41  23                	INX	H			; SKIP POSTRADIX
6E42  E5                	PUSH	H
6E43  32 6B6E           	STA	$DNVA			; SET NEW POSTRADIX

6E46  11 0000           $DNV2	LXI	D,0			; (DE) = ACCUMULATOR

                        *	BUILD NUMBER

6E49  3A 6B6E           $DNV3	LDA	$DNVA			; (A) = BASE
6E4C  F5                	PUSH	PSW			; SAVE BASE
6E4D  CD 0719           	CALL	$MU86			; MULTIPLY
6E50  D1                	POP	D			; (D) = BASE
6E51  DA 696E           	JC	$DNV4			; OVERFLOW
6E54  0A                	LDAX	B			; (A) = DIGIT
6E55  D6 30             	SUI	'0'
6E57  03                	INX	B
6E58  BA                	CMP	D			; COMPARE TO BASE
6E59  3F                	CMC
6E5A  DA 696E           	JC	$DNV4			; TOO LARGE A DIGIT
6E5D  CD 4118           	CALL	$DADA.			; ADD TO VALUE
6E60  EB                	XCHG				; (DE) = VALUE
6E61  0A                	LDAX	B
6E62  CD 766E           	CALL	$CVD.
6E65  D2 496E           	JNC	$DNV3			; MORE TO GO
6E68  A7                	ANA	A			; CLEAR CARRY
6E69  E1                $DNV4	POP	H			; RESTORE POINTER
6E6A  C9                	RET				; EXIT

6E6B  00                $DNVA	DB	0			; DEFAULT BASE

6E6C  4202              $DNVB	DB	'B',2			; POSTRADIX TABLE
6E6E  4F08              	DB	'O',8
6E70  5108              	DB	'Q',8
6E72  440A              	DB	'D',10
6E74  00                	DB	0
6E75                    	XTEXT	CVD
6E75                    	SPACE	4,10
                        **	$CVD - CHECK FOR VALID DIGIT.
                        *
                        *	CVD EXAMINES A DIGIT TO SEE IF IT IS A VALID DECIMAL DIGIT.
                        *
                        *	ENTRY	(HL) = ADDRESS OF CHARACTER
                        *	EXIT	'C' SET IF ILLEGAL
                        *		 (A) = VALUE
                        *	USES	A,F

6E75  7E                $CVD	MOV	A,M			; (A) = CHARACTER
6E76  D6 30             $CVD.	SUI	'0'
6E78  D8                	RC				; ILLEGAL
6E79  FE 0A             	CPI	9+1
6E7B  3F                	CMC
6E7C  C9                	RET
6E7D                    	XTEXT	DTB
6E7D                    	SPACE	4,10
                        **	$DTB - DELETE TRAILING BLANKS.
                        *
                        *	$DTB DELETES THE TRAILING BLANKS FROM A CODED LINE.
                        *
                        *	ENTRY	(HL) = LINE FWA
                        *	EXIT	(A) = LENGTH OF RESULT (ENCLUDING 00 TERMINATOR BYTE)
                        *	USES	A,F

6E7D  D5                $DTB	PUSH	D			; SAVE (DE)
6E7E  54                	MOV	D,H
6E7F  5D                	MOV	E,L			; (DE) = FWA
6E80  1B                	DCX	D			; (DE) = FWA-1
6E81  7E                $DTB1	MOV	A,M
6E82  23                	INX	H
6E83  A7                	ANA	A			; FIND END OF LINE
6E84  C2 816E           	JNZ	$DTB1
6E87  2B                	DCX	H			; (HL) = ADDRESS OF TERMINATING BYTE

                        *	GOT END OF LINE. DELETE TRAILING BLANKS

6E88  2B                $DTB2	DCX	H			; BACKUP ONE CHARACTER
6E89  CD 8E18           	CALL	$CDEHL
6E8C  CA 956E           	JE	$DTB3			; GONE PAST FRONT OF LINE, IS ALL BLANKS
6E8F  7E                	MOV	A,M
6E90  FE 20             	CPI	' '
6E92  CA 886E           	JE	$DTB2			; GOT BLANK

                        *	HAVE TRIMED LINE. COMPUTE LENGTH

6E95  23                $DTB3	INX	H
6E96  36 00             	MVI	M,0			; TERMINATE LINE
6E98  7D                	MOV	A,L
6E99  93                	SUB	E			; (A) = LENGTH +1 (FOR 00 BYTE)
6E9A  EB                	XCHG
6E9B  23                	INX	H			; (HL) = LINE FWA
6E9C  D1                	POP	D			; RESTORE (DE)
6E9D  C9                	RET
6E9E                    	XTEXT	BITS
6E9E                    	SPACE	4,10
                        ***	BITS - BIT SET.
                        *
                        *	BITS SETS THE SPECIFIED BIT IN THE ACCUMULATOR.
                        *
                        *	ENTRY:	(A)  =	ORIGINAL (A)
                        *		(B)  =	NUMBER OF BIT TO SET (7=HIGH, ... ,0=LOW)
                        *	EXIT:	(A)  =	ORIGINAL (A) WITH BIT (B) SET
                        *	USES:	A,F

6E9E  C5                BITS	PUSH	B

6E9F  F5                	PUSH	PSW
6EA0  3E 80             	MVI	A,10000000B
6EA2  04                	INR	B
6EA3  07                BITS1	RLC
6EA4  05                	DCR	B
6EA5  C2 A36E           	JNZ	BITS1

6EA8  4F                	MOV	C,A
6EA9  F1                	POP	PSW
6EAA  B1                	ORA	C

6EAB  C1                	POP	B
6EAC  C9                	RET
6EAD                    	XTEXT	RVL
6EAD                    	SPACE	4,10
                        ***	RVL - READ VOLUME LABEL
                        *
                        *	RVL reads the volume label sector from a designated mounted
                        *	disk into a user specified area.
                        *
                        *	Entry:	(HL) = Device Name
                        *		(DE) = Buffer Address
                        *		 (A) = Device Unit #
                        *	Exit:	'C' Set if Error
                        *		 (A) = Error Code
                        *	Uses:	ALL

6EAD  32 DC6E           RVL	STA	LABUNI			; Set Device Unit
6EB0  22 B86E           	SHLD	LABDEV			; Set our Device Name
6EB3  EB                	XCHG
6EB4  22 D66E           	SHLD	BUFFAD			; Set Buffer Address

                        *	See if the specified device exists.  Get it's address.

6EB7  11 7878           	LXI	D,'xx'			; Driver name
      = 6EB8            LABDEV	EQU	*-2
6EBA  FF 0A             	SCALL	.GDA			; Get driver address
6EBC  D8                	RC
6EBD  22 E36E           	SHLD	DEVADR			; Save driver address

                        *	Check to see that the device is indeed mounted.

6EC0  21 0700           	LXI	H,DEV.MUM		; Index up to Mounted Units Mask
6EC3  09                	DAD	B
6EC4  4E                	MOV	C,M			; Get mask
6EC5  3A DC6E           	LDA	LABUNI			; Get unit he wants
6EC8  47                	MOV	B,A			; Set it
6EC9  AF                	XRA	A			; Make a zero
6ECA  CD 9E6E           	CALL	BITS			; Set the proper bit
6ECD  A1                	ANA	C
6ECE  3E 1B             	MVI	A,EC.UUN		; Unit not mounted
6ED0  37                	STC
6ED1  C8                	RZ				; Return w/ error

                        *	Now that we know we have valid stuff, do it.

6ED2  21 0900           	LXI	H,DDF.LAB		; The label sector
6ED5  11 0000           	LXI	D,*-*			; Buffer address
      = 6ED6            BUFFAD	EQU	*-2
6ED8  01 0001           	LXI	B,1*256 		; Only 1 sector
6EDB  3E 00             	MVI	A,0			; Unit number
      = 6EDC            LABUNI	EQU	*-1
6EDD  32 3121           	STA	AIO.UNI
6EE0  3E 02             	MVI	A,DC.RER		; Read Regardless
6EE2  CD 0000           	CALL	*-*			; Call the driver
      = 6EE3            DEVADR	EQU	*-2

6EE5  C9                	RET				; Go back with whatever we got
6EE6                    	XTEXT	FOPE
6EE6                    	SPACE	4,10
                        **	$FOPEx - OPEN FILE BLOCK FOR I/O
                        *
                        *	$FOPEx IS CALLED BEFORE ANY I/O IS DONE VIA A
                        *	FILE BLOCK. $FOPEx SETS UP THE FILE BLOCK, AND OPENS
                        *	THE FILE VIA *HDOS*.
                        *
                        *	ENTRY	(DE) = ADDRESS OF DEFAULT BLOCK
                        *		(HL) = ADDRESS OF FILE BLOCK
                        *	EXIT	TO $FERROR IF ERROR
                        *		TO CALLER IF OK
                        *	USES	A,F,B,C,D,E

6EE6  CD FB6E           $FOPER	CALL	$FOPER.
6EE9  D0                	RNC
6EEA  C3 AD70           	JMP	$FERROR 		; IN ERROR

6EED  CD FE6E           $FOPEW	CALL	$FOPEW.
6EF0  D0                	RNC
6EF1  C3 AD70           	JMP	$FERROR 		; IN ERROR

6EF4  CD 016F           $FOPEU	CALL	$FOPEU.
6EF7  D0                	RNC
6EF8  C3 AD70           	JMP	$FERROR 		; IN ERROR

6EFB  3E 02             $FOPER. MVI	A,FT.OR 		; FILE TYPE OF OPEN FOR READ
6EFD  01                	DB	001Q			; LXI,B TO SKIP NEXT MVI

6EFE  3E 04             $FOPEW. MVI	A,FT.OW 		; OPEN FOR WRITE
6F00  01                	DB	001Q			; LXI,B TO SKIP NEXT MVI

6F01  3E 06             $FOPEU.	MVI	A,FT.OR+FT.OW

                        *	(A) = FILE FLAGS

6F03  E5                	PUSH	H			; SAVE FILE BLOCK ADDRESS
6F04  F5                	PUSH	PSW			; SAVE NEW FLAGS
                        	ERRNZ	FB.CHA
6F05  46                	MOV	B,M			; (B) = CHANNEL NUMBER
6F06  C5                	PUSH	B			; SAVE CHANNEL NUMBER
                        	ERRNZ	FB.FLG-FB.CHA-1
6F07  23                	INX	H
6F08  4F                	MOV	C,A			; (C) = NEW FILE FLAGS
6F09  7E                	MOV	A,M			; (A) = CURRENT TYPE
6F0A  A7                	ANA	A
6F0B  79                	MOV	A,C			; (A) = NEW FLAGS TO BE SET
6F0C  CA 166F           	JZ	$FOPE1			; NOT ALREADY OPEN

                        *	ALREADY OPEN. SQUACK

6F0F  C1                	POP	B			; RESTORE (BC)
6F10  F1                	POP	PSW			; DISCARD NEW FLAGS
6F11  E1                	POP	H			; (HL) = FB ADDRESS
6F12  3E 19             	MVI	A,EC.FAO		; FILE ALREADY OPEN
6F14  37                	STC
6F15  C9                	RET

                        	ERRNZ	FB.FWA-FB.FLG-1
6F16  23                $FOPE1	INX	H			; (HL) = #FB.FWA
6F17  4E                	MOV	C,M
6F18  23                	INX	H
6F19  46                	MOV	B,M			; (BC) = FB.FWA
6F1A  23                	INX	H
                        	ERRNZ	FB.PTR-FB.FWA-2
6F1B  71                	MOV	M,C			; SET FB.PTR = FB.FWA
6F1C  23                	INX	H
6F1D  70                	MOV	M,B
6F1E  23                	INX	H
                        	ERRNZ	FB.LIM-FB.PTR-2
6F1F  71                	MOV	M,C			; SET FB.LIM = FB.FWA
6F20  23                	INX	H
6F21  70                	MOV	M,B
6F22  23                	INX	H
                        	ERRNZ	FB.NAM-FB.LIM-4
6F23  23                	INX	H
6F24  23                	INX	H			; (HL) = #FB.NAM

                        *	FILE BLOCK POINTERS SETUP. OPEN FILE

6F25  E5                	PUSH	H			; SAVE NEW ADDRESS FOR NAME
6F26  21 3F6F           	LXI	H,$FOPEB
6F29  A7                	ANA	A					;/78.10.GC/
6F2A  CA 316F           	JZ	$FOPE2
                        	ERRNZ	.EXIT
6F2D  CD 5B68           	CALL	$TBLS			; FIND CODE
6F30  7E                	MOV	A,M
6F31  32 376F           $FOPE2	STA	$FOPEA			; SET SYSCALL CODE
6F34  E1                	POP	H			; (HL) = #FB.NAM
6F35  F1                	POP	PSW			; (A) = CHANNEL NUMBER
6F36  FF 00             	SCALL	.EXIT
      = 6F37            $FOPEA	EQU	*-1			; SYSCALL CODE
6F38  D1                	POP	D			; (D) = NEW FLAG
6F39  E1                	POP	H			; (HL) = FILE BLOCK ADDRESS
6F3A  D8                	RC				; EXIT IF ERROR
6F3B  23                	INX	H
                        	ERRNZ	FB.FLG-1
6F3C  72                	MOV	M,D			; SET NEW FLAGS
6F3D  2B                	DCX	H			; RESTORE (HL)
6F3E  C9                	RET

6F3F  0222              $FOPEB	DB	FT.OR,.OPENR		; TABLE OF SYSCALL CODES
6F41  0423              	DB	FT.OW,.OPENW
6F43  0624              	DB	FT.OR+FT.OW,.OPENU
6F45  00                	DB	0			; SHOULD NOT OCCUR
6F46                    	XTEXT	FWRIB
6F46                    	SPACE	4,10
                        **	$FWRIB - WRITE BYTES FROM FILE BUFFER.
                        *
                        *	$FWRIB IS CALLED TO WRITE A NUMBER OF BYTES FROM A FILE BUFFER.
                        *
                        *	ENTRY	(BC) = BYTE COUNT
                        *		(DE) = FWA FOR BYTES
                        *		(HL) = ADDRESS OF FILE BUFFER
                        *	EXIT	TO *FERROR* IF ERROR
                        *		TO CALLER IF OK
                        *		 (DE) = ADDRESS OF FIRST UNWRITTEN BYTE
                        *	USES	A,F,B,C,D,E

6F46  CD 4D6F           $FWRIB	CALL	$FWRIB.
6F49  D0                	RNC				; RETURN IF OK
6F4A  C3 AD70           	JMP	$FERROR 		; ERROR


6F4D  E5                $FWRIB.	PUSH	H
6F4E  CD 4070           	CALL	CBT			; COPY BUFFER POINTERS TO TEMP CELLS

                        *	COPY DATA FROM USER AREA TO BUFFER

6F51  D5                $WRIB2	PUSH	D			; SAVE AREA ADDRESS
6F52  3A A370           	LDA	T.FLG
6F55  E6 04             	ANI	FT.OW			; SEE IF OPEN FOR WRITE
6F57  CA B36F           	JZ	$WRIB8			; FILE NOT OPEN FOR WRITE
6F5A  78                	MOV	A,B
6F5B  B1                	ORA	C
6F5C  CA B36F           	JZ	$WRIB8			; ALL DONE

                        *	COMPUTE MIN( ROOM IN BUFFER, WRITE COUNT REQUESTED)

6F5F  2A A670           $WRIB3	LHLD	T.PTR
6F62  EB                	XCHG				; (DE) = (FB.PTR) = ADDRESS OF ROOM
6F63  2A AA70           	LHLD	T.LWA			; (HL) = LIMIT ADDRESS
6F66  7D                	MOV	A,L
6F67  93                	SUB	E
6F68  6F                	MOV	L,A
6F69  7C                	MOV	A,H
6F6A  9A                	SBB	D
6F6B  67                	MOV	H,A			; (HL) = BYTES OF ROOM IN BUFFER
6F6C  79                	MOV	A,C			; COMPARE REQUESTED COUNT TO BUFFER ROOM
6F6D  95                	SUB	L
6F6E  78                	MOV	A,B
6F6F  9C                	SBB	H
6F70  D2 756F           	JNC	$WRIB4			; MORE REQUESTED THEN ROOM
6F73  60                	MOV	H,B
6F74  69                	MOV	L,C			; USE REQUESTED COUNT
6F75  7C                $WRIB4	MOV	A,H
6F76  B5                	ORA	L
6F77  C2 976F           	JNZ	$WRIB6			; SOME ROOM IN BUFFER

                        *	BUFFER IS FULL. EMPTY IT

6F7A  C5                	PUSH	B			; SAVE COUNT
6F7B  2A A470           	LHLD	T.FWA
6F7E  22 A670           	SHLD	T.PTR			; CLEAR REMOVAL POINTER
6F81  EB                	XCHG
6F82  2A AA70           	LHLD	T.LWA
6F85  7D                	MOV	A,L
6F86  93                	SUB	E
6F87  4F                	MOV	C,A
6F88  7C                	MOV	A,H
6F89  9A                	SBB	D
6F8A  47                	MOV	B,A			; (BC) = DATA IN BUFFER
6F8B  3A A270           	LDA	T.CHA
6F8E  FF 05             	SCALL	.WRITE			; WRITE BUFFER
6F90  C1                	POP	B			; (BC) = DESIRED COUNT
6F91  D2 5F6F           	JNC	$WRIB3			; GOT THE DATA

                        *	ERROR ON WRITE.

6F94  C3 B36F           	JMP	$WRIB8			; HAVE ERROR

                        *	GOT THE DATA. MOVE IT FROM BUFFER TO TARGET
                        *
                        *	(BC) = REQUEST COUNT
                        *	(DE) = TO
                        *	(HL) = COUNT
                        *	((SP)) = FROM

6F97  79                $WRIB6	MOV	A,C
6F98  95                	SUB	L
6F99  4F                	MOV	C,A
6F9A  78                	MOV	A,B
6F9B  9C                	SBB	H
6F9C  47                	MOV	B,A			; REMOVE BYTES FROM REQUEST COUNT
6F9D  C5                	PUSH	B
6F9E  E3                	XTHL				; (HL) = REMAINING REQUEST COUNT
6F9F  C1                	POP	B			; (BC) = COUNT FOR THIS COPY
6FA0  E3                	XTHL				; (HL) = TARGET ADDR, ((SP)) = REMAINING
6FA1  7E                $WRIB7	MOV	A,M
6FA2  12                	STAX	D
6FA3  13                	INX	D
6FA4  23                	INX	H
6FA5  0B                	DCX	B
6FA6  78                	MOV	A,B
6FA7  B1                	ORA	C
6FA8  C2 A16F           	JNZ	$WRIB7			; MORE TO GO
6FAB  EB                	XCHG
6FAC  22 A670           	SHLD	T.PTR			; UPDATE POINTER
6FAF  C1                	POP	B			; (BC) = REMAINING COUNT
6FB0  C3 516F           	JMP	$WRIB2			; SEE IF MORE IN BUFFER

                        *	WRITE COMPLETE.
                        *
                        *	(PSW) = COMPLETION FLAGS

6FB3  D1                $WRIB8	POP	D			; RESTORE TARGET ADDRESS
6FB4  E1                	POP	H
6FB5  C3 5670           	JMP	CTB			; COPY TEMP POINTERS BACK TO BLOCK, EXIT
6FB8                    	SPACE	4,10
                        **	$FWBRK	-  BREAKOUTPUT
                        *
                        *	$FWBRK empties the specified buffer by filling it with NULLs
                        *	and then writing it.  Note this is used to insure that block
                        *	mode I/O is output if it is not really a serial device (eg.
                        *	writing to AT: from  *EDIT*.
                        *
                        *
                        *	ENTRY:	HL = FILE BLOCK POINTER
                        *	EXIT:	HL = FILE BLOCK POINTER
                        *		 to $FERROR IF ERROR
                        *	USES:	A,F,B,C,D,E

6FB8  CD BF6F           $FWBRK	CALL	$FWBRK.
6FBB  D0                	RNC				; NO ERROR

6FBC  C3 AD70           	JMP	$FERROR

6FBF  E5                $FWBRK.	PUSH	H
6FC0  CD 4070           	CALL	CBT			; COPY BUFFER TO TEMPORARY
6FC3  CD CA6F           	CALL	$FWBRK1
6FC6  E1                	POP	H
6FC7  C3 5670           	JMP	CTB			; COPY TEMPORARY TO BUFFER

6FCA  2A AA70           $FWBRK1	LHLD	T.LWA
6FCD  EB                	XCHG				; DE = BUFFER LWA
6FCE  2A A670           	LHLD	T.PTR			; HL = BUFFER PTR
6FD1  7B                	MOV	A,E
6FD2  95                	SUB	L
6FD3  4F                	MOV	C,A
6FD4  7A                	MOV	A,D
6FD5  9C                	SBB	H
6FD6  47                	MOV	B,A			; BC = DE - HL
6FD7  B1                	ORA	C
6FD8  C8                	RZ				; THE BUFFER IS ALREADY FLUSHED
                        	
                        *	FILL THE BUFFER WITH NULLS

6FD9  78                FWBRK2	MOV	A,B
6FDA  B1                	ORA	C
6FDB  CA E56F           	JZ	FWBRK3			; NO MORE LEFT TO FILL

6FDE  36 00             	MVI	M,0
6FE0  23                	INX	H
6FE1  0B                	DCX	B
6FE2  C3 D96F           	JMP	FWBRK2

6FE5  2A A470           FWBRK3	LHLD	T.FWA
6FE8  22 A670           	SHLD	T.PTR
6FEB  EB                	XCHG				; DE = BUFFER FWA
6FEC  2A AA70           	LHLD	T.LWA			; HL = BUFFER LWA
6FEF  7D                	MOV	A,L
6FF0  93                	SUB	E
6FF1  4F                	MOV	C,A
6FF2  7C                	MOV	A,H
6FF3  9A                	SBB	D
6FF4  47                	MOV	B,A			; BC = HL - DE	( BC = COUNT )
6FF5  3A A270           	LDA	T.CHA
6FF8  FF 05             	SCALL	.WRITE
6FFA  C9                	RET
6FFB                    	XTEXT	FCLO
6FFB                    	SPACE	4,10
                        **	$FCLO - CLOSE FILE BLOCK.
                        *
                        *	$FCLO IS CALLED TO TERMINATE PROCESSING THROUGH A FILE
                        *	BLOCK.
                        *
                        *	ENTRY	(HL) = FILE BLOCK ADDRESS
                        *	EXIT	TO $FERROR IF ERROR
                        *		 TO CALLER IF OK
                        *	USES	A,F,B,C,D,E

6FFB  CD 0270           $FCLO	CALL	$FCLO.
6FFE  D0                	RNC				; NO ERROR
6FFF  C3 AD70           	JMP	$FERROR

7002  E5                $FCLO.	PUSH	H			; SAVE FILE BLOCK ADDRESS
                        	ERRNZ	FB.FLG-1
7003  23                	INX	H			; (HL) = #FB.FLG
7004  7E                	MOV	A,M
7005  36 00             	MVI	M,0			; CLEAR FLAG
7007  A7                	ANA	A
7008  CA 3E70           	JZ	$FCLO4			; FILE NOT OPEN
700B  E6 04             	ANI	FT.OW
700D  CA 3870           	JZ	$FCLO3			; NO WRITING, NO FLUSHING NEEDED

                        *	WAS OPEN FOR WRITE. SEE IF NEED FLUSH THE LAST SECTOR

7010  CD 9C18           	CALL	$INDL
7013  0300              	DW	FB.PTR-FB.FLG
7015  D5                	PUSH	D			; SAVE (FB.PTR)
7016  CD 9C18           	CALL	$INDL			; (DE) = (FB.FWA)
7019  0100              	DW	FB.FWA-FB.FLG
701B  E1                	POP	H			; (HL) = (FB.PTR)
701C  7D                	MOV	A,L
701D  93                	SUB	E
701E  4F                	MOV	C,A
701F  7C                	MOV	A,H
7020  9A                	SBB	D
7021  47                	MOV	B,A			; (BC) = AMOUNT IN BLOCK
7022  B1                	ORA	C
7023  CA 3870           	JZ	$FCLO3			; NONE TO FLUSH

                        *	NEED TO FLUSH BUFFER
                        *
                        *	(BC) = DATA AMOUNT
                        *	(DE) = FWA
                        *	(HL) = LWA+1

7026  79                	MOV	A,C
7027  A7                	ANA	A
7028  CA 3370           	JZ	$FCLO2			; DONT HAVE PARTIAL SECTOR

                        *	ZERO FILL PARTIAL SECTOR

702B  36 00             $FCLO1	MVI	M,0
702D  23                	INX	H
702E  0C                	INR	C
702F  C2 2B70           	JNZ	$FCLO1
7032  04                	INR	B			; COUNT ANOTHER FULL SECTOR
7033  E1                $FCLO2	POP	H			; (HL) = FB FWA
7034  7E                	MOV	A,M			; (A) = CHANNEL NUMBER
                        	ERRNZ	FB.CHA
7035  E5                	PUSH	H
7036  FF 05             	SCALL	.WRITE			; FLUSH

                        *	READY TO CLOSE FILE.
                        *
                        *	'C' SET IF ERROR
                        *	 (A) = ERROR CODE

7038  E1                $FCLO3	POP	H			; (HL) = FILE BLOCK ADDRESS
7039  D8                	RC				; ERROR
                        	ERRNZ	FB.CHA
703A  7E                	MOV	A,M			; (A) = CHANNEL NUMBER
703B  E5                	PUSH	H
703C  FF 26             	SCALL	.CLOSE			; CLOSE CHANNEL
703E  E1                $FCLO4	POP	H			; (HL) = FILE BLOCK ADDRESS
703F  C9                	RET
7040                    	XTEXT	FUTIL
7040                    	SPACE	4,10
                        **	$FUTIL - UTILITY ROUTINES FOR FILE BLOCK ROUTINES.

                        **	CBT - COPY BLOCK POINTERS TO TEMP CELLS.
                        *
                        *	ENTRY	(HL) = FILE BLOK FWA
                        *	EXIT	NONE
                        *	USES	A,F,H,L

7040  D5                CBT	PUSH	D
7041  C5                	PUSH	B			; SAVE REGISTERS
                        	ERRNZ	TLEN-10 		; ASSUME 10 BYTES TO MOVE
7042  11 A270           	LXI	D,T.CHA 		; (DE) = TARGET FOR MOVE
7045  06 05             	MVI	B,10/2
7047  7E                CBT1	MOV	A,M			; COPY FILE BUFFER INTO WORK AREA
7048  12                	STAX	D
7049  23                	INX	H
704A  13                	INX	D
704B  7E                	MOV	A,M
704C  12                	STAX	D
704D  23                	INX	H
704E  13                	INX	D
704F  05                	DCR	B
7050  C2 4770           	JNZ	CBT1			; MORE TO GO
7053  C1                	POP	B
7054  D1                	POP	D			; (DE) = DATA TARGET ADDRESS
7055  C9                	RET


                        **	CTB - COPY TEMP CELLS BACK TO FILE BLOCK.
                        *
                        *	ENTRY	(HL) = FILE BLOCK ADDRESS
                        *	EXIT	NONE
                        *	USES	NONE

7056  F5                CTB	PUSH	PSW
7057  D5                	PUSH	D
7058  C5                	PUSH	B
7059  E5                	PUSH	H			; SAVE REGISTERS
705A  06 04             	MVI	B,8/2
705C  11 A270           	LXI	D,T.CHA
705F  1A                CTB1	LDAX	D
7060  77                	MOV	M,A
7061  13                	INX	D
7062  23                	INX	H
7063  1A                	LDAX	D
7064  77                	MOV	M,A
7065  13                	INX	D
7066  23                	INX	H
7067  05                	DCR	B
7068  C2 5F70           	JNZ	CTB1			; RESTORE FILE BUFFER VALUES
706B  E1                	POP	H
706C  C1                	POP	B
706D  D1                	POP	D
706E  F1                	POP	PSW
706F  C9                	RET
7070                    	SPACE	4,10
                        **	$FFB - FILL FILE BUFFER.
                        *
                        *	$FFB FILLS THE FILE BUFFER BY READING FROM THE FILE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' SET IF READ INCOMPLETE
                        *		 (A) = ERROR CODE
                        *		'C' CLEAR IF READ COMPLETEE
                        *		 DATA IN BUFFER
                        *	USES	A,F,D,E,H,L

7070  3A AC70           $FFB	LDA	EOFFLG
7073  1F                	RAR
7074  D8                	RC				; EOF

                        *	CAN READ MORE. DO SO

7075  C5                	PUSH	B			; SAVE COUNT
7076  2A A470           	LHLD	T.FWA
7079  22 A670           	SHLD	T.PTR			; CLEAR REMOVAL POINTER
707C  EB                	XCHG
707D  2A AA70           	LHLD	T.LWA
7080  22 A870           	SHLD	T.LIM			; SET DATA LIMIT
7083  7D                	MOV	A,L
7084  93                	SUB	E
7085  4F                	MOV	C,A
7086  7C                	MOV	A,H
7087  9A                	SBB	D
7088  47                	MOV	B,A			; (BC) = ROOM IN BUFFER
7089  3A A270           	LDA	T.CHA
708C  FF 04             	SCALL	.READ			; READ BUFFER
708E  50                	MOV	D,B			; (D) = SECTORS UNREAD
708F  C1                	POP	B			; (BC) = DESIRED COUNT
7090  D0                	RNC				; GOT THE DATA

                        *	ERROR ON READ. SEE IF EOF

7091  17                	RAL
7092  32 AC70           	STA	EOFFLG			; SET EOF, WE HOPE
7095  FE 03             	CPI	EC.EOF*2+1
7097  1F                	RAR
7098  C0                	RNE				; IS NOT EOF, RETURN NOW!
7099  3A A970           	LDA	T.LIM+1
709C  92                	SUB	D
709D  32 A970           	STA	T.LIM+1 		; SET AMOUNT OF DATA WE DID GET
70A0  A7                	ANA	A
70A1  C9                	RET				; EXIT WITH DATA


                        **	TEMP CELLS TO HOLD FILE BLOCK POINTERS DURING I/O

                        	ERRNZ	FB.CHA
70A2  00                T.CHA	DB	0			; CHANNEL NUMBER
                        	ERRNZ	*-T.CHA-FB.FLG
70A3  00                T.FLG	DB	0			; FLAG BYTE
                        	ERRNZ	*-T.CHA-FB.FWA
70A4  0000              T.FWA	DW	0
                        	ERRNZ	*-T.CHA-FB.PTR
70A6  0000              T.PTR	DW	0
                        	ERRNZ	*-T.CHA-FB.LIM
70A8  0000              T.LIM	DW	0
                        	ERRNZ	*-T.CHA-FB.LWA
70AA  0000              T.LWA	DW	0
      = 000A            TLEN	EQU	*-T.CHA 		; LENGTH OF TEMP CELLS

70AC  00                EOFFLG	DB	0
70AD                    	XTEXT	FERROR
70AD                    	SPACE	4,10
                        **	$FERROR - PROCESS FILE ERRORS.
                        *
                        *	$FERROR IS CALLED TO COMPLAIN ABOUT AN ERROR ENCOUNTERED
                        *	WHEN PROCESSING FILES.
                        *
                        *	ENTRY	(A) = ERROR CODE
                        *		(HL) = ADDRESS OF FILE NAME - FB.NAM
                        *	EXIT	TO RESTART
                        *	USES	ALL

70AD  F5                $FERROR PUSH	PSW			; SAVE CODE
70AE  CD 5E19           	CALL	$TYPTX
70B1  0A457272 6F72206F 	DB	NL,'Error on file',' '+200Q
70B9  6E206669 6C65A0
70C0  11 0A00           	LXI	D,FB.NAM
70C3  19                	DAD	D

                        *	PRINT FILE NAME

70C4  7E                $FERR1	MOV	A,M
70C5  23                	INX	H			; ADVANCE MESSAGE
70C6  A7                	ANA	A
70C7  CA CF70           	JZ	$FERR2
70CA  FF 02             	SCALL	.SCOUT
70CC  C3 C470           	JMP	$FERR1

                        *	TYPE ERROR MESSAGE

70CF  CD 5E19           $FERR2	CALL	$TYPTX
70D2  202DA0            	DB	' -',' '+200Q
70D5  26 0A             	MVI	H,NL
70D7  F1                	POP	PSW			; (A) = CODE
70D8  FF 2F             	SCALL	.ERROR
70DA  C3 3548           	JMP	RESTART 		; EXIT

70DD   (0000)           PATCH	DS	0	;PATCH AREA
70DD  48444F53 20332E30 	DB	'HDOS 3.0 - In remembrance of JGL'
70E5  202D2049 6E207265
70ED  6D656D62 72616E63
70F5  65206F66 204A474C
70FD  20616E64 20474143 	DB	' and GAC. With respect for HDOS.'
7105  2E205769 74682072
710D  65737065 63742066
7115  6F722048 444F532E
711D                    	STL	'DATA AND FILE BUFFERS'
711D                    	EJECT
711D  00                H19FLG	DB	0	;<>0 IF H19/VT52 TERMINAL
711E  00                MODE	DB	0	;<>0 IF LINE PASSED ON STACK
711F  00                COMAND	DB	0	;COMMAND IN PROGRESS

7120  00                SYSTEM	DB	0	;/S   flag (<>0 if /S specified)
7121  00                FLAG	DB	0	;/FL  flag (<>0 = flag mask)
7122  00                NOFLAG	DB	0	;/NOF flag (<>0 = flag mask)
                        	IF	USER
                        	ENDIF
7123  00                BEFORE	DB	0	;/BEF flag (<>0 if /BEF specified)
7124  00                CURREN	DB	0	;/CUR flag (<>0 if /CUR specified)
7125  00                AFTER	DB	0	;/AFT flag (<>0 if /AFT specified)
7126  0000              AGE	DW	0	;/AGE data (<>0 = number of days)
7128  00                ACCESS	DB	0	;/AC  flag (<>0 if /AC specified)
7129  00                COUNT	DB	0	;/COU flag (<>0 = number of accesses)
712A  00                NOCOUNT DB	0	;/NOC flag (<>0 = number of accesses)
712B  00                QUERY	DB	0	;/Q   flag (<>0 if /Q specified)
712C  00                NEGATE	DB	0	;/-   flag (<>0 if /- specified)
712D  00                SORT	DB	0	;/SO  flag (<>0 if /SO specified)
712E  00                REVERSE DB	0	;/REV flag (0=ascending 3=descending)
712F  00                SUPRES	DB	0	;/SU  flag (<>0 if /SU specified)
7130  00                ALLOCA	DB	0	;/ALL flag (<>0 if /ALL specified)
7131  00                PAGE	DB	0	;/P   flag (<>0 = number of files per page)
7132  00                COLUMN	DB	0	;/COL flag (<>0 = number of columns for /B)
7133  00                DATE	DB	0	;/D   flag (<>0 if /D specified)
7134  00                ATTRIB	DB	0	;/ATT flag (0=NOT used, 1=/ATT, 2=/ATT:f..)
7135  00                KEEP	DB	0	;/K   flag (<>0 if /K specified)
7136  00                CONTIG	DB	0	;/C   flag (<>0 if /C specified)
7137  00                FORCE	DB	0	;/FOR flag (<>0 if /FOR specified)
7138  00                SAFE	DB	0	;/SA  flag (<>0 if /SA specified)
7139  00                VERIFY	DB	0	;/V   flag (<>0 if /V specified)
713A  00                XUSR	DB	0	;/XXX flag (<>0 if /XXX specified)
713B  00                YUSR	DB	0	;/YYY flag (<>0 if /YYY specified)
713C  00                ZUSR	DB	0	;/ZZZ flag (<>0 if /ZZZ specified)

713D  00                D.SET	DB	0	;Flag byte for /ATT:f.. & SET,CLR,PUT,REM
713E  0000              D.CNT	DW	0	;Length of file for contig. copy

7140  0000              DATEB	DW	0	;Before coded working date
7142  0000              DATEC	DW	0	;Current coded working date
7144  0000              DATEA	DW	0	;After coded working date
      = 0027            SW.DATL EQU	*-COMAND;Switch Data Length

7146  64646E3A 44495245 DIRNAM	DB	'ddn:DIRECT.SYS',0;DIRECTORY FILE NAME
714E  43542E53 595300

7155  7B74              BUFPTR	DW	BUFF	;POINTER TO START  OF BUFFER
7157  0000              BUFSIZ	DW	0	;BUFFER LENGTH
7159                    	SPACE	3,10
                        **	FILE BLOCKS

7159  0000              NAMTLEN DW	0	;NAME TABLE POINTER
715B  0000              NAMTMAX DW	0	;MAX SIZE OF NAME TABLE
715D                    	SPACE	4,10
715D   (0000)           DESTFB	DS	0	;DESTINATION FILE BLOCK
715D  01                	DB	CN.DES	;CHANNEL NUMBER
715E  00                	DB	0	;FLAGS
715F  EB71              	DW	DESTBUF
7161  EB71              	DW	DESTBUF
7163  EB71              	DW	DESTBUF
7165  EB72              	DW	DESTBFE	;END OF BLOCK

                        	ERRNZ	*-MEML

                        *	THE NEXT 'FB.NAML' BYTES MUST BE RESERVED FOR DESTFB NAME AREA
                        *	LOCATE THEM JUST AFTER THE PIP MEMORY IMAGE
                        *	DS	FB.NAML 	NAME AREA

      = 7167            MEML	EQU	*	;MEMORY LENGTH

7167                    	STL	'RUN-TIME WORK AREAS'
7167                    	EJECT
                        **	THE FOLLOWING ARE BUFFERS AND RUN-TIME WORK AREAS

      = 7178            DEFALT	EQU	MEML+FB.NAML;DEFAULT BLOCK

      = 717E            AENA	EQU	DEFALT+6;AEN WORK AREA
      = 718F            COPYD	EQU	AENA+FB.NAML;HOLD AREA FOR WILDCARD DESTINATION
      = 71A0            MWNA	EQU	COPYD+FB.NAML;MWN WORK AREA
      = 71B1            RENA	EQU	MWNA+FB.NAML;RENAME WORK AREA
      = 71C2            EWSB	EQU	RENA+FB.NAML;30 BYTE WORK AREA FOR EWS
      = 71E0            EWSC	EQU	EWSB+30 ;WILDCARD PATTERN FOR DIRECTORY SEARCH

      = 71EB            DESTBUF EQU	EWSC+8+3;DESTINATION FILE BUFFER (ALSO USED BY *CCW*)
      = 72EB            DESTBFE EQU	DESTBUF+256;END OF BUFFER

      = 72EB            LABEL	EQU	DESTBUF+256;Label Sector
7167                    	SPACE	3,10
                        **	PIO.XXX - IMAGE OF SYSTEM AIO.XXX AREA
                        *
                        *	THESE CELLS MIRROR THE SYSTEM AIO.XXX AREA

      = 73EB            PIO.DEV EQU	LABEL+256;DEVICE CODE
      = 73ED            PIO.UNI EQU	PIO.DEV+2;UNIT NUMBER (0-9)

      = 73EE            PIO.DIR EQU	PIO.UNI+1;DIRECTORY ENTRY

      = 7405            $FOPWRK EQU	PIO.DIR+23;WORK AREA FOR $FOPE

      = 7416            LINE	EQU	$FOPWRK+FB.NAML;COMMAND BUFFER

      = 747B            NAMTAB	EQU	LINE+101;NAME TABLE

      = 0200            BUFMINL	EQU	512	;MINIMUM SIZE FOR BUFFER (WHEN IN USE)
      = 747B            BUFF	EQU	NAMTAB	;BUFFER AREA STARTS AFTER NAMTAB

      = 747B            RMEML	EQU	BUFF	;INITIAL RUNNING MEMORY LENGTH

7167   (4E10)           	END	ENTRY

00002 Total Errors


00000 Total Warnings

$BATCH             0001 E  $CAD               6947    $CAD0              6959
$CAD1              69A5    $CAD2              69C1    $CAD3              69C4
$CADA              6A12    $CADB              6A37    $CADBL             0007 E
$CADD              6A04    $CCO               6886    $CDEHL             188E E
$CFD               6874    $CHL               1894 E  $COMP              1830 E
$CRLF              6925    $CVD               6E75    $CVD.              6E76
$DAD               6A45    $DADA              183A E  $DADA.             1841 E
$DDD               6AE5    $DDD1              6AE8    $DNS               6E01
$DNS.              6DFF    $DNS1              6E0F    $DNV               6E1E
$DNV1              6E23    $DNV2              6E46    $DNV3              6E49
$DNV4              6E69    $DNVA              6E6B    $DNVB              6E6C
$DRS               6B87 E  $DRS1              6B87    $DRS15             6BEA
$DRS2              6B94    $DRS20             6BFE    $DRS3              6B97
$DRS4              6BA6    $DRS4.5            6BB2    $DRS5              6BBA
$DRS6              6BC2    $DRS7              6BD8    $DRS8              6BDD
$DRSB              6C0C    $DTB               6E7D    $DTB1              6E81
$DTB2              6E88    $DTB3              6E95    $DU66              1846 E
$FCLO              6FFB    $FCLO.             7002    $FCLO1             702B
$FCLO2             7033    $FCLO3             7038    $FCLO4             703E
$FERR1             70C4    $FERR2             70CF    $FERROR            70AD
$FFB               7070    $FOPE1             6F16    $FOPE2             6F31
$FOPEA             6F37 E  $FOPEB             6F3F    $FOPER             6EE6
$FOPER.            6EFB    $FOPEU             6EF4    $FOPEU.            6F01
$FOPEW             6EED    $FOPEW.            6EFE    $FOPWRK            7405 E
$FWBRK             6FB8    $FWBRK.            6FBF    $FWBRK1            6FCA
$FWRIB             6F46    $FWRIB.            6F4D    $GNL               6893
$HLIHL             1889 E  $INDL              189C E  $INDLB             6931
$MCU               68AF    $MLU               689F    $MLU1              68A2
$MOVE              18AA E  $MOVEL             6B74    $MU10              18D4 E
$MU66              18DF E  $MU86              1907 E  $MULTI             0001 E
$REL               1B7F E  $REL.              1B7D E  $RSTALL            1927 E
$RTL               68BF E  $RTL.              68B8    $RTL1              68C0 E
$RTL2              68D1    $RTL3              68D5    $RTL4              68DC
$RTLX              68C0    $RTLXX             68C5    $SAVALL            192C E
$SOB               68E5    $SOB1              68E6    $SORT              6CDB
$SORT.             6CDE    $TBLS              685B    $TBRA              193E E
$TJMP              1931 E  $TJMP.             1932 E  $TYPCC             6919 E
$TYPTX             195E E  $TYPTX.            1964 E  $UDD               196F E
$UDDN              6B02 E  $UDDS              6B07 E  $UDDX              6B0A
$UHB               6B60    $UHW               6B5B    $UOB               6B48
$UOW               6B39    $UOW.              6B40    $WRIB2             6F51
$WRIB3             6F5F    $WRIB4             6F75    $WRIB6             6F97
$WRIB7             6FA1    $WRIB8             6FB3    $ZERO              198A E
$ZEROS             19D0 E  .                  0080 S  .ABUSS             2014 E
.ALEDS             200B E  .CHFLG             0030    .CLEAR             002D
.CLEARA            002E    .CLOSE             0026    .CLRCO             0007
.CONSL             0006    .CRC16             000B    .CRCSUM            2017 E
.CTL2FL            2036 E  .CTLC              0021    .CTLFLG            2009 E
.DAD               0086    .DATE.             0001 E  .DECODE            002B
.DELET             0028    .DELETE            0028 E  .DISMT             0031
.DLEDS             2011 E  .DMNMS             0083    .DMOUN             0081
.DMOUNT            0081 E  .DSPMOD            2007 E  .DSPROT            2006 E
.ERROR             002F    .EXIT              0000    .GDA               000A
.IOWRK             2002 E  .LINK              0020    .LOADD             0032
.LOADO             0008    .MFLAG             2008 E  .MONMS             0082
.MOUNT             0080    .NAME              002C    .NMIRET            2034 E
.OPENC             0025    .OPENR             0022    .OPENU             0024
.OPENW             0023    .POSIT             0027    .PRINT             0003
.READ              0004    .REGI              2005 E  .REGPTR            201D E
.RENAM             0029    .RENAME            0029 E  .RESET             0084
.RESNMS            0085    .SCIN              0001    .SCOUT             0002
.SETTOP            002A E  .SETTP             002A    .START             2000 E
.SYSRES            000C    .TICCNT            201B E  .TIME.             0002 E
.TPERRX            2019 E  .UIVEC             201F E  .VERS              0009
.WRITE             0005    A.DAY              4C31    A.LOOP             4C7E
A.MON              4C3F    A.YR               4C6A    ABORT              61B4
ABS.COD            0008    ABS.ENT            0006    ABS.ID             0000
ABS.LDA            0002    ABS.LEN            0004    ACCESS             7128
ACL                4DF6    AEN                62C7    AEN1               62D9
AEN2               62F8    AENA               717E E  AFFN               5D25
AFTER              7125    AGE                7126    AIO.CGN            2127
AIO.CHA            214E    AIO.CNT            2149    AIO.CSI            2128
AIO.DDA            2121 E  AIO.DES            212D    AIO.DEV            212F
AIO.DIR            2132    AIO.DTA            212B    AIO.EOF            214B
AIO.EOM            214A    AIO.FLG            2123    AIO.GRT            2124
AIO.LGN            2129    AIO.LSI            212A    AIO.SPG            2126
AIO.TFP            214C    AIO.UNI            2131    AIO.VEC            2120
ALLOCA             7130    ATTRIB             7134    B.END              0080 E
B.INT0             0000    B.INT1             0008    B.INT2             0010
B.INT3             0018    B.INT4             0020    B.INT5             0028
B.INT6             0030    B.INT7             0038    B.NMI              0066
B.NMIFL            0069    B.SCALL            003B    BATBUF             0054
BATGNS             0052    BATNAME            0040    BATPTR             0056
BATSEC             0051    BEFORE             7123    BELL               0007 E
BITS               6E9E    BITS1              6EA3    BKSP               0008 E
BLS                58F1    BLS1               5908    BLS2               5918
BLS3               5937    BLS4               5942    BLSA               594C
BLSB               5952    BLSC               5953    BOOT               1F0C E
BOOT.P             0001 E  BPOINT             5772    BRIEF              53C8 E
BS                 0008 E  BSL                62FA    BSL1               6300
BSL2               631D    BSL3               6325    BSLA               636A
BSLFLD             636B    BSLN               6363    BSX.COD            000A
BSX.ID             0000    BSX.PEA            0004    BSX.PSA            0002
BSX.SEA            0008    BSX.SSA            0006    BUFF               747B E
BUFFAD             6ED6 E  BUFMINL            0200 E  BUFPTR             7155
BUFSIZ             7157    C.STX              0002 E  C.SYN              0016 E
CAD                658C    CAD.               6590    CAD.M              69A1
CAD.Y              69E4    CAD0               6592    CAD1               65C7
CAD2               65F4    CAD2.4             660A    CAD2.6             6610
CAD3               662F    CAD4               6631    CAD5               663B
CADA               663F    CADHL              6A01 E  CADL               6991
CADR               69FF    CALSRT             635D E  CB.CLI             0040 E
CB.MTL             0020 E  CB.SPK             0080 E  CB.SSI             0010 E
CB2.CLI            0002 E  CB2.ORG            0020 E  CB2.SID            0040 E
CB2.SSI            0001 E  CBT                7040    CBT1               7047
CCHIT              48C7    CCW                63E6    CCW1               63ED
CCW2               643E    CDA                66B8    CDA5               66DC
CDA6               66EA    CDA7               66EC    CDB.H84            0001 E
CDB.H85            0000 E  CFE                6442    CFE.N              6500
CFE0               6469    CFE00              6465    CFE1               647B
CFE2               648C E  CFE4               648C    CFE5               64A3
CFE6               64B7    CFE7               64CE    CFE8               64DD
CFE9               64EF    CFEA               64FC    CFEF               64FD
CFS                6505    CFS.               6508    CFS1               650B
CFU                5D2D    CHE0               5F3F    CHE1               5F45
CHE1.              5F6C    CHE2               5FF0    CHE3               6009
CHE5               5F90    CHE6               5FCF    CHEA               6033
CHEB               6039    CHEBD              605F    CHEBL              0031 E
CHECK              5F04 E  CHEN               602B    CHKDD              516B
CHKLN              5CDE    CHKTT              515F    CHKVFY             517F
CHKVFY1            51A7    CKERR              51E4    CKSUM              5FE1
CLF.C              5C9A    CLF.S              5CBD    CLF0               5C84
CLF1               5C8A    CLF2               5CA3    CLFA               5C81
CLFL               5C5E    CLFX               5CC0    CLRFLG             5C5B E
CN.DES             0001 E  CN.DIR             0002 E  CN.SOU             0000 E
CNUM0              5323    CNUM1              532A    CNUM2              51DC
CO.FLG             0001 E  CO.LP              4FE2    COLUMN             7132
COMAND             711F    COMP1              6D7A    COMP1.1            6D86
COMP2              6DBB    COMP3              6DC2    COMPARE            6D77
COMPX              6DA7    COMPY              6DB4    COMPZ              6DBE
CONTIG             7136    COPY               4E8C E  COPY.0             4EB2
COPY1              4ED6    COPY1.1            4F17    COPY1.2            4F2D
COPY1.3            4F3B    COPY1.4            4F5D    COPY1.6            4F73
COPY1.7            4F87    COPY2              4F8A E  COPY2.             4FAF
COPY3              4FB2    COPY4              4FCD E  COPY4.             5016
COPY4.1            504A    COPY4.2            505A    COPY4.X            504E
COPY4A             5072    COPY5              508A    COPY5.             5091
COPY6              50A3    COPY7              50C7    COPY7.             50DF
COPYA              50F0    COPYC              50F1    COPYCS             50F5
COPYCT             50F2    COPYD              718F E  COPYE              50DB
COPYF              50F3    COPYG              50F4    COPYNA             50F7
COUNT              7129    CPDEHL             692B    CPYSAF1            5367
CPYSAF2            53A1    CPYSAF3            53BC    CPYSAF4            53C6
CPYSAFE            5350    CPYSFN             5153    CQF                6371
CQF.               6384    CQF1               63C8    CQFN               63C0
CQFX               6396    CQFX.              63AB    CQFY               63C3
CR                 000D E  CS.FLG             0080 E  CSL.CHR            0001 E
CSL.ECH            0080 E  CSL.RAW            0004 E  CSL.WRP            0002 E
CSLIBUF            003E    CTB                7056    CTB1               705F
CTLA               0001 E  CTLB               0002 E  CTLC               0003 E
CTLD               0004 E  CTLE               0005 E  CTLO               000F E
CTLP               0010 E  CTLQ               0011 E  CTLR               0012 E
CTLS               0013 E  CTLX               0018 E  CTLZ               001A E
CTP.2SB            0008 E  CTP.BKM            0002 E  CTP.BKS            0080 E
CTP.FF             0040 E  CTP.HHS            0004 E  CTP.MLI            0020 E
CTP.MLO            0010 E  CTP.TAB            0001 E  CTS                6513
CURREN             7124    CUSTOM             0000 E  CWM                6520
CWM1               6527    D.CNT              713E    D.CON              2048
D.DLYHS            20A4    D.DLYMO            20A3    D.DRVTB            20A9
D.DVCTL            20A2    D.E.CHK            20B7    D.E.HCK            20B8
D.E.HSY            20B6    D.E.MDS            20B5    D.E.TRK            20BA
D.E.VOL            20B9    D.ERR              20B5    D.ERRL             20BB
D.ERTS             2056    D.HECNT            20B1    D.LPSA             204E
D.MAIA             204D    D.NF               5DA7 E  D.OECNT            20B4
D.OF               5D85 E  D.OPR              20BB    D.OPW              20BD
D.RAM              20A0    D.RAML             001F E  D.SDPA             204F
D.SDPB             2050    D.SECNT            20B2    D.SET              713D
D.STSA             2051    D.STSB             2052    D.TRKPT            20A5
D.TS               20A1    D.TT               20A0    D.VEC              2058
D.VOLPT            20A7    D.WHDA             2053    D.WNHA             2054
D.WRITA            204A    D.WRITB            204B    D.WRITC            204C
D.WSCA             2055    D.XITA             2048    DAD1               6A9D
DAD1.              6A9E E  DAD1X              6A9C    DAD2               6AA6
DAD3               6AA9    DADB               6AAF    DADC               6AD3
DADCL              0009 E  DADCX              6ADC    DATE               7133
DATE..             4CB9    DATEA              7144    DATEB              7140
DATEC              7142    DBUF               6A3E    DC.ABT             0007
DC.CLO             0006    DC.DSF             000E    DC.INT             000D
DC.LOD             0009    DC.MAX             000F    DC.MOU             0008
DC.OPR             0003    DC.OPU             0005    DC.OPW             0004
DC.RDY             000A    DC.REA             0000    DC.RER             0002
DC.SET             000B    DC.UNL             000C    DC.WRI             0001
DDF                652E    DDF.BOL            0009 E  DDF.BOO            0000
DDF.LAB            0009    DDF.USR            000A    DDF1               6533
DDF1.0             653E    DDF2               6541    DDF3               6570
DDF4               6574    DDF5               657A    DDFA               657C
DEFALT             7178 E  DEFSRT             6CC1    DEL                007F E
DEL2               5DC1    DEL3               5DCC    DEL3.              5DDE
DEL4               5DE4    DEL5               5DF0    DELETE             5DBE E
DELN               5DFC    DESTBFE            72EB E  DESTBUF            71EB E
DESTFB             715D    DEV.DDA            0004    DEV.DVG            000D
DEV.DVL            000B    DEV.FLG            0006    DEV.JMP            0003
DEV.MNU            0008    DEV.MUM            0007    DEV.NAM            0000
DEV.RES            0002    DEV.UNT            0009    DEVADR             6EE3 E
DEVELEN            000E E  DF.CLR             00FE E  DF.EMP             00FF E
DFSS               6C0E E  DFSS1              6C16    DFSS2              6C3C
DFSSA              6C42 E  DFSSC              6C48    DFTT               6C2F E
DIF.ARC            0008 E  DIF.BAD            0004 E  DIF.CNT            0010 E
DIF.DL             0002 E  DIF.LOC            0040 E  DIF.SYS            0080 E
DIF.USR            0001 E  DIF.WP             0020 E  DIR.ACD            0015
DIR.CRD            0013    DIR.CTH            000B    DIR.CTM            000C
DIR.EXT            0008    DIR.FGN            0010    DIR.FLG            000E
DIR.LGN            0011    DIR.LSI            0012    DIR.NAM            0000
DIR.NOA            000D    DIR.USR            000F    DIRELEN            0017 E
DIRIDL             000B E  DIRNAM             7146    DIS.ENL            01FB
DIS.ENT            0000 E  DIS.LNK            01FE    DIS.SEC            01FC
DISMOU             606F E  DM.MR              0000 E  DM.MW              0001 E
DM.RR              0002 E  DM.RW              0003 E  DNT                6640
DNT1               6647    DNT2               6650    DNT3               6672
DNT4               6685    DNT5               667C    DNTA               668A
DPMTAB             4CCE    DR.FX              0004 E  DR.IM              0001 E
DR.PR              0002 E  DR.SPL             00E0 E  DR.UNL             0008 E
DSSS               6C56 E  DSSS1              6C77    DSSS1.             6C7A
DSSS2              6CBC    DSSSE              6CBA    DSSSL              6C64
DSSSR              6CA7    DSSST              6CC9    DT.CH              0010 E
DT.CR              0002 E  DT.CW              0004 E  DT.DD              0001 E
DT.FX              0020 E  DT.P3              0040 E  DT.RN              0008 E
DT.UL              0080 E  DV.EL              0000 E  DV.NU              0001 E
EBM                6693    EC.CNA             0004    EC.CNR             0034
EC.CUI             0037    EC.DDA             0017    EC.DFM             0031
EC.DIF             000F    EC.DIW             001D    EC.DNI             0025
EC.DNL             002F    EC.DNP             0030    EC.DNR             0026
EC.DNS             0005    EC.DSC             0027    EC.EOF             0001
EC.EOM             0002    EC.FAO             0019    EC.FAP             0016
EC.FIX             002D    EC.FL              0018    EC.FNF             000C
EC.FNO             0009    EC.FNR             001C    EC.FOD             0023
EC.FUC             000B    EC.ICN             000E    EC.IDF             0032
EC.IDN             0006    EC.IFC             0010    EC.IFN             0007
EC.ILA             002E    EC.ILC             0003    EC.ILO             0020
EC.ILR             000A    EC.ILV             001F    EC.IOI             002A
EC.IS              001A    EC.ITS             0033    EC.LAD             002C
EC.LBO             0036    EC.NCV             0028    EC.NEM             0011
EC.NOS             0029    EC.NPM             0024    EC.NRD             0008
EC.NVM             0022    EC.OTL             002B    EC.RF              0012
EC.SDR             0035    EC.UNA             001E    EC.UND             000D
EC.UUN             001B    EC.VPM             0021    EC.WF              0013
EC.WP              0015    EC.WPV             0014    ENL                008A E
ENTRY              4E10 E  EOFFLG             70AC    EOL                0080 E
ERROR              61B8    ERROR1             61D1    ERROR2             61D4
ERRORA             61E2    ESC                001B E  EWS                66F1
EWS1               6738    EWS3               6752    EWS4               678A
EWS6               678B    EWS7               6791    EWSA               6796
EWSB               71C2 E  EWSC               71E0 E  EXIT               4829 E
F.2MHZ             0000 E  F.4MHZ             0001 E  F.6MHZ             0002 E
F.8080             0000 E  F.8085             0040 E  F.CLK              0003 E
F.CPU              00C0 E  F.H19              0010 E  F.H8               0000 E
F.H89              0004 E  F.MACH             000C E  F.OCPU             00C0 E
F.OMACH            000C E  F.TERM             0030 E  F.TTY              0000 E
F.Z100             0008 E  F.Z80              0080 E  FALSE              0001 E
FB.CHA             0000    FB.FLG             0001    FB.FWA             0002
FB.LIM             0006    FB.LWA             0008    FB.NAM             000A
FB.NAML            0011 E  FB.PTR             0004    FBENL              001B E
FCE                5F00    FCEC               52D4    FCEC.              52D3
FCP                5EEF    FCP.               5EF7    FCPC               529C
FF                 000C E  FIELDS             5774    FLAG               7121
FLDTAB             6D92 E  FNUM               5D11    FORCE              7137
FORCHK             5ECE    FORCHKC            527B    FORCK              5291
FORCKC             5EE4    FSUM               5CEE    FSUM.              5CF7
FSUMT              5D1B    FT.ABS             0000 E  FT.BAC             0003 E
FT.DD              0001 E  FT.OC              0010 E  FT.OR              0002 E
FT.OU              0008 E  FT.OW              0004 E  FT.PIC             0001 E
FT.REL             0002 E  FULL               53C8 E  FWBRK2             6FD9
FWBRK3             6FE5    GDWP               679C    GDWP.              67A2
GROUPS             53C8 E  H17TBLS            0001 E  H19FLG             711D
HELP               616B E  HELPC              617D    HELPCL             000E E
HMSF               52DA    HOSBASE            0000 E  I.BRE              0003 E
I.CLR              0007 E  I.CONFL            0004 E  I.CONTY            0001 E
I.CONWI            0003 E  I.COP              0000 E  I.CRC              000A E
I.CSLMD            0000 E  I.CUSOR            0002 E  I.DEL              0008 E
I.DIS              000C E  I.FUB              0011 E  I.FUL              0002 E
I.GRP              0005 E  I.HLP              0010 E  I.LIS              0001 E
I.MIN              0004 E  I.MOU              000B E  I.REN              0009 E
I.RES              000D E  I.SET              0006 E  I.SNA              0012 E
I.VER              000E E  I.VERX             000F E  IEN                61AB
IERR1              6191    IERR2              6194    IERR3              6197
INA                67A6    INDEX              6DE7    INDX               6DEB E
INTERR             6199    IOC.CGN            0008    IOC.CSI            0009
IOC.DDA            0002    IOC.DES            000E    IOC.DEV            0010
IOC.DIL            0011 E  IOC.DIR            0013    IOC.DRL            0008 E
IOC.DTA            000C    IOC.FLG            0004    IOC.GRT            0005
IOC.LGN            000A    IOC.LNK            0000    IOC.LSI            000B
IOC.SPG            0007    IOC.SQL            0003 E  IOC.UNI            0012
IOCCTD             0001 E  IOCELEN            002A E  ISDEHL             6942
KEEP               7135    LAB.AUX            004F E  LAB.AXL            0001 E
LAB.DAT            0000 E  LAB.DIS            0003    LAB.GRT            0005
LAB.IND            0001    LAB.LAB            0011    LAB.LBL            003C E
LAB.LVN            0050    LAB.NOD            0002 E  LAB.PSS            000E
LAB.RGT            000A    LAB.SER            0000    LAB.SIZ            000C
LAB.SPG            0007    LAB.SPT            004F    LAB.SYS            0001 E
LAB.VER            0009    LAB.VFL            0010    LAB.VLT            0008
LAB.VPL            0005 E  LAB.VPR            000C E  LABDEV             6EB8 E
LABEL              72EB E  LABUNI             6EDC E  LF                 000A E
LIMIT              4CC4    LINCNT             5771    LINE               7416 E
LIST               53C8 E  LIST1              53CC    LIST1.5            541F
LIST1.6            54D0    LIST1.7            550F    LIST1.8            551E
LIST1.V            54C0    LIST10             5622    LIST15.            5483
LIST16             5499    LIST3              552A    LIST4              5539
LIST5              5551    LIST6              5560    LIST7              5583
LIST8              559A    LIST9              55AF    LIST9.0            55E9
LIST9.1            55EF    LIST9.2            5618    LISTB              56D8
LISTB.             56EA    LISTF              56FC    LISTF.             5702
LISTHD             5708    LISTHD2            573D    LISTHG             5740
LISTL              56CC    LISTM              56B9    LSN                67C0
LSN1               67C3    LSTA               574D    LSTB               574E
LSTC               574F    LSTCA              5751    LSTCB              5753
LSTCNT             55E3    LSTD               5755    LSTD1              578F
LSTD2              57B4    LSTE               576D    LSTF               576F
LSTFF              57E7    LSTFFL             0001 E  LSTG               57E8
LSTG2              57F8    LSTG2L             0006 E  LSTG3              57FE
LSTG3L             001D E  LSTG4              582D    LSTG4.             5859
LSTG4L             0065 E  LSTG5              5892    LSTG5.             589A
LSTG5L             0013 E  LSTGFL             0045 E  LSTGL              0010 E
LSTGL.             000B E  LSTH               58A5    LSTH1              58A6
LSTH1L             000A E  LSTH2              58B7    LSTH3              58C4
LSTH4              58C6    LSTH5              58D7    LSTH5L             000A E
LSTH6              58E1    LSTH7              58E3    LSTH8              58EF
LSTHFL             004C E  LSTHL              0021 E  LSTL               57E0
LSTLL              0007 E  LSTP3              5770    LSTTAB             55DF
LSTV               577E    LSTV0              5786    LSTV1              57A1
LSTV2              57CA    LSTVL              0050 E  M.CSL              0002
M.SUNI             0004    M.SYDD             0005    M.SYSM             0000
MDR.               6076    MDRA               608D E  MEML               7167 E
MINIMUM            53C8 E  MODE               711E    MOUNT              606A E
MWN                67D0    MWN1               67EB    MWN2               67F1
MWNA               71A0 E  NAMERR             618B    NAMTAB             747B E
NAMTLEN            7159    NAMTMAX            715B    NEGATE             712C
NIBL               6B69    NL                 000A E  NOCOUNT            712A
NOFLAG             7122    NOTASC             4FF0    NUL                0000 E
NUL2               0000 E  NULL               0080 E  OFFF               5D3C
OFFF.              5D3F    PACK               4C85    PACK1              4C9A
PAGE               7131    PATCH              70DD    PEC.CS             0084 E
PEC.DF             0080 E  PEC.DNC            0081 E  PEC.IDF            0086 E
PEC.ISS            0088 E  PEC.IUW            0085 E  PEC.MSS            0089 E
PEC.SFI            0087 E  PEC.TFI            0083 E  PFI                5958
PFI.14             599C    PFI.F              5A91    PFI.NT             5A88
PFI1               596E    PFI1.1             5984    PFI1.4             598E
PFI1.5             59A6    PFI19              5B68    PFI2               59AA
PFI20              5B6D    PFI3               59B0 E  PFI3.5             59D9 E
PFI30              5B7B    PFI31              5B7D    PFI32              5B85
PFI4               5A14    PFI4.0             5ACC    PFI4.1             5AD3
PFI40              5B8E    PFI5               5B56    PFI50              5B95
PFI6               5B59    PFIA               5BA8    PFIB               5BF8
PFID               5C00    PFIDIR             5C01    PFIG               5AE5
PFIS               5C03    PFIT               5C05    PIC.COD            0006
PIC.ID             0000    PIC.LEN            0002    PIC.PTR            0004
PIO.DEV            73EB E  PIO.DIR            73EE E  PIO.UNI            73ED E
PIP                4800 E  PIP.WS             4800 E  PIP1               4850
PIP2               4878    PIPA               48D2    PIPB               48A1
PIPRES             0000 E  PRS                4E10    PRS1               4E82
PRS2               4E85    QUERY              712B    QUOTE              0027 E
RECCNT             6DFD    RECTAB             6DF0 E  REN                67FC
REN1               5E21    REN2               5E4D    REN2.              5E62
REN3               5E7D    RENA               71B1 E  RENAME             5E04 E
RENN               5E9F    RESET              6074 E  RESTART            4835 E
RESTRT             4840    REVERSE            712E    RMEML              747B E
RUBOUT             007F E  RVL                6EAD    S.BATCH            0008 E
S.BAUD             20E4    S.BDA              2150    S.BITS             0062
S.BOOTF            211C    S.BREAK            0020 E  S.CAADR            20DB
S.CACC             2106    S.CCTAB            20DD    S.CDB              20E3
S.CFWA             20EA    S.CLKTR            20CD    S.CODE             2107
S.CONFL            20DA    S.CONTY            20D7    S.CONWI            20D9
S.COUNT            0060    S.CSLMD            20D6    S.CUSOR            20D8
S.CVEC             0070    S.DATC             20C8    S.DATE             20BF
S.DDDTA            20F6    S.DDGRP            20F4    S.DDLDA            20F0
S.DDLEN            20F2    S.DDOPC            20F8    S.DFBLK            006A
S.DFWA             20EC    S.DIREA            210E    S.DLINK            20E6
S.DLY              002B    S.ECHO             0004 E  S.EDLIN            005E
S.EXITA            2040    S.EXITC            0010 E  S.FASER            210B
S.FCI              2111    S.FLAG             007F    S.FMASK            0005
S.GUP              2117    S.HIMEM            20CE    S.INIT             0080 E
S.INT              20E3    S.JUMPS            2108    S.LABEL            0003
S.LWA              0006    S.MOUNT            211A    S.OSI              2156
S.OSO              2157    S.OSZ              2158    S.PATH             005A
S.PRMT             005C    S.REV              000B    S.RFWA             20EE
S.SCI              2114    S.SCR              2151    S.SDD              2108
S.SHIFT            0061    S.SOVR             2176    S.SYSCM            0001 E
S.SYSM             20D0    S.TABUF            0040 E  S.TFWA             20E8
S.TIME             20CA    S.USRM             20D2    S.VAL              20BF
S.VFLG             0002 E  SAFE               7138    SBE                6811
SCCP               5D53    SCCP.              5D59    SCCPF              5DB4
SCCPO              5D92    SDD                6822    SDDA               6831
SETFLG             5C06 E  SETUP              5CC6    SFNLP              5156
SFS                6837    SFS1               6840    SHOW25             52FC
SHOW25.            531A    SHOW25X            5339    SND                6843
SORT               712D    SORT1              6D19    SORT2              6D36
SORT3              6D39    SORT4              6D65    SORTAB             6CD5
SRTABL             0006 E  SRTBX              6D78 E  SRTCAL             55DD E
STACK              2280 E  STACKL             010A E  START              4847
STF.C              5C49    STF.S              5C52    STF0               5C28
STF1               5C3D    STFL               5C09    STFX               5C55
SUBBUF             0058    SUPRES             712F    SW.ACC             4CD9
SW.AFT             4BD1    SW.AGE             4BF1    SW.ALL             4D45
SW.ATT             4D7F    SW.BEF             4B7B    SW.BRE             4A78
SW.BRE1            4A83    SW.C               4BB0    SW.C.              4BBB
SW.C0              4BB4 E  SW.C1              4BC4 E  SW.CLR             4AC0
SW.CNT             4DB9    SW.COL             4D6E    SW.COU             4CDF
SW.COU1            4CED    SW.CRC             4AE1    SW.CS              4B47
SW.CUR             4B95    SW.CUR.            4BC7    SW.DAT             4D79
SW.DATL            0027 E  SW.DEL             4AD7    SW.DIS             4AEB
SW.ERR             4DF1    SW.ERRX            4BEC    SW.FLA             4B25
SW.FLA.            4B41    SW.FOR             4DC6    SW.FUB             4B04
SW.FUL             4A5E    SW.FUL1            4A69    SW.GRP             4A98
SW.GRP1            4AA3    SW.HLP             4AFF    SW.KEE             4DAC
SW.LIS             4A46    SW.LIS1            4A51    SW.LIS2            4A53
SW.MIN             4A88    SW.MIN1            4A93    SW.MOU             4AE6
SW.NEG             4D19    SW.NOC             4CF3    SW.NOC1            4D01
SW.NOF             4B4C    SW.NOF.            4B72    SW.NOF1            4B61
SW.PAG             4D53    SW.PAG1            4D68    SW.QUE             4D07
SW.QUE1            4D13    SW.REN             4ADC    SW.RES             4AF0
SW.REV             4D2B    SW.SAF             4DD3    SW.SET             4AA8
SW.SET1            4AB4    SW.SET2            4ABA    SW.SNA             4B09
SW.SRT             4D1F    SW.SUP             4D31    SW.SYS             4B17
SW.VER             4AF5    SW.VFY             4DD9    SW.VRX             4AFA
SW.XXX             4DDF    SW.YYY             4DE5    SW.ZZZ             4DEB
SWAP               6DC9    SWIT1              4B0B    SWP1               6DCC E
SWP2               6DD8 E  SWP3               6DDF E  SYDD               2058 E
SYSCALL            00FF E  SYSOP              4803    SYSTEM             7120
T.0                5A63    T.1                5A71    T.2                5A79
T.AM               5A4E    T.AP               5A83 E  T.CHA              70A2
T.FLG              70A3    T.FWA              70A4    T.LIM              70A8
T.LWA              70AA    T.PM               5A53    T.PTR              70A6
TAB                0009 E  TBL1               6862    TBL2               6870
TBL3               6872    TDATE              64FE    TFNS               68F3
TFNS.              68F6    TFNS1              690A    TFNS2              6911
TLEN               000A E  TRUE               0000 E  UDDPAD             6B35 E
UDDX1              6B12    UDDX1.5            6B2C    UDDX2              6B2E
UDDX3              6B2F    UNT.DIS            0006    UNT.FLG            0000
UNT.GRT            0002    UNT.GTS            0004    UNT.SIZ            0008 E
UNT.SPG            0001    UO.CLK             0001 E  UO.DDU             0002 E
UO.HLT             0080 E  UO.NFR             0040 E  UOD                6B4F
UOW1               6B47    USER               0001 E  USERFWA            2280 E
V.DAY              4CCB    V.MON              4CCC    V.YR70             4CCD
VAR.I              6DF5    VAR.J              6DF7    VAR.K              6DF9
VAR.M              6DFB    VERIFY             7139    VERS               0030 E
VERSN              6092 E  VERSN0             60CD    VERSN1             60DB
VERSNX             60F2    VERSV0             612C    VERSV1             613A
VERSV2             614B    VERSV3             615C    VFL.80T            0002 E
VFL.DTD            0002 E  VFL.FIX            0004 E  VFL.NSD            0001 E
VT.D               57CE    VT.S               57D4    VT.U               57DA
WARM               4E2B    WARM1              4E63    XATT1              5251
XATTRIB            524C    XCOPY1             50F8    XCOPY2             510E
XCOPY3             5136    XCPY2              5120    XCPY2.             5127
XCPY2..            5129    XDATE              51F3    XDATED             5242 E
XDATET             5238 E  XDATEX             5247    XFLAGS             5265
XFLG1              5272    XRENAM             5EA7    XUSR               713A
YUSR               713B    ZUSR               713C
