0000                    	TITLE	'ONECOPY - ONE DRIVE COPY UTILITY'

                        ***	ONECOPY - SINGLE DRIVE PERIHPERAL INTERCHANGE PROGRAM.
                        *
                        *	J.G. LETWIN, 11/1977 FOR *HEATH* COMPANY
                        *
                        *	COPYRIGHT 1977 BY HEATH COMPANY
                        *
                        *	G.A. Chandler,	78/09	Maintenence Release
                        *			79/04
                        *
                        *			79/11	50.05.00
                        *			80	50.06.00
                        *				 /2.0a/ = /80.09.gc/
                        *				 /2.0b/ = /80.10.gc/
                        *
                        *	R.L. Musgrave,	86/09	50.07.00
0000                    	SPACE	4,10
                        ***	USE:
                        *
                        *	SOURCE1 [,SOURCE2,...,SOURCEN] [/SWITCH1.../SWITCHN]
                        *
                        *	SWITCHES:
                        *
                        *	/L[IST]		LIST
                        *	/B[RIEF]	BRIEF LIST
                        *	/V[ERSION]	ONECOPY VERSION NUMBER
                        *	/ID		SAME AS /V + SOME DATA				/3.0a/
                        *	/M[OUNT]	MOUNT DEVICE
                        *
                        *	/S[YSTEM]	INCLUDE SYSTEM FILES
                        *	/ALL[OCATE]	SHOW ALLOCATED SIZE
                        *	/SU[PRESS]	SUPRESS
                        *	/Q[UERY]	INCLUDE ONLY THOSE FILES YOU TAG		/3.0a/
0000                    	SPACE	4,10
                        **	SYSTEM EQUIVALENCES

      = 0000            CN.SOU	EQU	0	;SOURCE CHANNEL NUMBER
      = 0001            CN.DES	EQU	1	;DESTINATION CHANNEL NUMBER
      = 0002            CN.DIR	EQU	2	;DIRECTORY CHANNEL NUMBER

                        **	PROGRAM ERROR CODES

      = 0080            PEC.DF	EQU	200Q	;DEVICE FORMAT ERROR
      = 0081            PEC.DNC	EQU	201Q	;DEVICES NOT CONSISTANT
      = 0083            PEC.TFI	EQU	203Q	;TARGET FILE ILLEGAL
      = 0084            PEC.CS	EQU	204Q	;CONTRADICTORY SWITCHES
      = 0085            PEC.IUW	EQU	205Q	;ILLEGAL USE OF WILDCARD
      = 0086            PEC.IDF	EQU	206Q	;ILLEGAL DESTINATION FILE FORMAT
      = 0087            PEC.SFI	EQU	207Q	;SOURCE FILE ILLEGAL
      = 0088            PEC.FCI	EQU	210Q	;FILE CONCATINATION ILLEGAL

0000                    	NOTE	MEML-USERFWA
0000                    	NOTE	FDN-PATCH-64

0000                    	XTEXT	DIRDEF
0000                    	SPACE	3,10
                        **	DIRECTORY ENTRY FORMAT.

0000                    	ORG	0

      = 00FF            DF.EMP	EQU	377Q			; ENTRY EMPTY
      = 00FE            DF.CLR	EQU	376Q			; ENTRY EMPTY, REMAINDER ALSO CLEAR

0000   (0008)           DIR.NAM DS	8			; NAME
0008   (0003)           DIR.EXT DS	3			; EXTENSION
      = 000B            DIRIDL	equ	*			; file identification length	/3.0a/

000B   (0001)           DIR.CTH DS	1			; creation time (BCD hours)	/3.0a/
000C   (0001)           DIR.CTM DS	1			; creation date (BCD minutes)	/3.0a/

000D   (0001)           DIR.NOA DS	1			; number of accesses		/3.0a/
000E   (0001)           DIR.FLG DS	1			; FLAGS
000F   (0001)           DIR.USR DS	1			; user area mask		/3.0a/
0010   (0001)           DIR.FGN DS	1			; FIRST GROUP NUMBER
0011   (0001)           DIR.LGN DS	1			; LAST GROUP NUMBER
0012   (0001)           DIR.LSI DS	1			; LAST SECTOR INDEX (IN LAST GROUP)
0013   (0002)           DIR.CRD DS	2			; CREATION DATE
0015   (0002)           DIR.ACD DS	2			; last access date		/3.0a/

      = 0017            DIRELEN EQU	*			; DIRECTORY ENTRY LENGTH
0017                    	XTEXT	DIFDEF
0017                    DIFDEF	SPACE	4,10
                        **	DIRECTORY FILE FLAGS.

      = 0080            DIF.SYS EQU	10000000B		; System file
      = 0040            DIF.LOC EQU	01000000B		; Locked from flag changes
      = 0020            DIF.WP	EQU	00100000B		; Write protected
      = 0010            DIF.CNT EQU	00010000B		; Contiguous file
      = 0008            DIF.ARC EQU	00001000B		; File archive attribute	/3.0a/
      = 0004            DIF.BAD EQU	00000100B		; File is damaged		/3.0a/
      = 0002            DIF.DL	EQU	00000010B		; Locked against delete 	/3.0a/
      = 0001            DIF.USR EQU	00000001B		; User-defined			/3.0a/
0017                    	XTEXT	OVLDEF
0017                    	SPACE	4,10
                        **	OVERLAY TABLE ENTRYS.

0000                    	ORG	0

0000   (0002)           OVL.COD DS	2			; FIRST SECTOR OF OVERLAY CODE
0002   (0002)           OVL.SIZ DS	2			; OVERLAY SIZE
0004   (0002)           OVL.ENT DS	2			; OVERLAY ENTRY POINT
0006   (0001)           OVL.FLB DS	1			; OVERLAY FLAG BYTE
0007   (0001)           	DS	1			; DUMMY BYTE TO ROUND TABLE SIZE UP TO 8
      = 0008            OVL.ENS EQU	*			; OVERLAY ENTRY SIZE

                        *	OVERLAY INDICES

0000                    	ORG	0

0000   (0001)           OVL0	DS	1
0001                    	XTEXT	DEVDEF
0001                    	SPACE	4,10
                        ***	DEVICE TABLE ENTRYS.

0000                    	ORG	0

0000   (0002)           DEV.NAM DS	2			; DEVICE NAME
      = 0000            DV.EL	EQU	00000000B		; END OF DEVICE LIST FLAG
      = 0001            DV.NU	EQU	00000001B		; DEVICE ENTRY NOT IN USE

0002   (0001)           DEV.RES DS	1			; DRIVER RESIDENSE CODE
      = 0001            DR.IM	EQU	00000001B		; DRIVER IN MEMORY
      = 0002            DR.PR	EQU	00000010B		; DRIVER PERMANENTLY RESIDENT
      = 0004            DR.FX	equ	00000100b		; Driver FIXED in memory	/3.0a/
      = 0008            DR.UNL	equ	00001000b		; Driver unload pending 	/3.0a/
                        *	equ	00010000b		; Reserved			/3.0a/
      = 00E0            DR.SPL	equ	11100000b		; SET preamble size mask	/3.0a/

0003   (0001)           DEV.JMP DS	1			; JMP TO PROCESSOR
0004   (0002)           DEV.DDA DS	2			; DRIVER ADDRESS
0006   (0001)           DEV.FLG DS	1			; FLAG BYTE
      = 0001            DT.DD	EQU	00000001B		; DIRECTORY DEVICE
      = 0002            DT.CR	EQU	00000010B		; CAPABLE OF READ OPERATION
      = 0004            DT.CW	EQU	00000100B		; CAPABLE OF WRITE OPERATION
      = 0008            DT.RN	EQU	00001000B		; Capable of random access
      = 0010            DT.CH	EQU	00010000B		; Capable of Character mode
      = 0020            DT.FX	EQU	00100000B		; Fixed Media			/3.0a/
      = 0040            DT.P3	EQU	01000000B		; pre-3.0 media 		/3.0a/
      = 0080            DT.UL	EQU	10000000B		; requires unload notification	/3.0a/

0007   (0001)           DEV.MUM DS	1			; MOUNTED UNIT MASK
0008   (0001)           DEV.MNU DS	1			; MAXIMUM NUMBER OF UNITS
0009   (0002)           DEV.UNT DS	2			; ADDRESS OF UNIT SPECIFIC DATA TABLE

000B   (0002)           DEV.DVL DS	2			; DRIVER BYTE LENGTH
000D   (0001)           DEV.DVG DS	1			; DRIVER ROUTINE GROUP ADDRESS

      = 000E            DEVELEN EQU	*			; DEVICE TABLE ENTRY LENGTH
000E                    UNT.TAB	SPACE	4,10
                        **	UNIT SPECIFIC DEVICE DATA TABLE ENTRIES

0000                    	ORG	0

0000   (0001)           UNT.FLG DS	1			; UNIT SPECIFIC  *DEV.FLG*
0001   (0001)           UNT.SPG DS	1			; Sectors Per Group
0002   (0002)           UNT.GRT DS	2			; ADDRESS OF GRT (IF DT.DD)
0004   (0002)           UNT.GTS DS	2			; GRT SECTOR NUMBER
0006   (0002)           UNT.DIS DS	2			; DIRECTORY FIRST SECTOR NUMBER

      = 0008            UNT.SIZ EQU	*			; SIZE OF UNIT SPECIFIC DATA ENTRY
0008                    	XTEXT	IOCDEF
0008                    IOCDEF	SPACE	3,10
                        **	I/O CHANNEL DEFINITIONS.

0000                    	ORG	0

0000   (0002)           IOC.LNK DS	2			; ADDRESS OF NEXT CHANNEL, =0 IF LAST
0002   (0002)           IOC.DDA DS	2			; THREAD JUMP TO DEVICE DRIVER (VIA DEV TABLE)

0004   (0001)           IOC.FLG DS	1			; FILE TYPE FLAGS
      = 0001            FT.DD	EQU	00000001B		;  =1 IF DIRECTORY DEVICE
      = 0002            FT.OR	EQU	00000010B		;  =1 IF OPEN FOR READ
      = 0004            FT.OW	EQU	00000100B		;  =1 IF OPEN FOR WRITE
      = 0008            FT.OU	EQU	00001000B		;  =1 IF OPEN FOR UPDATE
      = 0010            FT.OC	EQU	00010000B		;  =1 IF OPEN FOR CHARACTER MODE
      = 0003            IOC.SQL EQU	*-IOC.DDA		; LENGTH OF INFO FOR SEQUENTIAL FILE

0005   (0002)           IOC.GRT DS	2			; ADDRESS OF GROUP RESERVATION TABLE
0007   (0001)           IOC.SPG DS	1			; SECTORS PER GROUP, THIS DEVICE
0008   (0001)           IOC.CGN DS	1			; CURRENT GROUP NUMBER
0009   (0001)           IOC.CSI DS	1			; CURRENT SECTOR INDEX (IN CURRENT GROUP)
000A   (0001)           IOC.LGN DS	1			; LAST GROUP NUMBER
000B   (0001)           IOC.LSI DS	1			; LAST SECTOR INDEX (IN LAST GROUP)
      = 0008            IOC.DRL EQU	*-IOC.FLG		; LENGTH OF INFO NORMALLY COPIED BACK TO
                        *					; THE CHANNEL TABLE
000C   (0002)           IOC.DTA DS	2			; DEVICE TABLE ADDRESS FOR THIS DEVICE
000E   (0002)           IOC.DES DS	2			; SECTOR NUMBER OF DIRECTORY ENTRY
0010   (0002)           IOC.DEV DS	2			; DEVICE CODE
0012   (0001)           IOC.UNI DS	1			; UNIT NUMBER (0-9)
      = 0011            IOC.DIL EQU	*-IOC.DDA		; LENGTH OF INFO FOR DIRECTORY FILE

0013   (0017)           IOC.DIR DS	DIRELEN 		; DIRECTORY ENTRY

      = 002A            IOCELEN EQU	*			; IOC ENTRY LENGTH

      = 0001            IOCCTD	EQU	1			; INDEX OF USER CHANNEL #0 IN CHANTAB (FIRST = 0)
002A                    	XTEXT	DISDEF
002A                    DISDEF	SPACE	3,10
                        **	DIRECTORY BLOCK FORMAT.

0000                    	ORG	0

      = 0000            DIS.ENT EQU	*			; FIRST ENTRY ADDRESS

0000   (01FA)           	DS	22*DIRELEN		; 22 DIRECTORY ENTRYS PER BLOCK
01FA   (0001)           	DS	1			; 0 BYTE = END OF ENTRYS IN THIS BLOCK

01FB                    	ORG	512-5			; AT END OF BLOCK

01FB   (0001)           DIS.ENL DS	1			; LENGTH OF EACH ENTRY (=DIRELEN)
01FC   (0002)           DIS.SEC DS	2			; BLOCK # OF THIS BLOCK,
01FE   (0002)           DIS.LNK DS	2			; BLOCK # OF NEXT BLOCK, =0 IF LAST
0200                    	XTEXT	FBDEF
0200                    	SPACE	4,10
                        **	FILE BLOCK DEFINITIONS.

0000                    	ORG	0

0000   (0001)           FB.CHA	DS	1			; CHANNEL NUMBER
0001   (0001)           FB.FLG	DS	1			; FLAGS
0002   (0002)           FB.FWA	DS	2			; BUFFER FWA
0004   (0002)           FB.PTR	DS	2			; BUFFER POINTER
0006   (0002)           FB.LIM	DS	2			; LIMIT OF DATA IN BUFFER (READ)
0008   (0002)           FB.LWA	DS	2			; LWA OF BUFFER
000A   (0011)           FB.NAM	DS	4+8+4+1 		; NAME OF FILE
      = 0011            FB.NAML EQU	*-FB.NAM
      = 001B            FBENL	EQU	*			; ENTRY LENGTH
001B                    	XTEXT	ECDEF
001B                    	SPACE	4,10
                        **	ERROR CODE DEFINITIONS.

0000                    	ORG	0

0000   (0001)           	DS	1		; NO ERROR #0
0001   (0001)           EC.EOF	DS	1		; END OF FILE
0002   (0001)           EC.EOM	DS	1		; END OF MEDIA
0003   (0001)           EC.ILC	DS	1		; ILLEGAL SCALL CODE
0004   (0001)           EC.CNA	DS	1		; CHANNEL NOT AVAILABLE
0005   (0001)           EC.DNS	DS	1		; DEVICE NOT SUITABLE
0006   (0001)           EC.IDN	DS	1		; ILLEGAL DEVICE NAME
0007   (0001)           EC.IFN	DS	1		; ILLEGAL FILE NAME
0008   (0001)           EC.NRD	DS	1		; NO ROOM FOR DEVICE DRIVER
0009   (0001)           EC.FNO	DS	1		; CHANNEL NOT OPEN
000A   (0001)           EC.ILR	DS	1		; ILLEGAL REQUEST
000B   (0001)           EC.FUC	DS	1		; FILE USAGE CONFLICT
000C   (0001)           EC.FNF	DS	1		; FILE NAME NOT FOUND
000D   (0001)           EC.UND	DS	1		; UNKNOWN DEVICE
000E   (0001)           EC.ICN	DS	1		; ILLEGAL CHANNEL NUMBER
000F   (0001)           EC.DIF	DS	1		; DIRECTORY FULL
0010   (0001)           EC.IFC	DS	1		; ILLEGAL FILE CONTENTS
0011   (0001)           EC.NEM	DS	1		; NOT ENOUGH MEMORY
0012   (0001)           EC.RF	DS	1		; READ FAILURE
0013   (0001)           EC.WF	DS	1		; WRITE FAILURE
0014   (0001)           EC.WPV	DS	1		; WRITE PROTECTION VIOLATION
0015   (0001)           EC.WP	DS	1		; DISK WRITE PROTECTED
0016   (0001)           EC.FAP	DS	1		; FILE ALREADY PRESENT
0017   (0001)           EC.DDA	DS	1		; DEVICE DRIVER ABORT
0018   (0001)           EC.FL	DS	1		; FILE LOCKED
0019   (0001)           EC.FAO	DS	1		; FILE ALREADY OPEN
001A   (0001)           EC.IS	DS	1		; ILLEGAL SWITCH
001B   (0001)           EC.UUN	DS	1		; UNKNOWN UNIT NUMBER
001C   (0001)           EC.FNR	DS	1		; FILE NAME REQUIRED
001D   (0001)           EC.DIW	DS	1		; DEVICE IS NOT WRITABLE (OR WRITE LOCKED)
001E   (0001)           EC.UNA	DS	1		; UNIT NOT AVAILABLE
001F   (0001)           EC.ILV	DS	1		; ILLEGAL VALUE
0020   (0001)           EC.ILO	DS	1		; ILLEGAL OPTION
0021   (0001)           EC.VPM	DS	1		; VOLUME PRESENTLY MOUNTED ON DEVICE
0022   (0001)           EC.NVM	DS	1		; NO VOLUME PRESENTLY MOUNTED
0023   (0001)           EC.FOD	DS	1		; FILE OPEN ON DEVICE
0024   (0001)           EC.NPM	DS	1		; NO PROVISIONS MADE FOR REMOUNTING MORE DISKS
0025   (0001)           EC.DNI	DS	1		; DISK NOT INITIALIZED
0026   (0001)           EC.DNR	DS	1		; DISK IS NOT READABLE
0027   (0001)           EC.DSC	DS	1		; DISK STRUCTURE IS CORRUPT
0028   (0001)           EC.NCV	DS	1		; NOT CORRECT VERSION OF HDOS
0029   (0001)           EC.NOS	DS	1		; NO OPERATING SYSTEM MOUNTED
002A   (0001)           EC.IOI	DS	1		; ILLEGAL OVERLAY INDEX
002B   (0001)           EC.OTL	DS	1		; OVERLAY TOO LARGE
002C   (0001)           EC.LAD	DS	1		; File is locked against delete 	/3.0a/
002D   (0001)           EC.FIX	DS	1		; Device media is fixed 		/3.0a/
002E   (0001)           EC.ILA	DS	1		; Illegal Load Address			/3.0a/
002F   (0001)           EC.DNL	DS	1		; Device Not Loaded			/3.0a/
0030   (0001)           EC.DNP	DS	1		; Device Not Locked in Memory		/3.0a/
0031   (0001)           EC.DFM	DS	1		; Device is Fixed in Memory		/3.0a/
0032   (0001)           EC.IDF	DS	1		; Illegal Date Format			/3.0a/
0033   (0001)           EC.ITS	DS	1		; Illegal Time Format			/3.0a/
0034   (0001)           EC.CNR	DS	1		; System Clock Not Resident		/3.0a/
0035   (0001)           EC.SDR	DS	1		; System Disk is Reset			/3.0a/
0036   (0001)           EC.LBO	DS	1		; Line Buffer Overflow			/3.0a/
0037   (0001)           EC.CUI	DS	1		; Can't Unlink from Interrupt Vector	/3.0a/
0038                    	XTEXT	HOSEQU
0038                    	SPACE	4,10
                        **	HDOS SYSTEM EQUIVALENCES.					/3.0a/
                        *

2040                    	ORG	040100A

2040   (0008)           S.EXITA DS	8			; Jump to System Exit

2048   (0010)           D.CON	DS	16			; Disk Constants

      = 2058            SYDD	EQU	*			; System Disk Entry Point

2058   (0048)           D.VEC	DS	24*3			; H17 Disk Vectors
20A0   (001F)           D.RAM	DS	31			; H17 Disk Work Area

20BF   (0024)           S.VAL	DS	36			; SYSTEM VALUES
20E3   (0093)           S.INT	DS	147			; SYSTEM INTERNAL WORK AREAS

2176   (0002)           S.SOVR	DS	2			; STACK OVERFLOW WARNING
2178   (0108)           	DS	042200A-*		; SYSTEM STACK
      = 010A            STACKL	EQU	*-S.SOVR		; STACK SIZE

      = 2280            STACK	EQU	*			; LWA+1 SYSTEM STACK
      = 2280            USERFWA EQU	*			; USER FWA

                        *	Ensure Compatibility

                        	ERRNZ	040130A-SYDD
                        	ERRNZ	040277A-S.VAL
                        	ERRNZ	040343A-S.INT
                        	ERRNZ	042200A-USERFWA
2280                    	XTEXT	HOSDEF
2280                    	SPACE	3,10
                        **	HOSDEF - Define HOS Parameters.
                        *

      = 0030            VERS	equ	3*16+0			; VERSION 3.0			/3.0a/

      = 00FF            SYSCALL equ	377Q			; SYSCALL INSTRUCTION

0000                    	org	0

                        *	Resident Functions

0000   (0001)           .EXIT	ds	1			; EXIT (MUST BE FIRST)
0001   (0001)           .SCIN	ds	1			; SCIN
0002   (0001)           .SCOUT	ds	1			; SCOUT
0003   (0001)           .PRINT	ds	1			; PRINT
0004   (0001)           .READ	ds	1			; READ
0005   (0001)           .WRITE	ds	1			; WRITE
0006   (0001)           .CONSL	ds	1			; SET/CLEAR CONSOLE OPTIONS
0007   (0001)           .CLRCO	ds	1			; CLEAR CONSOLE BUFFER
0008   (0001)           .LOADO	ds	1			; LOAD AN OVERLAY (obsolete)	/3.0a/
0009   (0001)           .VERS	ds	1			; RETURN HDOS VERSION NUMBER
000A   (0001)           .GDA	ds	1			; Get Device Driver Address	/3.0a/
000B   (0001)           .CRC16	ds	1			; CRC a block of memory 	/3.0a/
000C   (0001)           .SYSRES ds	1			; PRECEDING FUNCTIONS ARE RESIDENT


                        *	*HDOSOVL0.SYS*  FUNCTIONS

0020                    	org	40Q

0020   (0001)           .LINK	ds	1			; LINK	(MUST BE FIRST)
0021   (0001)           .CTLC	ds	1			; CTL-C
0022   (0001)           .OPENR	ds	1			; OPENR
0023   (0001)           .OPENW	ds	1			; OPENW
0024   (0001)           .OPENU	ds	1			; OPENU
0025   (0001)           .OPENC	ds	1			; OPENC
0026   (0001)           .CLOSE	ds	1			; CLOSE
0027   (0001)           .POSIT	ds	1			; POSITION
0028   (0001)           .DELET	ds	1			; DELETE
      = 0028            .DELETE equ	.DELET
0029   (0001)           .RENAM	ds	1			; RENAME
      = 0029            .RENAME equ	.RENAM
002A   (0001)           .SETTP	ds	1			; SETTOP
      = 002A            .SETTOP equ	.SETTP
002B   (0001)           .DECODE ds	1			; NAME DECODE
002C   (0001)           .NAME	ds	1			; GET FILE NAME FROM CHANNEL
002D   (0001)           .CLEAR	ds	1			; CLEAR CHAN
002E   (0001)           .CLEARA ds	1			; CLEAR ALL CHANS
002F   (0001)           .ERROR	ds	1			; LOOKUP ERROR
0030   (0001)           .CHFLG	ds	1			; CHANGE FLAGS
0031   (0001)           .DISMT	ds	1			; FLAG SYSTEM DISK DISMOUNTED
0032   (0001)           .LOADD	ds	1			; LOAD DEVICE DRIVER

                        *	*HDOSOVL1.SYS*  FUNCTIONS

0080                    	org	200Q

0080   (0001)           .MOUNT	ds	1			; MOUNT  (MUST BE FIRST)
0081   (0001)           .DMOUN	ds	1			; DISMOUNT
      = 0081            .DMOUNT equ	.DMOUN
0082   (0001)           .MONMS	ds	1			; MOUNT/NO MESSAGE
0083   (0001)           .DMNMS	ds	1			; DISMOUNT/NO MESSAGE
0084   (0001)           .RESET	ds	1			; RESET = DISMOUNT/MOUNT OF UNIT
0085   (0001)           .RESNMS ds	1			; RESET/NO (OR USER) MESSAGE
0086   (0001)           .DAD	ds	1			; Dismount All Disks
0087                    	XTEXT	ASCII
0087                    	SPACE	3,10
                        **	ASCII CHARACTER EQUIVALENCES.

      = 0000            NUL	EQU	000Q			; null
      = 0007            BELL	EQU	007Q			; bell
      = 0008            BKSP	EQU	010Q			; backspace
      = 0008            BS	EQU	BKSP
      = 0009            TAB	EQU	011Q			; horizontal tab
      = 000A            LF	EQU	012Q			; line feed
      = 000A            NL	EQU	012Q			; new line (HDOS)
      = 000C            FF	EQU	014Q			; form feed
      = 000D            CR	EQU	015Q			; carriage return
      = 001B            ESC	EQU	033Q			; escape
      = 007F            DEL	EQU	177Q			; delete

                        *	Specials

      = 0080            EOL	EQU	200Q			; end of line flag
      = 0080            NULL	EQU	200Q			; pad character
      = 0000            NUL2	EQU	0			; ditto
      = 007F            RUBOUT	EQU	DEL			; rubout/delete
      = 0016            C.SYN	EQU	026Q			; SYNC
      = 0002            C.STX	EQU	002Q			; STX
      = 0027            QUOTE	EQU	047Q			; quote character (")
      = 008A            ENL	EQU	NL+EOL			; NL + end-of-line flag

                        *	Control keys

      = 0001            CTLA	EQU	'A'-'@' 		; CTRL/A
      = 0002            CTLB	EQU	'B'-'@' 		; CTRL/B
      = 0003            CTLC	EQU	'C'-'@' 		; CTRL/C
      = 0004            CTLD	EQU	'D'-'@' 		; CTRL/D
      = 0005            CTLE	EQU	'E'-'@' 		; CTRL/E
      = 000F            CTLO	EQU	'O'-'@' 		; CTRL/O
      = 0010            CTLP	EQU	'P'-'@' 		; CTRL/P
      = 0011            CTLQ	EQU	'Q'-'@' 		; CTRL/Q
      = 0012            CTLR	EQU	'R'-'@' 		; CTRL/R
      = 0013            CTLS	EQU	'S'-'@' 		; CTRL/S
      = 0018            CTLX	EQU	'X'-'@' 		; CTRL/X
      = 001A            CTLZ	EQU	'Z'-'@' 		; CTRL/Z
0087                    	XTEXT	ESINT
0087                    	SPACE	4,10
                        **	S.INT - SYSTEM INTERNAL WORKAREA DEFINITIONS.
                        *
                        *	THESE CELLS ARE REFERENCED BY OVERLAYS AND MAIN CODE, AND
                        *	MUST THEREFORE RESIDE IN FIXED LOW MEMORY.

20E3                    	ORG	S.INT

                        **	CONSOLE STATUS FLAGS

20E3   (0001)           S.CDB	DS	1			; CONSOLE DESCRIPTOR BYTE
      = 0000            CDB.H85	EQU	00000000B
      = 0001            CDB.H84 EQU	00000001B		; =0 IF H8-5, =1 IF H8-4
20E4   (0002)           S.BAUD	DS	2			; [0-14]  H8-4 BAUD RATE, =0 IF H8-5
                        *					; [15]	  =1 IF BAUD RATE => 2 STOP BITS

                        **	TABLE ADDRESS WORDS

20E6   (0002)           S.DLINK DS	2			; ADDRESS OF DATA IN HDOS CODE
20E8   (0002)           S.TFWA	DS	2			; FWA Task Table		/3.1a/
20EA   (0002)           S.CFWA	DS	2			; FWA CHANNEL TABLE
20EC   (0002)           S.DFWA	DS	2			; FWA DEVICE TABLE
20EE   (0002)           S.RFWA	DS	2			; FWA RESIDENT HDOS CODE

                        **	DEVICE DRIVER DELAYED LOAD FLAGS

20F0   (0002)           S.DDLDA DS	2			; DRIVER LOAD ADDRESS (HIGH BYTE=0 IF NO LOAD PENDING)
20F2   (0002)           S.DDLEN DS	2			; CODE LENGTH IN BYTES
20F4   (0001)           S.DDGRP DS	1			; GROUP NUMBER FOR DRIVER
20F5   (0001)           	DS	1			; HOLD PLACE
20F6   (0002)           S.DDDTA DS	2			; DEVICE'S ADDRESS IN DEVLST +DEV.RES
20F8   (0001)           S.DDOPC DS	1			; OPEN OPCODE PENDEDING

20F9   (000D)           	DS	13			; reserved

                        *	SYSCALL PROCESSING WORK AREAS

                        	ERRNZ	*-041006A
2106   (0001)           S.CACC	DS	1			; (ACC) UPON SYSCALL
2107   (0001)           S.CODE	DS	1			; SYSCALL INDEX IN PROGRESS

                        *	JUMPS TO ROUTINES IN RESIDENT HDOS CODE

2108   (0000)           S.JUMPS DS	0			; START OF DUMP VECTORS
2108   (0003)           S.SDD	DS	3			; JUMP TO STAND-IN DEVICE DRIVER
210B   (0003)           S.FASER DS	3			; JUMP TO FATSERR (FATAL SYSTEM ERROR)
210E   (0003)           S.DIREA DS	3			; JUMP TO DIREAD (DISK FILE READ)
2111   (0003)           S.FCI	DS	3			; JUMP TO FCI (FETCH CHANNEL INFO)
2114   (0003)           S.SCI	DS	3			; JUMP TO SCI (STORE CHANNEL INFO)
2117   (0003)           S.GUP	DS	3			; JUMP TO GUP (GET UNIT POINTER)

211A   (0001)           S.MOUNT DS	1			; <>0 IF THE SYSTEM DISK IS MOUNTED
211B   (0001)           	DS	1			; reserved			/3.0a/

211C   (0001)           S.BOOTF DS	1			; BOOT FLAGS
      = 0001            BOOT.P	EQU	00000001B		; EXECUTE PROLOGUE UPON BOOTUP

211D   (0003)           	DS	3			; reserved
2120                    	SPACE	4,10
                        **	ACTIVE I/O AREA.
                        *
                        *	THE AIO.XXX AREA CONTAINS INFORMATION ABOUT THE I/O OPERATION
                        *	CURRENTLY BEING PERFORMED. THE INFORMATION IS OBTAINED FROM
                        *	THE CHANNEL TABLE, AND WILL BE RESTORED THERE WHEN DONE.
                        *
                        *	NORMALLY, THE AIO.XXX INFORMATION WOULD BE OBTAINED DIRECTLY
                        *	FROM VARIOUS SYSTEM TABLES VIA POINTER REGISTERS. SINCE THE
                        *	8080 HAS NO GOOD INDEXED ADDRESSING, THE DATA IS MANUALLY
                        *	COPIED INTO THE AIO.XXX CELLS BEFORE PROCESSING, AND
                        *	BACKDATED AFTER PROCESSING.

                        	ERRNZ	*-041040A
2120   (0003)           AIO.VEC DS	3			; JUMP INSTRUCTION
      = 2121            AIO.DDA EQU	*-2			; DEVICE DRIVER ADDRESS
2123   (0001)           AIO.FLG DS	1			; FLAG BYTE
2124   (0002)           AIO.GRT DS	2			; ADDRESS OF GROUP RESERV TABLE
2126   (0001)           AIO.SPG DS	1			; SECTORS PER GROUP
2127   (0001)           AIO.CGN DS	1			; CURRENT GROUP NUMBER
2128   (0001)           AIO.CSI DS	1			; CURRENT SECTOR INDEX
2129   (0001)           AIO.LGN DS	1			; LAST GROUP NUMBER
212A   (0001)           AIO.LSI DS	1			; LAST SECTOR INDEX
212B   (0002)           AIO.DTA DS	2			; DEVICE TABLE ADDRESS
212D   (0002)           AIO.DES DS	2			; DIRECTORY SECTOR
212F   (0002)           AIO.DEV DS	2			; DEVICE CODE
2131   (0001)           AIO.UNI DS	1			; UNIT NUMBER (0-9)

2132   (0017)           AIO.DIR DS	DIRELEN 		; DIRECTORY ENTRY

2149   (0001)           AIO.CNT DS	1			; SECTOR COUNT
214A   (0001)           AIO.EOM DS	1			; END OF MEDIA FLAG
214B   (0001)           AIO.EOF DS	1			; END OF FILE FLAG
214C   (0002)           AIO.TFP DS	2			; TEMP FILE POINTERS
214E   (0002)           AIO.CHA DS	2			; ADDRESS OF CHANNEL BLOCK (IOC.DDA)
2150                    	SPACE	4,10
                        *	these cells set by monitor boot code

2150   (0001)           S.BDA	DS	1			; Boot Device Address (Setup by ROM)
2151   (0002)           S.SCR	DS	2			; SYSTEM SCRATCH AREA ADDRESS
2153   (0003)           	DS	3
2156   (0001)           S.OSI	DS	1			; Operating system index	/3.0a/
2157   (0001)           S.OSO	DS	1			; Operating system occurance	/3.0a/
2158   (0003)           S.OSZ	DS	3			; Operating system sector zero	/3.0a/
215B                    	XTEXT	ESVAL
215B                    	SPACE	4,10
                        **	S.VAL - SYSTEM VALUE DEFINTIONS.
                        *
                        *	THESE VALUES ARE SET AND MAINTAINED BY THE SYSTEM.
                        *
                        *	THE DECK HOSEQU MUST BE MODIFIED WHEN THIS IS MODIFIED.

20BF                    	ORG	S.VAL

20BF   (0009)           S.DATE	DS	9			; SYSTEM DATE (IN ASCII)
20C8   (0002)           S.DATC	DS	2			; CODED DATE
20CA   (0003)           S.TIME	DS	3			; TIME (BCD HH MM SS)		/3.0a/
20CD   (0001)           S.CLKTR DS	1			; 0 if no clock task resident	/3.0a/
20CE   (0002)           S.HIMEM DS	2			; HARDWARE HIGH MEMORY ADRESS+1

20D0   (0002)           S.SYSM	DS	2			; FWA RESIDENT SYSTEM

20D2   (0002)           S.USRM	DS	2			; LWA USER MEMORY

20D4   (0002)           	DS	2			; obsolete (must be zero!!)	/3.0a/
20D6                    	SPACE	3,10
                        **	THE FOLLOWING CELLS SHOULD BE MODIFIED/READ ONLY VIA THE .CONSL SCALL

      = 0080            CSL.ECH EQU	10000000B		; SUPPRESS ECHO
      = 0004            CSL.RAW EQU	00000100B		; Raw Mode I/O
      = 0002            CSL.WRP EQU	00000010B		; WRAP LINES AT WIDTH
      = 0001            CSL.CHR EQU	00000001B		; OPERATE IN CHARACTER MODE

      = 0000            I.CSLMD EQU	0			; S.CSLMD IS FIRST BYTE
20D6   (0001)           S.CSLMD DS	1			; CONSOLE MODE


      = 0080            CTP.BKS EQU	10000000B		; TERMINAL PROCESSES BACKSPACES
      = 0040            CTP.FF	EQU	01000000B		; Terminal Processes Form-Feed
      = 0020            CTP.MLI EQU	00100000B		; MAP LOWER CASE TO UPPER ON INPUT
      = 0010            CTP.MLO EQU	00010000B		; MAP LOWER CASE TO UPPER ON OUTPUT
      = 0008            CTP.2SB EQU	00001000B		; TERMINAL NEEDS TWO STOP BITS
      = 0004            CTP.HHS EQU	00000100B		; Terminal uses hdwr handshake	/3.0a/
      = 0002            CTP.BKM EQU	00000010B		; MAP BKSP (UPON INPUT) TO RUBOUT
      = 0001            CTP.TAB EQU	00000001B		; TERMINAL SUPPORTS TAB CHARACTERS

      = 0001            I.CONTY EQU	1			; S.CONTY IS 2ND BYTE
                        	ERRNZ	*-S.CSLMD-I.CONTY
20D7   (0001)           S.CONTY DS	1			; CONSOLE TYPE FLAGS


      = 0002            I.CUSOR EQU	2			; S.CUSOR IS 3RD BYTE
                        	ERRNZ	*-S.CSLMD-I.CUSOR
20D8   (0001)           S.CUSOR DS	1			; CURRENT CURSOR POSITION


      = 0003            I.CONWI EQU	3			; S.CONWI IS 4TH BYTE
                        	ERRNZ	*-S.CSLMD-I.CONWI
20D9   (0001)           S.CONWI DS	1			; CONSOLE WIDTH


      = 0001            CO.FLG	EQU	00000001B		; CTL-O FLAG
      = 0080            CS.FLG	EQU	10000000B		; CTL-S FLAG

      = 0004            I.CONFL EQU	4			; S.CONFL IS 5TH BYTE
                        	ERRNZ	*-S.CSLMD-I.CONFL
20DA   (0001)           S.CONFL DS	1			; CONSOLE FLAGS


20DB   (0002)           S.CAADR DS	2			; ADDRESS FOR ABORT PROCESSING (>256 IF VALID)
20DD   (0006)           S.CCTAB DS	6			; ADDR FOR CTL-A, CTL-B, CTL-C PROCESSING
20E3                    	XTEXT	DDDEF
20E3                    	SPACE	3,10
                        **	DEVICE DRIVER COMMUNICATION FLAGS.
                        *

0000                    	ORG	0

0000   (0001)           DC.REA	DS	1			; READ
0001   (0001)           DC.WRI	DS	1			; WRITE
0002   (0001)           DC.RER	DS	1			; READ REGARDLESS
0003   (0001)           DC.OPR	DS	1			; OPEN FOR READ
0004   (0001)           DC.OPW	DS	1			; OPEN FOR WRITE
0005   (0001)           DC.OPU	DS	1			; OPEN FOR UPDATE
0006   (0001)           DC.CLO	DS	1			; CLOSE
0007   (0001)           DC.ABT	DS	1			; ABORT
0008   (0001)           DC.MOU	DS	1			; MOUNT DEVICE
0009   (0001)           DC.LOD	DS	1			; LOAD DEVICE DRIVER
000A   (0001)           DC.RDY	DS	1			; Device Ready
000B   (0001)           DC.SET	DS	1			; Update SET parameters 	/3.0a/
000C   (0001)           DC.UNL	DS	1			; Unload device driver		/3.0a/
000D   (0001)           DC.INT	DS	1			; Interrupt			/3.0a/
000E   (0001)           DC.DSF	DS	1			; Device-specific function	/3.0a/
000F   (0001)           DC.MAX	DS	1			; MAXIMUM ENTRY INDEX
0010                    	XTEXT	DDFDEF
0010                    	SPACE	3,10
                        **	DIRECTORY DEVICE FORMAT DEFINITION.
                        *

0000                    	ORG	0

0000   (0009)           DDF.BOO DS	9			; 2K BOOT PROGRAM
      = 0009            DDF.BOL EQU	*			; LENGTH OF BOOT
0009   (0001)           DDF.LAB DS	1			; LABEL SECTOR
000A   (0000)           DDF.USR DS	0			; BEGINNING OF OPEN SPACE
000A                    	XTEXT	LABDEF
000A                    	SPACE	3,10
                        **	DISK LABEL SECTOR FORMATS.

0000                    	ORG	0

0000   (0001)           LAB.SER DS	1			; SERIAL NUMBER OF VOLUME
0001   (0002)           LAB.IND DS	2			; INITIALIZATION DATE
0003   (0002)           LAB.DIS DS	2			; SECTOR NUMBER OF 1ST DIRECTORY SECTOR
0005   (0002)           LAB.GRT DS	2			; INDEX OF GRT SECTOR
0007   (0001)           LAB.SPG DS	1			; SECTORS PER GROUP

      = 0000            LAB.DAT EQU	0			; DATA VOLUME ONLY
      = 0001            LAB.SYS EQU	1			; SYSTEM VOLUME
      = 0002            LAB.NOD EQU	2			; VOLUME HAS NO DIRECTORY

0008   (0001)           LAB.VLT DS	1			; VOLUME TYPE
0009   (0001)           LAB.VER DS	1			; VERSION OF INIT17 THAT INITED DISK

000A   (0002)           LAB.RGT DS	2			; RGT sector number

      = 000C            LAB.VPR EQU	*			; Volume dependant data
000C   (0002)           LAB.SIZ DS	2			;  Volume Size (Bytes/256)
000E   (0002)           LAB.PSS DS	2			;  Physical Sector Size
0010   (0001)           LAB.VFL DS	1			;  Volume dependant Flags
      = 0001            VFL.NSD EQU	00000001B		;   Number of Sides:  1 => 2
      = 0002            VFL.DTD EQU	00000010b		;   96 tracks per inch		/3.0a/
      = 0002            VFL.80T EQU	VFL.DTD 		;   (ditto)
      = 0004            VFL.FIX EQU	00000100b		;   Media is fixed		/3.0a/
      = 0005            LAB.VPL EQU	*-LAB.VPR		; Length of volume dependant data

                        	ERRMI	5-LAB.VPL
0011   (0000)           	DS	5-LAB.VPL		; Reserved

0011   (003C)           LAB.LAB DS	60			; LABEL
      = 003C            LAB.LBL EQU	*-LAB.LAB		; LABEL LENGTH
004D   (0002)           	DS	2			; Reserved for 0 bytes

      = 004F            LAB.AUX EQU	*			; Auxiliary Data
004F   (0001)           LAB.SPT DS	1			;  Sectors per Track
      = 0001            LAB.AXL EQU	*-LAB.AUX		; Length of Aux. Data

0050   (0002)           LAB.LVN DS	2			; Long volume number		/3.0a/
0052                    	XTEXT	FILDEF
0052                    	SPACE	4,10
                        **	FILDEF - FILE TYPE DEFINITIONS.
                        *
                        *	DB	377Q,FT.XXX

      = 0000            FT.ABS	EQU	0			; ABSOLUTE BINARY
      = 0001            FT.PIC	EQU	1			; POSITION INDEPENDANT CODE
      = 0002            FT.REL	EQU	2			; RELOCATABLE CODE
      = 0003            FT.BAC	EQU	3			; COMPILED BASIC CODE
0052                    	XTEXT	ABSDEF
0052                    ABSDEF	SPACE	3,10
                        **	ABS FORMAT EQUIVALENCES.

0000                    	ORG	0

0000   (0001)           ABS.ID	DS	1	;377Q = BINARY FILE FLAG
0001   (0001)           	DS	1	;FILE TYPE (FT.ABS)
0002   (0002)           ABS.LDA	DS	2	;LOAD ADDRESS
0004   (0002)           ABS.LEN	DS	2	;LENGTH OF ENTIRE RECORD
0006   (0002)           ABS.ENT	DS	2	;ENTRY POINT

0008   (0000)           ABS.COD	DS	0	;CODE STARTS HERE
0008                    	STL	'MAIN ROUTINE'
0008                    	EJECT
2280                    	ORG	USERFWA

      = 2280            OCFWA	EQU	*

                        *	Since this code overlays PRS, it is included here

2280  CD 8A27           PRS3	CALL	GETLAB	;Get Label
2283  D8                	RC
2284  01 0001           	LXI	B,256
2287  11 BF36           	LXI	D,LABEL
228A  21 BF35           	LXI	H,SLABEL
228D  CD AA18           	CALL	$MOVE	;Save Current Label

2290  CD 7C27           	CALL	MND	;Mount New Disk
2293  DA 542C           	JC	ERROR
2296  3A BF36           	LDA	LABEL+LAB.SER
2299  32 6B35           	STA	VOLSER	;Set Current Volume Number
229C  C3 A622           	JMP	START

      = 229F            PIP	EQU	*

                        *	COMMAND INTERPRETATION COMES HERE

      = 229F            RESTART	EQU	*

229F  3A 7035           	LDA	MODE
22A2  A7                	ANA	A
22A3  C2 0623           	JNZ	EXIT	;ENTERED WITH COMMAND, WILL NOW EXIT
22A6  31 8022           START	LXI	SP,STACK;CLEAN STACK
22A9  CD AF22           	CALL	PIP1	;EXECUTE COMMAND

                        *	COMMANDS EXIT HERE IF NO ERRORS FOUND

22AC  C3 9F22           	JMP	RESTART

                        *	GET READY TO PROCESS COMMAND

22AF  CD C030           PIP1	CALL	SDD	;SET DEFAULT DEFAULT

                        *	CLEAR CHANNELS AND FILE BUFFER

22B2  FF 2E             	SCALL	.CLEARA ;CLEAR CHANNELS
22B4  AF                	XRA	A
22B5  32 8835           	STA	DESTFB+FB.FLG;FLAG FILE NOT OPEN

                        *	CLEAR DYNAMIC BUFFERS

22B8  21 0000           	LXI	H,0
22BB  22 8535           	SHLD	BUFSIZ	;EMPTY BUFFER
22BE  22 A235           	SHLD	NAMTLEN	;CLEAR NAMTAB
22C1  22 A435           	SHLD	NAMTMAX	;CLEAR NAMTAB AREA
22C4  21 3E38           	LXI	H,BUFF
22C7  22 8335           	SHLD	BUFPTR	;SET BUFFER AGAINST END OF NAMTAB

                        *	INPUT COMMAND LINE

22CA  CD 1831           	CALL	$CCO	;CLEAR CONTROL-O
22CD  3A 7035           	LDA	MODE
22D0  A7                	ANA	A
22D1  CC B823           	CZ	ACL	;ACCEPT COMMAND LINE (UNLESS WAS PASSED ONE BY CALLER)
22D4  DA 0623           	JC	EXIT	;EOF
22D7  21 D937           	LXI	H,LINE	;(HL) = COMMAND ADDRESS
22DA  11 1323           	LXI	D,PIPA	;(DE) = SWITCH LIST
                        	ERRNZ	I.COP
22DD  AF                	XRA	A	;(A) = #I.COP
22DE  32 6F35           	STA	COMAND	;ASSUME COPY COMMAND
22E1  32 7135           	STA	SUPRES	;CLEAR /SU FLAG
22E4  32 6E35           	STA	ALLOCA	;Clear /ALL flag
22E7  32 7235           	STA	QUERY	;Clear /Q flag
22EA  3C                	INR	A	;FLAG NO /S FLAG
22EB  32 7335           	STA	SYSTEM	;CLEAR /S FLAG
22EE  CD 0B33           	CALL	$DRS	;DETECT AND REMOVE SWITCHES
22F1  DA 542C           	JC	ERROR	;ERROR
22F4  3A 6F35           	LDA	COMAND
22F7  CD 3119           	CALL	$TJMP	;PROCESS COMMAND
22FA                    	EJECT
                        **	COMMAND LIST

22FA   (0000)           PIPB	DS	0	;COMMAND PROCESSOR TABLE
      = 0000            I.COP	EQU	*-PIPB/2	;COMMAND INDEX
22FA  ED23              	DW	COPY
      = 0001            I.LIS	EQU	*-PIPB/2	;COMMAND INDEX
22FC  A127              	DW	LIST	;/L
      = 0002            I.BRE	EQU	*-PIPB/2	;COMMAND INDEX
22FE  A727              	DW	BRIEF	;/B
      = 0003            I.VER	EQU	*-PIPB/2	;COMMAND INDEX
2300  562B              	DW	VERSN	;/V
      = 0004            I.ID	EQU	*-PIPB/2	;COMMAND INDEX
2302  952B              	DW	ID	;/ID
      = 0005            I.MOU	EQU	*-PIPB/2	;COMMAND INDEX
2304  CE23              	DW	MOUNT	;/M

                        *	CTL-D HIT

2306  AF                EXIT	XRA	A
2307  FF 00             	SCALL	.EXIT	;EXIT
2309                    CCHIT	SPACE	3,10
                        **	CCHIT - CTL-C HIT
                        *
                        *	ENTRY	FROM SYSTEM

2309  CD 5E19           CCHIT	CALL	$TYPTX
230C  5EC3              	DB	'^','C'+200Q
230E  FF 07             	SCALL	.CLRCO	;CLEAR CONSOLE TYPEAHEAD
2310  C3 9F22           	JMP	RESTART	;GET NEW COMMAND
2313                    	STL	'SWITCH PROCESSING TABLES AND ROUTINES'
2313                    	EJECT
                        ***	SWITCH PROCESSING TABLES AND ROUTINES.
                        *
                        *	COMMAND SWITCHES ARE PROCESSED VIA THE ROUTINE $DRS, 'DECODE AND
                        *	REMOVE SWITCHES'. $DRS IS SUPPLIED WITH A SWITCH DESCRIPTION
                        *	TABLE, WHICH CONTAINS THE ADDRESSES OF ROUTINES
                        *	WHICH ARE ENVOKED WHEN THE SWITCHES ARE ENCOUNTERED.

                        **	SWITCH TABLE

2313   (0000)           PIPA	DS	0	;FWA SWITCH TABLE

2313  4C                	DB	'L'	;/LIST
2314  C9D3D480          	DB	'I'+200Q,'S'+200Q,'T'+200Q,200Q
2318  9823              	DW	SW.LIS	;PROCESS LIST

231A  42                	DB	'B'	;/BRIEF
231B  D2C9C5C6 80       	DB	'R'+200Q,'I'+200Q,'E'+200Q,'F'+200Q,200Q
2320  8523              	DW	SW.BRE	;PROCESS BRIEF

2322  56                	DB	'V'	;/VERSION
2323  C5D2D3C9 CFCE80   	DB	'E'+200Q,'R'+200Q,'S'+200Q,'I'+200Q,'O'+200Q,'N'+200Q,200Q
232A  A923              	DW	SW.VER	;PROCESS VERSION

232C  4944              	DB	'ID'	;/ID
232E  80                	DB	200Q
232F  AE23              	DW	SW.ID	;PROCESS ID

2331  4D                	DB	'M'	;/MOUNT
2332  CFD5CED4 80       	DB	'O'+200Q,'U'+200Q,'N'+200Q,'T'+200Q,200Q
2337  B323              	DW	SW.MOU	;PROCESS MOUNT

2339  53                	DB	'S'	;/SYSTEM
233A  D9D3D4C5 CD80     	DB	'Y'+200Q,'S'+200Q,'T'+200Q,'E'+200Q,'M'+200Q,200Q
2340  7423              	DW	SW.SYS	;PROCESS SYSTEM

2342  414C4C            	DB	'ALL'	;/ALLOCATE
2345  CFC3C1D4 C580     	DB	'O'+200Q,'C'+200Q,'A'+200Q,'T'+200Q,'E'+200Q,200Q
234B  6E23              	DW	SW.ALL	;PROCESS ALLOCATE

234D  5355              	DB	'SU'	;/SUPRESS
234F  D0D2C5D3 D380     	DB	'P'+200Q,'R'+200Q,'E'+200Q,'S'+200Q,'S'+200Q,200Q
2355  7923              	DW	SW.SUP	;PROCESS SUPRESS

2357  51                	DB	'Q'	;/QUERY
2358  D5C5D2D9 80       	DB	'U'+200Q,'E'+200Q,'R'+200Q,'Y'+200Q,200Q
235D  7F23              	DW	SW.QUE	;PROCESS QUERY

235F  00                	DB	0	;END OF TABLE
2360                    	EJECT
2360                    SWIT1	SPACE	3,10
                        *	SWIT1 - PROCESS MAJOR FUNCTION SWITCH.
                        *
                        *	SWIT1 IS ENTERED TO PROCESS SWITCHES WHICH DETERMINE THE FUNCTION
                        *	PIP IS TO PERFORM. I.E. 'VERB' SWITCHES, SUCH
                        *	AS /DELETE (AS OPOSED TO 'MODIFIER' SWITCHES, LIKE /SYSTEM)

2360  01 6F35           SWIT1	LXI	B,COMAND
2363  F5                	PUSH	PSW	;SAVE COMMAND
2364  0A                	LDAX	B	;(A) = PREVIOUS COMMAND
2365  A7                	ANA	A
2366  3E 84             	MVI	A,PEC.CS;CONTRADICTORY SWITCHES
2368  C2 542C           	JNZ	ERROR	;IF SO
236B  F1                	POP	PSW	;(A) = NEW CODE
236C  02                	STAX	B	;STORE IT
236D  C9                	RET
236E                    SW.ALL	SPACE	4,10
                        **	SW.ALL - /ALLOCATE Switch Detected

236E  3E 01             SW.ALL	MVI	A,1
2370  32 6E35           	STA	ALLOCA
2373  C9                	RET
2374                    SW.SYS	SPACE	3,10
                        **	SW.SYS - /SYSTEM Switch Detected

2374  AF                SW.SYS	XRA	A	;SET /S FLAG
2375  32 7335           	STA	SYSTEM
2378  C9                	RET
2379                    SW.SUP	SPACE	4,10
                        **	SW.SUP - /SUPRESS Switch Detected

2379  3E 01             SW.SUP	MVI	A,1
237B  32 7135           	STA	SUPRES
237E  C9                	RET
237F                    SW.QUE	SPACE	4,10
                        **	SW.QUE - /QUERY Switch Detected

237F  3E 01             SW.QUE	MVI	A,1
2381  32 7235           	STA	QUERY
2384  C9                	RET
2385                    SW.BRE	SPACE	3,10
                        **	SW.BRE - /BRIEF Switch Detected

2385  3A 6F35           SW.BRE	LDA	COMAND	;ALLOW TO SUPERCEDE /LIST
2388  A7                	ANA	A
2389  CA 9223           	JZ	SW.BRE1	;NO OTHER COMMAND
                        	ERRNZ	I.LIS-1
238C  3D                	DCR	A
238D  3E 84             	MVI	A,PEC.CS;ASSUME CONTRADICTORY SWITCHES
238F  C2 542C           	JNZ	ERROR
2392  3E 02             SW.BRE1	MVI	A,I.BRE	;IS /BREIF
2394  32 6F35           	STA	COMAND
2397  C9                	RET
2398                    SW.LIS	SPACE	3,10
                        **	SW.LST - /LIST Switch Detected

2398  3A 6F35           SW.LIS	LDA	COMAND
239B  A7                	ANA	A
239C  CA A323           	JZ	SW.LIS1	;NO FUNCTION
                        	ERRNZ	I.BRE-2
                        	ERRNZ	I.LIS-1
239F  D6 03             	SUI	3
23A1  3F                	CMC
23A2  D0                	RNC			ALREADY;HAVE ONE SPECIFIED, I.BRE OVERRULES
23A3  3E 01             SW.LIS1	MVI	A,I.LIS	;/LIST
23A5  32 6F35           	STA	COMAND
23A8  C9                	RET
23A9                    SW.VER	SPACE	3,10
                        **	SW.VER - /VERSION Switch Detected

23A9  3E 03             SW.VER	MVI	A,I.VER
23AB  C3 6023           	JMP	SWIT1
23AE                    SW.ID	SPACE	3,10
                        **	SW.ID - /ID Switch Detected

23AE  3E 04             SW.ID	MVI	A,I.ID
23B0  C3 6023           	JMP	SWIT1
23B3                    SW.MOU	SPACE	3,10
                        **	SW.MOU - /MOUNT Switch Detected

23B3  3E 05             SW.MOU	MVI	A,I.MOU
23B5  C3 6023           	JMP	SWIT1
23B8                    	STL	'ACL - ACCEPT COMMAND LINE.'
23B8                    	EJECT
23B8                    ACL	SPACE	4,10
                        ***	ACL - ACCEPT COMMAND LINE.
                        *
                        *	ACL PROMPTS FOR AND READS A COMMAND LINE FROM
                        *	THE CONSOLE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' CLEAR, GOT LINE
                        *		 'LINE' = COMMAND LINE
                        *		'C' SET IF EOF
                        *	USES	ALL

23B8  CD 2531           ACL	CALL	$GNL	;GUARANTEE NEW LINE
23BB  CD 5E19           	CALL	$TYPTX
23BE  0A4F3AA0          	DB	NL,'O:',' '+200Q
                        	ERRNZ	I.CSLMD
23C2  AF                	XRA	A	;(A) = I.CSLMD
23C3  47                	MOV	B,A	;CLEAR SPECIAL MODES
23C4  0E 85             	MVI	C,CSL.ECH+CSL.RAW+CSL.CHR
23C6  FF 06             	SCALL	.CONSL
23C8  21 D937           	LXI	H,LINE
23CB  C3 4A31           	JMP	$RTL.	;READ UPPER CASE LINE AND EXIT
23CE                    	STL	'MOUNT - MOUNT A DIFFERENT DISK'
23CE                    	EJECT
23CE                    MOUNT	SPACE	4,10
                        ***	MOUNT - MOUNT A DIFFERENT DISK.
                        *
                        *	MOUNT CAUSES A NEW DISK TO BE MOUNTED.
                        *
                        *	INSERT THE DISK IN SY0, THEN TYPE
                        *
                        *	/MOUNT

23CE  21 BF35           MOUNT	LXI	H,SLABEL
23D1  06 00             	MVI	B,0	;Count of 256
23D3  CD 8A19           	CALL	$ZERO	;Zero the old label

23D6  11 DC23           	LXI	D,MOUNTA
23D9  C3 2027           	JMP	MAD	;MOUNT ALTERNATE DISK

23DC  0A496E73 65727420 MOUNTA	DB	NL,'Insert New Disk',':'+200Q
23E4  4E657720 4469736B
23EC  BA
23ED                    	STL	'ONECOPY - COPY FILES BETWEEN VOLUMES.'
23ED                    	EJECT
23ED                    ONECOPY	SPACE	4,10
                        ***	ONECOPY - COPY FILES BETWEEN TWO VOLUMES, WITH ONLY ONE
                        *	DRIVE.
                        *
                        *	(AND FOR MY NEXT TRICK...)
                        *
                        *	ONECOPY COPIES FILES BETWEEN TWO VOLUMES BY ALTERNATING BETWEEN
                        *	TWO PHASES, THE READ PHASE AND THE WRITE PHASE.
                        *
                        *	READ PHASE:
                        *
                        *	DURING THE READ PHASE, THE SOURCE DISK IS MOUNTED. SOURCE FILES ARE
                        *	OPENED IN THE ORDER OF THEIR APPEARANCE. FOR EACH OPENED
                        *	FILE, A 'FILE DESCRIPTOR NODE' *FDN* IS ADDED  TO  THE ACTIVE
                        *	CHAIN. THEN, AS MUCH AS THE FILE AS POSSIBLE IS READ INTO MEMORY.
                        *
                        *	THE PROCESS CONTINUES UNTIL
                        *		1) THERE IS NO MORE FREE RAM
                        *		2) OR, THERE ARE NO MORE FILE DESCRIPTOR NODES IN THE FREE CHAIN
                        *		3) OR, THERE ARE NO MORE FILES IN NAMTAB (INPUT FILE LIST)
                        *
                        *
                        *	WRITE PHASE
                        *
                        *	DURING THE WRITE PHASE, THE DESTINATION DISK IS MOUNTED. THE NODES
                        *	ARE TAKEN FROM THE ACTIVE CHAIN, AND PROCESSED. IF THE FILE HAD
                        *	BEEN PARTIALLY WRITTEN THE LAST PASS, IT IS  RE-OPENED AND POSITIONED.
                        *	IF THERE IS NOT MORE DATA TO READ FOR A PROCESSED
                        *	NODE, IT IS REMOVED, AND THE CORRESPONDING ENTRY IN NAMTAB IS DELETED.
                        *
                        *	WRITE PHASE CONTINUES UNTIL
                        *
                        *		1) THERE ARE NO MORE FILE NODES IN THE ACTIVE LIST
                        *		2) OR, THE FIRST (AND ONLY) ENTRY IN THE LIST HAS NO
                        *		   MORE DATA IN MEMORY, BUT HAS NOT BEEN COMPLETELY READ.

      = 23ED            COPY	EQU	*	;CALLED 'COPY' BY MAINLINE CODE
      = 23ED            OCOPY	EQU	*
23ED  CD 0727           	CALL	IFL	;INITIALIZE  FDN LISTS
23F0  AF                	XRA	A
23F1  32 8724           	STA	OCOPYC	;CLEAR FILE COUNT
23F4  32 6A35           	STA	VOLFLAG	;FLAG SOURCE  VOLUME MOUNTED
23F7  3A BF36           	LDA	LABEL+LAB.SER;A  = Volume Label
23FA  32 6B35           	STA	VOLSER	;SET VOLUME SERIAL NUMBER
23FD  CD 592D           	CALL	DDF	;DECODE DESTINATION FILE
2400  DA 542C           	JC	ERROR	;ERROR
2403  32 8624           	STA	OCOPYA	;SAVE DESTIONATION TYPE
2406  CD C030           	CALL	SDD	;RESET DEFAULT DEFAULTS
2409  AF                	XRA	A	;ALLOW *.*
240A  CD F22C           	CALL	BSL	;BUILD SOURCE FILE LIST
240D  DA 542C           	JC	ERROR
2410  CD EB32           	CALL	$MOVEL
2413  1100              	DW	OCOPYDL
2415  9135              	DW	DESTFB+FB.NAM
2417  8824              	DW	OCOPYD	;SAVE WILDCARD DESTINATION
2419  CD 222F           	CALL	EBM	;EXPAND BUFFER TO MAX

                        *	MAKE SURE HE'S NOT TRYING TO CONCATINATE

241C  3A 8624           	LDA	OCOPYA
241F  A7                	ANA	A
2420  CA 3124           	JZ	OCOPY1	;HAVE WILDCARDS
2423  2A A235           	LHLD	NAMTLEN	;NO WILDCARDS, ONLY LET HIM SPEFICY ONE SOURCE
2426  11 EFFF           	LXI	D,-FB.NAML
2429  19                	DAD	D
242A  7C                	MOV	A,H
242B  B5                	ORA	L
242C  3E 88             	MVI	A,PEC.FCI;FILE CONCATINATION IS ILLEGAL
242E  C2 542C           	JNZ	ERROR

                        *	START READ PHASE

2431  3A 8435           OCOPY1	LDA	BUFPTR+1;(A) = BUFFER FWA/256
2434  3C                	INR	A	;ROUND UP TO NEXT PAGE
2435  32 6D35           	STA	OBUFPTR	;SET SECTOR BUFFER  FWA/256
2438  3A 6A35           	LDA	VOLFLAG
243B  A7                	ANA	A
243C  CA 4524           	JZ	OCOPY2	;SOURCE IS MOUNTED
243F  11 9924           	LXI	D,OCOPYF
2442  CD 2027           	CALL	MAD	;MOUNT ALTERNATE DISK
2445  CD BC24           OCOPY2	CALL	RPH	;READ PHASE
2448  3A 0135           	LDA	FDNHEAD
244B  A7                	ANA	A
244C  CA 6224           	JZ	OCOPY6	;NO FILES ARE READ, ERGO NONE ARE LEFT
244F  3A 6A35           	LDA	VOLFLAG
2452  A7                	ANA	A
2453  C2 5C24           	JNZ	OCOPY3
2456  11 A824           	LXI	D,OCOPYG
2459  CD 2027           	CALL	MAD	;MOUNT ALTERNATE DISK
245C  CD F025           OCOPY3	CALL	WPH	;WRITE PHASE
245F  C3 3124           	JMP	OCOPY1

                        *	ALL DONE, FINISH MESSAGE

2462  3A 8724           OCOPY6	LDA	OCOPYC	;(A) = FILE COUNT
2465  06 00             	MVI	B,0	;(BC) = COUNT OF FILES COPIED
2467  4F                	MOV	C,A

                        *	TYPE FILE COUNT

2468  3E 03             	MVI	A,3
246A  21 7424           	LXI	H,OCOPYE
246D  CD 7132           	CALL	$UDDS	;UNPACK COUNT INTO MESSAGE
2470  CD 5E19           	CALL	$TYPTX
2473  0A                	DB	NL	;for aesthetics
2474  585858            OCOPYE	DB	'XXX'
2477  2046696C 65732043 	DB	' Files Copied',ENL
247F  6F706965 648A
2485  C9                	RET

2486  00                OCOPYA	DB	0	;DESTINATION FILE WILDCARD FLAG (=0 IF WC)
2487  00                OCOPYC	DB	0	;FILES COPIED COUNT
2488  00000000 00000000 OCOPYD	DC	FB.NAML,#0;HOLD AREA FOR WILDCARD DESTINATION
2490  00000000 00000000
2498  00
      = 0011            OCOPYDL	EQU	*-OCOPYD
2499  0A496E73 65727420 OCOPYF	DB	NL,'Insert Source',':'+200Q
24A1  536F7572 6365BA
24A8  0A496E73 65727420 OCOPYG	DB	NL,'Insert Destination',':'+200Q
24B0  44657374 696E6174
24B8  696F6EBA
24BC                    	STL	'ONECOPY SUBROUTINES'
24BC                    	EJECT
24BC                    RPH	SPACE	4,10
                        **	RPH - READ PHASE.
                        *
                        *	RPH  HANDLES THE READ PHASE OF THE COPY PROCESS.
                        *
                        *	IT IS ENTERED WITH THE NAMTAB AND FDN TABLE SETUP, AND
                        *	WITH THE SOURCE DISK MOUNTED.
                        *
                        *	READ PHASE:
                        *
                        *	DURING THE READ PHASE, THE SOURCE DISK IS MOUNTED. SOURCE FILES ARE
                        *	OPENED IN THE ORDER OF THEIR APPEARANCE. FOR EACH OPENED
                        *	FILE, A 'FILE DESCRIPTOR NODE' *FDN* IS ADDED  TO  THE ACTIVE
                        *	CHAIN. THEN, AS MUCH AS THE FILE AS POSSIBLE IS READ INTO MEMORY.
                        *
                        *	THE PROCESS CONTINUES UNTIL
                        *		1) THERE IS NO MORE FREE RAM
                        *		2) OR, THERE ARE NO MORE FILE DESCRIPTOR NODES IN THE FREE CHAIN
                        *		3) OR, THERE ARE NO MORE FILES IN NAMTAB (INPUT FILE LIST)
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

      = 24BC            RPH	EQU	*

                        *	SEE IF ANY MEMORY TO HAVE

24BC  CD 0127           	CALL	CBR	;COMPUTE BUFFER ROOM
24BF  C8                	RZ			NONE

                        *	SEE IF WE NEED TO READ SOME MORE INTO A PART-COPIED FILE

24C0  21 0135           	LXI	H,FDNHEAD
24C3  6E                	MOV	L,M	;(HL) = ADDRESS IF FIRST NODE
24C4  7D                	MOV	A,L
24C5  A7                	ANA	A
24C6  CA D324           	JZ	RPH1	;IS NO FIRST NODE, ERGO NO FILE
24C9  23                	INX	H
                        	ERRNZ	FDN.STA-1
24CA  7E                	MOV	A,M	;(A) = .STA
24CB  E6 02             	ANI	ST.OPR
24CD  11 3E38           	LXI	D,NAMTAB
24D0  C2 0E25           	JNZ	RPH2.5	;FILE IS INCOMPLETELY READ

                        *	SEE IF ANY FREE FILE DESCRIPTOR NODES TO USE

24D3  3A 0035           RPH1	LDA	FDNFRE
24D6  A7                	ANA	A
24D7  C8                	RZ			NO;MORE

                        *	SEE IF THERE IS A FILE IN NAMTAB WITHOUT AN ENTRY IN FNDLIST.
                        *	SINCE THE FIRST ENTRY IN FDNLIST CORRESPONDS TO THE FIRST IN
                        *	NAMTAB, ETC., WE'LL JUST RUN DOWN FDNLIST UNTIL THE END, AND
                        *	THE NEXT NAMTAB FILE WILL BE THE ONE WE WANT...

24D8  01 1100           	LXI	B,FB.NAML;(BC) = ENTRY SIZE IN NAMTAB
24DB  11 EFFF           	LXI	D,-FB.NAML	;(DE) = POINTER INTO NAMTAB
24DE  21 0135           	LXI	H,FDNHEAD
24E1  7D                	MOV	A,L	;START WITH FDNHEAD
24E2  6F                RPH2	MOV	L,A	;FOLLOW LINK
24E3  7E                	MOV	A,M	;(A) = NEXT NODE
24E4  EB                	XCHG
24E5  09                	DAD	B	;ADVANCE POINTER INTO NAMTAB
24E6  EB                	XCHG
24E7  A7                	ANA	A
24E8  C2 E224           	JNZ	RPH2	;LINK SOME MORE
24EB  E5                	PUSH	H	;(HL) = ADDRESS OF LAST NODE
24EC  2A A235           	LHLD	NAMTLEN
24EF  CD 8E18           	CALL	$CDEHL	;SEE IF HAVE ACCOUNTED FOR ALL NAMTAB ENTRYS
24F2  E1                	POP	H
24F3  C8                	RE			FILES;ALL USED UP

                        *	HAVE ROOM FOR DATA, HAVE A NODE FOR THE FILE COUNTS, AND
                        *	HAVE A FILE NAME. ALL SET FOR BUSINESS..
                        *
                        *	(DE) = INDEX INTO NAMTAB FOR FILE
                        *	(HL) = NODE ADDRESS OF LAST ENTRY IN LIST
                        *
                        *	CHAIN THE FIRST FREE NODE ONTO THE END OF THE LIST

24F4  3A 0035           	LDA	FDNFRE
24F7  77                	MOV	M,A	;CHAIN TO  NEW END  NODE
24F8  6F                	MOV	L,A
24F9  7E                	MOV	A,M	;(A) =  NEXT NODE IN FREE CHAIN
24FA  32 0035           	STA	FDNFRE
24FD  06 0D             	MVI	B,FDNELEN
24FF  E5                	PUSH	H	;SAVE NODE ADDRESS
2500  CD 8A19           	CALL	$ZERO	;ZERO ENTIRE NODE, ENCLUDING CHAIN (AT END,  NOW)
2503  01 3E38           	LXI	B,NAMTAB
2506  EB                	XCHG
2507  09                	DAD	B	;(HL) = ADDRESS OF NAMTAB ENTRY
2508  22 A635           	SHLD	NAMTPTR	;POINTER TO CURRENT NAMTAB ENTRY
250B  EB                	XCHG
250C  E1                	POP	H
                        	ERRNZ	FDN.STA-1
250D  23                	INX	H	;(HL) = ADDR OF FDN.STA OF NODE

                        *	READY TO OPEN FILE
                        *
                        *	(DE) = NAMTAB ENTRY ADDRESS
                        *	(HL) = #FDN.STA OF ENTRY

250E  E5                RPH2.5	PUSH	H	;SAVE ADDRESS
250F  EB                	XCHG
2510  AF                	XRA	A
                        	ERRNZ	CN.SOU	;(A) = SOURCE CHANNEL NUMBER
2511  FF 22             	SCALL	.OPENR	;OPEN
2513  DA 162C           	JC	NAMERR	;ERROR
2516  D1                	POP	D
2517  CD AA25           	CALL	RPHX	;PRINT FILE NAME, GET SOURCE DATE & TIME /3.0a/
251A  1A                	LDAX	D	;(A) = FDN.STA
251B  E6 02             	ANI	ST.OPR
251D  D5                	PUSH	D	;SAVE ADDRESS
251E  C2 5425           	JNZ	RPH3	;ALREADY OPENED IN PREVIOUS PASSES

                        *	FIRST TIME THIS FILE HAS BEEN OPENED. SEE IF CONTIGUOUS

2521  E5                	PUSH	H
2522  21 8724           	LXI	H,OCOPYC
2525  34                	INR	M
2526  E1                	POP	H
2527  1A                	LDAX	D
2528  F6 02             	ORI	ST.OPR	;SET OPEN FOR READ
252A  12                	STAX	D
252B  2A EA20           	LHLD	S.CFWA	;(HL) = CHANNEL 0 FWA
                        	ERRNZ	IOCCTD-1;WE NEED TO CHAIN ONE TO GET TO USER #0
252E  CD 8918           	CALL	$HLIHL
                        	ERRNZ	CN.SOU	;ASSUME WE WANT CHANNEL 0
2531  CD 9C18           	CALL	$INDL
2534  2100              	DW	IOC.DIR+DIR.FLG
2536  7B                	MOV	A,E	;(A) = DIR.FLG
2537  E6 00             	ANI	0;DIF.CNT	* * PATCH * *
2539  CA 5425           	JZ	RPH3	;NOT CONTIG

                        *	IS CONTIG. GET FILE SIZE

253C  CD 9C18           	CALL	$INDL
253F  0500              	DW	IOC.GRT
2541  D5                	PUSH	D	;SAVE GRT ADDRESS
2542  CD 9C18           	CALL	$INDL
2545  2300              	DW	IOC.DIR+DIR.FGN;(E) = DIR.FGN
2547  7B                	MOV	A,E
2548  E1                	POP	H	;(HL) = GRT TABLE ADDRESS
2549  CD 332D           	CALL	CFS.	;COMPUTE BLOCK SIZE
254C  E1                	POP	H	;(HL) = ADDRESS OF FDN.STA
254D  E5                	PUSH	H
254E  7E                	MOV	A,M	;(A) = FDN.STA
254F  F6 10             	ORI	ST.CNT	;FLAG CONTIG
2551  77                	MOV	M,A
2552  23                	INX	H
                        	ERRNZ	FDN.SIZ-FDN.STA-1
2553  73                	MOV	M,E	;SET BLOCK COUNT

                        *	READY TO READ DATA. POSITION FILE (IN CASE SOME WAS READ IN
                        *	PREVIOUS PASSES) AND COMPUTE THE MAX POSSIBLE READ COUNT
                        *
                        *	((SP)) = ADDRESS OF FDN.STA FOR NODE

2554  E1                RPH3	POP	H	;(HL) = ADDRESS OF FDN.STA
2555  E5                	PUSH	H
2556  CD 9C18           	CALL	$INDL
2559  0200              	DW	FDN.AMR-FDN.STA;(DE) = AMOUNT READ (IN SECTORS)
255B  42                	MOV	B,D
255C  4B                	MOV	C,E	;(BC) = AMOUNT READ
255D  3E 00             	MVI	A,CN.SOU
255F  FF 27             	SCALL	.POSIT		;POSIT
2561  DA 2C2C           	JC	IERR3	;POSIT BLEW UP
2564  CD 0127           	CALL	CBR	;COMPUTE BUFFER ROOM
2567  EB                	XCHG			(D);= POINTER/256, (E) = LIMIT/256
2568  E1                	POP	H	;(HL) = #FDN.STA
2569  01 0600           	LXI	B,FDN.ADR-FDN.STA
256C  09                	DAD	B	;(HL) = #FDN.ADR
256D  72                	MOV	M,D	;SET ADDRESS/256
256E  E5                	PUSH	H	;SAVE #FDN.ADR
256F  1E 00             	MVI	E,0	;(DE) = ADDRESS
2571  47                	MOV	B,A	;(B) = SECTORS OF RAM AVAILABLE
2572  4B                	MOV	C,E	;(C) = 0
2573  C5                	PUSH	B	;SAVE TRY COUNT
2574  3E 00             	MVI	A,CN.SOU
2576  FF 04             	SCALL	.READ	;READ THE STUFF

                        *	COMPUTE THE AMOUNT READ (IN CASE OF EOF)

2578  D1                	POP	D	;(DE) = TRY COUNT
2579  D2 8E25           	JNC	RPH4	;GOT  ALL WE TRYED
257C  FE 01             	CPI	EC.EOF
257E  C2 162C           	JNE	NAMERR	;NOT JUST EOF, GOT TROUBLES
2581  7A                	MOV	A,D
2582  90                	SUB	B	;REMOVE AMOUNT WE DIDNT GET
2583  57                	MOV	D,A
2584  E1                	POP	H	;(HL) = #FDN.ADR
2585  E5                	PUSH	H
2586  01 FAFF           	LXI	B,FDN.STA-FDN.ADR
2589  09                	DAD	B
258A  7E                	MOV	A,M	;(A) = FDN.STA
258B  E6 FD             	ANI	377Q-ST.OPR;EOF, NOT OPEN FOR READ ANYMORE
258D  77                	MOV	M,A	;POST READ COMPLETE FOR THIS GUY

                        *	STORE RESULTS OF READ IN NODE
                        *
                        *	(D) = SECTORS READ
                        *	((SP)) = #FDN.ADR

258E  E1                RPH4	POP	H	;(HL) = #FDN.ADR
258F  23                	INX	H
                        	ERRNZ	FDN.AIM-FDN.ADR-1;(HL) = ADDRESS IF AMOUNT IN MEMORY BYTE
2590  72                	MOV	M,D	;STORE SECTORS IN MEMORY COUNT
2591  01 FBFF           	LXI	B,FDN.AMR-FDN.AIM
2594  09                	DAD	B	;(HL) = #FDN.AMR (AMOUNT READ)
2595  7E                	MOV	A,M	;(A) = AMOUNT READ BEFORE
2596  82                	ADD	D	;ADD NEW AMOUNT
2597  77                	MOV	M,A
2598  23                	INX	H
2599  7E                	MOV	A,M
259A  CE 00             	ACI	0	;PROPIGATE FOR VERY LARGE FILES
259C  77                	MOV	M,A
259D  21 6D35           	LXI	H,OBUFPTR
25A0  7E                	MOV	A,M
25A1  82                	ADD	D	;ADVANCE FREE RAM POINTER BY AMOUNT READ
25A2  77                	MOV	M,A
25A3  3E 00             	MVI	A,CN.SOU
25A5  FF 26             	SCALL	.CLOSE	;CLOSE FILE
25A7  C3 BC24           	JMP	RPH	;SEE IF MORE TO READ

                        *	PRINT FILE NAME

25AA  E5                RPHX	PUSH	H
25AB  C5                	PUSH	B
25AC  D5                	PUSH	D

25AD  2A A635           	LHLD	NAMTPTR
25B0  7E                RPHX0	MOV	A,M
25B1  23                	INX	H
25B2  A7                	ANA	A
25B3  CA BB25           	JZ	RPHX1
25B6  FF 02             	SCALL	.SCOUT
25B8  C3 B025           	JMP	RPHX0

25BB  CD 7F31           RPHX1	CALL	$CRLF

                        *	GET SOURCE DATE & TIME

25BE  2A EA20           	LHLD	S.CFWA		;CHANNEL POINTER -1
25C1  CD 8918           	CALL	$HLIHL		;CHANNEL POINTER  0 = CN.SOU
25C4  11 1E00           	LXI	D,IOC.DIR+DIR.CTH
25C7  19                	DAD	D
25C8  E5                	PUSH	H
25C9  CD 8918           	CALL	$HLIHL
25CC  22 E725           	SHLD	RPH.TIM 	;SAVE SOURCE TIME
25CF  E1                	POP	H
25D0  11 0800           	LXI	D,DIR.CRD-DIR.CTH
25D3  19                	DAD	D
25D4  CD 8918           	CALL	$HLIHL
25D7  22 E125           	SHLD	RPH.DAT 	;SAVE SOURCE DATE

                        *	SAVE DATE & TIME IN NODE TABLE

25DA  D1                	POP	D
25DB  D5                	PUSH	D
25DC  21 0800           	LXI	H,FDN.DAT-FDN.STA
25DF  19                	DAD	D
25E0  11 0000           	LXI	D,*-*
      = 25E1            RPH.DAT EQU	*-2
25E3  CD C731           	CALL	ISDEHL
                        	ERRNZ	FDN.TIM-FDN.DAT-2
25E6  11 0000           	LXI	D,*-*
      = 25E7            RPH.TIM EQU	*-2
25E9  CD C731           	CALL	ISDEHL

25EC  D1                	POP	D
25ED  C1                	POP	B
25EE  E1                	POP	H
25EF  C9                	RET
25F0                    WPH	SPACE	4,10
                        **	WPH - WRITE PHASE.
                        *
                        *	WPH HANDLES THE WRITE PHASE PROCESSING. IT IS ENTERED WITH
                        *	THE FDN CHAIN SETUP, THE NAMTAB SETUP, AND
                        *	THE DESTINATION DISK MOUNTED.
                        *
                        *
                        *	WRITE PHASE
                        *
                        *	DURING THE WRITE PHASE, THE DESTINATION DISK IS MOUNTED. THE NODES
                        *	ARE TAKEN FROM THE ACTIVE CHAIN, AND PROCESSED. IF THE FILE HAD
                        *	BEEN PARTIALLY WRITTEN THE LAST PASS, IT IS  RE-OPENED AND POSITIONED.
                        *	IF THERE IS NOT MORE DATA TO READ FOR A PROCESSED
                        *	NODE, IT IS REMOVED, AND THE CORRESPONDING ENTRY IN NAMTAB IS DELETED.
                        *
                        *	WRITE PHASE CONTINUES UNTIL
                        *
                        *		1) THERE ARE NO MORE FILE NODES IN THE ACTIVE LIST
                        *		2) OR, THE FIRST (AND ONLY) ENTRY IN THE LIST HAS NO
                        *		   MORE DATA IN MEMORY, BUT HAS NOT BEEN COMPLETELY READ.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

      = 25F0            WPH	EQU	*

                        *	SEE IF MORE TO WRITE

25F0  21 0135           	LXI	H,FDNHEAD
25F3  6E                	MOV	L,M
25F4  7D                	MOV	A,L	;(A) = FIRST NODE INDEX
25F5  A7                	ANA	A
25F6  C8                	RZ			NO;MORE
25F7  CD 9C18           	CALL	$INDL
25FA  0800              	DW	FDN.AIM	;(E) = AMOUNT IN MEMORY FOR THIS GUY
25FC  7B                	MOV	A,E
25FD  A7                	ANA	A
25FE  C2 0B26           	JNZ	WPH0	;GOT DATA

                        *	NO DATA IN NODE. IF STILL READING, RETURN FOR MORE

2601  23                	INX	H
2602  7E                	MOV	A,M
2603  2B                	DCX	H
2604  E6 02             	ANI	ST.OPR
2606  C0                	RNZ			STILL;READING, GET MORE
2607  EB                	XCHG			(DE);= ADDRESS
2608  C3 A326           	JMP	WPH4	;REMOVE NODE, AM DONE WITH FILE

                        *	HAVE DATA TO WRITE. SEE IF WE HAVE OPENED THIS FILE BEFORE.,
                        *	OR IF THIS IS THE FIRST TIME

260B  E5                WPH0	PUSH	H	;SAVE NODE POINTER
260C  23                	INX	H
                        	ERRNZ	FDN.STA-1
260D  7E                	MOV	A,M	;(A) = FDN.STA
260E  E6 01             	ANI	ST.OPW
2610  C2 5726           	JNZ	WPH2	;OPENED BEFORE
                        	ERRNZ	ST.OPW-1
2613  34                	INR	M	;SET '1' BIT

                        *	BUILD NAME INTO DESTFB

2614  E5                	PUSH	H	;SAVE NODE ADDRESS
2615  01 8824           	LXI	B,OCOPYD
2618  11 3E38           	LXI	D,NAMTAB
261B  21 9135           	LXI	H,DESTFB+FB.NAM
261E  CD 6E30           	CALL	MWN	;MERGE WILDCARD NAME
2621  E1                	POP	H

                        *	IS 1ST TIME FOR THIS FILE. IF CONTIGUOUS FLAG, OPEN THE FILE
                        *	FOR CONTIGUOUS

2622  7E                	MOV	A,M	;(A) = FLAG BYTE
2623  E6 10             	ANI	ST.CNT
2625  C2 3526           	JNZ	WPH1	;IS CONTIG
2628  21 9135           	LXI	H,DESTFB+FB.NAM
262B  3E 01             	MVI	A,CN.DES
262D  FF 23             	SCALL	.OPENW	;JUST OPEN FOR WRITE
262F  DA 202C           	JC	DESTERR	;ERROR
2632  C3 7126           	JMP	WPH3	;WRITE THE DATA

                        *	IS CONTIG FILE. OPEN IN CONTIG MODE

2635  23                WPH1	INX	H
                        	ERRNZ	FDN.SIZ-FDN.STA-1
2636  4E                	MOV	C,M	;(C) = COUNT (IN BLOCKS)
2637  06 00             	MVI	B,0
2639  21 9135           	LXI	H,DESTFB+FB.NAM
263C  3E 01             	MVI	A,CN.DES
263E  C5                	PUSH	B	;SAVE COUNT
263F  FF 28             	SCALL	.DELET	;DELETE OLD ONE
2641  D2 4926           	JNC	WPH1.5	;DELETED
2644  FE 0C             	CPI	EC.FNF
2646  C2 542C           	JNE	ERROR	;MUST BE WRITE PROTECTED, OR  SOMETHING...
2649  C1                WPH1.5	POP	B	;(BC) = COUNT
264A  21 9135           	LXI	H,DESTFB+FB.NAM
264D  3E 01             	MVI	A,CN.DES
264F  FF 25             	SCALL	.OPENC	;OPEN CONTIG
2651  DA 202C           	JC	DESTERR
2654  C3 7126           	JMP	WPH3

                        *	THIS FILE HAS ALREADY BEEN PARTIALLY WRITTEN. OPEN IN UPDATE MODE
                        *	SO WE CAN EXTEND IT.

2657  21 9135           WPH2	LXI	H,DESTFB+FB.NAM
265A  3E 01             	MVI	A,CN.DES
265C  FF 24             	SCALL	.OPENU	;OPEN FOR UPDATE
265E  DA 202C           	JC	DESTERR	;PROBLEMS
2661  E1                	POP	H
2662  E5                	PUSH	H	;(HL) = #FDN.STA
2663  CD 9C18           	CALL	$INDL
2666  0500              	DW	FDN.AMW	;(DE) = AMOUNT WRITTEN
2668  42                	MOV	B,D
2669  4B                	MOV	C,E	;(BC) = SECTORS WRITTEN
266A  3E 01             	MVI	A,CN.DES
266C  FF 27             	SCALL	.POSIT	;POSITION FOR EXTEND
266E  DA 262C           	JC	IERR1	;COULDNT GET THERE!

                        *	FILE OPEN AND POSITIONED. WRITE DATA

2671  E1                WPH3	POP	H
2672  E5                	PUSH	H	;(HL) = #FDN.LNK
2673  CD 9C18           	CALL	$INDL
2676  0700              	DW	FDN.ADR	;(E) = ADDR/256, (D) = CNT/256
2678  42                	MOV	B,D
2679  53                	MOV	D,E
267A  1E 00             	MVI	E,0	;(DE) = ADDRESS
267C  4B                	MOV	C,E	;(BC) = COUNT
267D  3E 01             	MVI	A,CN.DES
267F  C5                	PUSH	B	;SAVE WRITE COUNT
2680  FF 05             	SCALL	.WRITE	;WRITE IT
2682  DA 202C           	JC	DESTERR	;PROBABLY OUT OF ROOM
2685  C1                	POP	B
2686  E1                	POP	H
2687  E5                	PUSH	H
2688  C5                	PUSH	B
2689  CD C226           	CALL	WPHX	;FORCE SOURCE DATE & TIME		/3.0a/
268C  3E 01             	MVI	A,CN.DES
268E  FF 26             	SCALL	.CLOSE	;CLOSE IT
2690  DA 202C           	JC	DESTERR
2693  C1                	POP	B	;(B) = SECTORS WRITTEN
2694  E1                	POP	H
2695  E5                	PUSH	H	;(HL) = #FDN.LNK
2696  11 0500           	LXI	D,FDN.AMW-FDN.LNK
2699  19                	DAD	D	;(HL) = FDN.AMW
269A  7E                	MOV	A,M
269B  80                	ADD	B
269C  77                	MOV	M,A
269D  23                	INX	H
269E  7E                	MOV	A,M
269F  CE 00             	ACI	0	;INCREMENT AMOUNT WRITTEN
26A1  77                	MOV	M,A

                        *	CLEAR 'IN MEMORY' COUNT IN NODE. IF THE FILE HAS NO MORE TO
                        *	READ, REMOVE IT FROM THE CHAIN AND NAMTAB

26A2  D1                	POP	D	;(DE) = FDN.LNK
26A3  21 0800           WPH4	LXI	H,FDN.AIM
26A6  19                	DAD	D
26A7  36 00             	MVI	M,0	;CLEAR AMOUNT IN MEMORY
26A9  EB                	XCHG			(HL);= FDN.LNK
26AA  23                	INX	H
                        	ERRNZ	FDN.STA-FDN.LNK-1
26AB  7E                	MOV	A,M	;(A) = FDN.STA
26AC  E6 02             	ANI	ST.OPR
26AE  C0                	RNZ			STILL;READING, AM DONE FOR THIS PHASE

                        *	UNLINK NODE FROM LIST

26AF  2B                	DCX	H
26B0  7E                	MOV	A,M
26B1  32 0135           	STA	FDNHEAD	;UNLINK FROM ACTIVE LIST
26B4  3A 0035           	LDA	FDNFRE
26B7  77                	MOV	M,A	;PUT THIS GUY ON HEAD OF FREE LIST
26B8  7D                	MOV	A,L
26B9  32 0035           	STA	FDNFRE
26BC  CD 9A30           	CALL	REN	;REMOVE ENTRY FROM NAMTAB
26BF  C3 F025           	JMP	WPH	;TRY TO WRITE THE NEXT GUY

                        *	FORCE SOURCE DATE & TIME

26C2  C5                WPHX	PUSH	B
26C3  D5                	PUSH	D
26C4  E5                	PUSH	H

26C5  11 0900           	LXI	D,FDN.DAT-FDN.LNK
26C8  19                	DAD	D
26C9  CD 8531           	CALL	ILDEHL
26CC  EB                	XCHG
26CD  22 F826           	SHLD	WPH.DAT
26D0  EB                	XCHG
                        	ERRNZ	FDN.TIM-FDN.DAT-2
26D1  CD 8531           	CALL	ILDEHL
26D4  EB                	XCHG
26D5  22 EE26           	SHLD	WPH.TIM

26D8  2A EA20           	LHLD	S.CFWA		;CHANNEL POINTER -1
26DB  CD 8918           	CALL	$HLIHL		;CHANNEL POINTER  0
26DE  CD 8918           	CALL	$HLIHL		;CHANNEL POINTER  1 = CN.DES
26E1  11 1E00           	LXI	D,IOC.DIR+DIR.CTH
26E4  19                	DAD	D

26E5  3A C836           	LDA	LABEL+LAB.VER
26E8  FE 30             	CPI	30H
26EA  DA F326           	JC	WPHX.		;NO TIME ON PRE 3.0 MEDIA

26ED  11 0000           	LXI	D,*-*
      = 26EE            WPH.TIM EQU	*-2
26F0  CD C731           	CALL	ISDEHL		;FORCE DEST TIME

26F3  11 0600           WPHX.	LXI	D,DIR.CRD-DIR.CTH-2
26F6  19                	DAD	D
26F7  11 0000           	LXI	D,*-*
      = 26F8            WPH.DAT EQU	*-2
26FA  CD C731           	CALL	ISDEHL		;FORCE DEST DATE

26FD  E1                	POP	H
26FE  D1                	POP	D
26FF  C1                	POP	B
2700  C9                	RET
2701                    CBR	SPACE	4,10
                        **	CBR - COMPUTE BUFFER ROOM.
                        *
                        *	CBR COMPUTES THE NUMBER OF SECTORS WORTH OF RAM
                        *	STILL FREE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(A) = SECTORS OF RAM FREE
                        *		'Z' SET IFF (A)  = 0
                        *		(H) = BUFPTR/256
                        *		(L) = OBUFLIM/256
                        *	USES	A,F

2701  2A 6C35           CBR	LHLD	OBUFLIM
                        	ERRNZ	OBUFPTR-OBUFLIM-1
2704  7D                	MOV	A,L
2705  94                	SUB	H
2706  C9                	RET
2707                    IFL	SPACE	4,10
                        **	IFL - INITIALIZE FDN LIST.
                        *
                        *	IFL CHAINS ALL THE FDN NODES TO THE FREE LIST. THIS
                        *	CLEANUP IS NECESSARY IN CASE A CTL-C OR SOMETHING
                        *	LEFT THE LIST GARBAGED.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

2707  21 0235           IFL	LXI	H,FDN.1
270A  7D                	MOV	A,L	;(A) = FIRST LINK
270B  32 0035           	STA	FDNFRE
270E  AF                	XRA	A
270F  32 0135           	STA	FDNHEAD	;NONE IN LIST
2712  06 07             	MVI	B,FDNCNT-1;(B) = NUMBER OF NODES-1
2714  3E 0D             IFL1	MVI	A,FDNELEN
2716  85                	ADD	L	;(A) = #ADDR OF NEXT NODE
2717  77                	MOV	M,A	;SET LINK
2718  6F                	MOV	L,A	;FORWARD TO NEXT LINK
2719  05                	DCR	B
271A  C2 1427           	JNZ	IFL1	;MORE TO GO
271D  36 00             	MVI	M,0	;LAST ONE CHAINS NOWHERE
271F  C9                	RET
2720                    MAD	SPACE	4,10
                        **	MAD - MOUNT ALTERNATE DISK.
                        *
                        *	MAD DISMOUNTES THE CURRENT DISK, HAS THE USER INSERT THE
                        *	OTHER DISK, AND MOUNTS IT.
                        *
                        *	ENTRY	(DE) = PROMPT PATTERNS FOR PANEL AND CONSOLE
                        *	EXIT	(HL) = #VOLFLAG
                        *	USES	ALL

      = 2720            MAD	EQU	*

                        *	DISMOUNT CURRENT DISK

2720  D5                	PUSH	D	;SAVE ENTRY PARAMETERS IN CASE OF RETRY
2721  D5                	PUSH	D	;SAVE ENTRY PARAMETERS OVER SYDD CALL
2722  21 8527           	LXI	H,MNDA	;DEVICE SPECIFICATION
2725  FF 83             	SCALL	.DMNMS	;DISMOUNT WITHOUT MESSAGE
2727  DA 542C           	JC	ERROR	;IF ERROR

                        *	SETUP PROMPT ON FP LEDS AND CONSOLE FOR NEW DISK

272A  E1                MAD0	POP	H	;(DE) = PROMPT
272B  FF 03             	SCALL	.PRINT	;CONSOLE PROMPT

272D  CD 5E19           	CALL	$TYPTX
2730  87                	DB	BELL+200Q;BEEP CONSOLE, TOO

                        *	WAIT FOR SIGNAL THAT NEW DISK IS IN

2731  3E 0A             MAD3	MVI	A,DC.RDY
2733  CD 5820           	CALL	SYDD
2736  D2 3127           	JNC	MAD3	;Wait for device to go non-ready

2739  3E 0A             MAD4	MVI	A,DC.RDY
273B  CD 5820           	CALL	SYDD
273E  DA 3927           	JC	MAD4	;Wait for device to go ready

                        *	READ NEW DISK'S LABEL

2741  CD 8A27           	CALL	GETLAB
2744  DA 542C           	JC	ERROR

                        *	SEE IF LABEL CHANGED FROM BEFORE

2747  0E 00             	MVI	C,0	;Compare 256
2749  11 BF35           	LXI	D,SLABEL;DE = address of last label
274C  21 BF36           	LXI	H,LABEL ;HL = Address of current label
274F  CD 3018           	CALL	$COMP	;See if the label changed
2752  D1                	POP	D	;RESTORE ENTRY PARAMETERS

2753  21 6B35           	LXI	H,VOLSER
2756  3A BF36           	LDA	LABEL+LAB.SER
2759  C2 6127           	JNE	MAD4.5	;IS THE RIGHT DISK
275C  D5                	PUSH	D	;SAVE PARAMS AS IN BEGINNING
275D  D5                	PUSH	D	;SAVE FOR RETRY
275E  C3 2A27           	JMP	MAD0	;IT WAS NOT THE RIGHT DISK

2761  77                MAD4.5	MOV	M,A	;SET NEW SERIAL
2762  21 6A35           	LXI	H,VOLFLAG
2765  7E                	MOV	A,M
2766  2F                	CMA
2767  77                	MOV	M,A	;COMPLEMENT VOLUME FLAG

2768  01 0001           	LXI	B,256
276B  11 BF36           	LXI	D,LABEL
276E  21 BF35           	LXI	H,SLABEL
2771  CD AA18           	CALL	$MOVE	;Save Current Label

2774  CD 7C27           	CALL	MND	;MOUNT NEW DISK
2777  CD 5E19           	CALL	$TYPTX	;Show user that disk is OK
277A  8A                	DB	ENL
277B  C9                	RET
277C                    MND	SPACE	4,10
                        **	MND	- MOUNT NEW DISK
                        *
                        *	MOUNT NEW DISK ONTO DEVICE SSECIFIED IN MNDA
                        *
                        *
                        *	ENTRY	NONE
                        *
                        *	EXIT	LABEL	= LABEL SECTOR
                        *
                        *	USES	ALL
                        *

277C  21 8527           MND	LXI	H,MNDA
277F  FF 82             	SCALL	.MONMS	;MOUNT WITHOUT MESSAGE
2781  DA 542C           	JC	ERROR	;IF ERROR IN MOUNT
2784  C9                	RET

2785  5359303A 00       MNDA	DB	'SY0:',0
278A                    GETLAB	SPACE	4,10
                        **	GETLAB	- GET LABEL
                        *
                        *	GETLAB READS THE DISK LABEL
                        *
                        *	NOTE:	This routine leaves the volume mounted as
                        *		zero.
                        *
                        *	ENTRY	NONE
                        *
                        *	EXIT	LABEL IN LABEL
                        *		(PSW)	= 'C' CLEAR IF NO ERROR
                        *			= 'C' SET   IF    ERROR
                        *			   (A)  = ERROR CODE
                        *
                        *	USES	ALL
                        *

278A  21 0000           GETLAB	LXI	H,0
278D  3E 08             	MVI	A,DC.MOU
278F  CD 5820           	CALL	SYDD	;Mount the Disk as volume 0
2792  D8                	RC			Some;type of problem

2793  21 0900           	LXI	H,DDF.LAB
2796  11 BF36           	LXI	D,LABEL
2799  01 0001           	LXI	B,256
279C  3E 02             	MVI	A,DC.RER
279E  C3 5820           	JMP	SYDD
27A1                    	STL	'LIST - LIST DIRECTORY CONTENTS'
27A1                    	EJECT
                        ***	LIST - INDEX DIRECTORY.
                        *
                        *	DEST=SOURCE/LIST
                        *		   /BRIEF
                        *
                        *	THESE SWITCHES CAUSE THE DIRECTORY CONTENTS OF THE SPECIFIED FILE(S)
                        *	TO BE LISTED
                        *
                        *	IN /LI FIRM, THE OUTPUT IS:
                        *
                        *	NAME	EXT	SIZE	  DATE		FLAGS
                        *	XXX	.XXX	 NNN	DD-MMM-YY	CWS
                        *	 .	 .	 .	   .		 .
                        *	 .	 .	 .	   .		 .
                        *	 .	 .	 .	   .		 .
                        *		NNN FILES USING MMM SECTORS, XXX FREE
                        *
                        *	IN /BR FORM, ONLY THE NAME AND EXTENSION ARE LISTED,
                        *	4 ACROSS THE PAGE.
                        *
                        *	SPECIAL CONSIDERATIONS:
                        *
                        *	A NULL NAME OR EXTENSION IS TAKEN AS '*' (WILDCARD)
                        *
                        *	IMPLIMENTATION:
                        *
                        *	A FILE LIST OF SOURCE FILES IS BUILT. THE DEVICE DIRECTORY FILE
                        *	IS THEN READ, AND EACH FILE IN IT IS CHECKED FOR A MATCH
                        *	AGAINST ANY SOURCE SPECIFICATIONS. ELIGIBLE FILES ARE LISTED.

27A1  21 0000           LIST	LXI	H,0
27A4  C3 AA27           	JMP	LIST1

27A7  21 0100           BRIEF	LXI	H,1
                        *	JMP	LIST1

27AA  22 EF28           LIST1	SHLD	LSTA	;(LSTA) = 0 IF LIST, 1 IF /BRIEF
                        	ERRNZ	LSTB-LSTA-1;LSTB = FILE COUNT
27AD  21 0000           	LXI	H,0
27B0  22 F128           	SHLD	LSTC	;CLEAR SECTORS USED COUNT
27B3  CD EB32           	CALL	$MOVEL
27B6  0900BF20 4329     	DW	9,S.DATE,LSTG1;SET DATE IN HEADING

                        *	BUILD LIST OF SPECIFICATIONS

27BC  CD 7B29           	CALL	BLS	;BUILD LIST OF SOURCE SPECS
27BF  DA 542C           	JC	ERROR	;ERROR IN LIST
27C2  01 0300           	LXI	B,3
27C5  21 7435           	LXI	H,DIRNAM
27C8  CD AA18           	CALL	$MOVE	;MOVE DEVICE CODE INTO DIRECT.SYS NAME
27CB  21 7635           	LXI	H,DIRNAM+2
27CE  7E                	MOV	A,M	;SEE IF UNIT NUMBER OMITTED
27CF  A7                	ANA	A
27D0  C2 D527           	JNZ	LIST1.5	;SPECIFIED
27D3  36 30             	MVI	M,'0'	;DONT ALLOW NULL NUMBER

                        *	GET ADDRESS OF DEVICE'S GRT

27D5  21 7435           LIST1.5	LXI	H,DIRNAM;(HL) = # OF XXX:DIRECT.SYS (XXX = DEVICE)
27D8  01 F328           	LXI	B,LSTD	;(BC) = ADDRESS FOR RETURN INFO
27DB  FF 2B             	SCALL	.DECODE ;DECODE NAME
27DD  DA 542C           	JC	ERROR	;UNKNOWN DEVICE
27E0  3A F328           	LDA	LSTD+0
27E3  E6 01             	ANI	DT.DD
27E5  3E 05             	MVI	A,EC.DNS
27E7  CA 542C           	JZ	ERROR	;NOT DIRECTORY DEVICE
27EA  2A 0429           	LHLD	LSTD+17 ;(HL) = DEV TBL ADDR

27ED  11 0900           	LXI	D,DEV.UNT
27F0  19                	DAD	D
27F1  3A F628           	LDA	LSTD+3
27F4  CD 1721           	CALL	S.GUP	;HL = UNIT TABLE POINTER

27F7  CD 8A31           	CALL	$INDLB
27FA  0100              	DW	UNT.SPG
27FC  32 0D29           	STA	LSTF	;SAVE  SECTORS PER GROUP

27FF  CD 9C18           	CALL	$INDL
2802  0200              	DW	UNT.GRT
2804  EB                	XCHG
2805  22 0B29           	SHLD	LSTE	;SAVE  GRT ADDRESS
2808  EB                	XCHG

                        *	OPEN DEVICE'S DIRECTORY

2809  21 7435           	LXI	H,DIRNAM
280C  3E 02             	MVI	A,CN.DIR
280E  FF 22             	SCALL	.OPENR
2810  3E 80             	MVI	A,PEC.DF;DEVICE FORMAT ERROR
2812  DA 542C           	JC	ERROR	;CANT OPEN DIRECTORY

                        *	GENERATE HEADING

2815  01 0100           	LXI	B,1	;(BC) = TEXT COUNT
2818  11 0E29           	LXI	D,LSTG	;(DE) = TEXT ADDRESS
281B  3A EF28           	LDA	LSTA
281E  A7                	ANA	A
281F  C2 2428           	JNZ	LIST2	;IS SHORT
2822  0E 40             	MVI	C,LSTGL	;PRINT FULL HEADING
2824  79                LIST2	MOV	A,C
2825  EB                	XCHG			(HL);= LINE ADDRESS
2826  CD 0C31           	CALL	$TYPCC	;PRINT ON CONSOLE

                        *	READ DIRECTORY BLOCKS, LOOKING FOR FILE MATCHES

2829  01 0002           LIST3	LXI	B,512
282C  CD 3A30           	CALL	GDWP	;DE = DIRECTORY WORKSPACE POINTER
282F  3E 02             	MVI	A,CN.DIR
2831  D5                	PUSH	D
2832  FF 04             	SCALL	.READ
2834  D1                	POP	D	;DE = DIRECOTRY WORKSPACE
2835  DA 9F28           	JC	LIST9	;ALL DONE

                        *	CHECK NEXT ENTRY IN NAMTAB AGAINST DIRECTORY ENTRY.
                        *	(DE) = DIRECTORY BUFFER POINTER

2838  1A                LIST4	LDAX	D	;(A) = FIRST CHARACTER OF NAME
2839  A7                	ANA	A
283A  CA 2928           	JZ	LIST3	;END OF THIS BUFFER
283D  3C                	INR	A
                        	ERRNZ	DF.EMP-377Q
283E  CA 7928           	JZ	LIST7	;THIS ENTRY IS EMPTY
2841  3C                	INR	A
2842  CA 9F28           	JZ	LIST9	;NO MORE ENTRYS IN DIRECTORY
2845  EB                	XCHG
2846  CD 202D           	CALL	CFE	;CHECK FILE ELIGIBILITY
2849  EB                	XCHG
284A  C2 7928           	JNE	LIST7	;NOT ELIGIBLE
284D  21 3E38           	LXI	H,NAMTAB

2850  E5                LIST5	PUSH	H
2851  D5                	PUSH	D	;SAVE ADDRESS OF FILE AND PATTERN
2852  CD A52D           	CALL	CAD	;CONVERT ASCII NAMTAB ENTRY TO DIRECTORY FORMAT
2855  11 C237           	LXI	D,PIO.DIR+DIR.NAM;(DE) = NAMTAB PATTERN
2858  E1                	POP	H
2859  E5                	PUSH	H	;(HL) = DIRECTORY PATTERN
285A  06 0B             	MVI	B,8+3	;CHECK FOR MATCH
285C  CD 4B2D           	CALL	CWM	;CHECK FOR WILDCARD MATCH
285F  D1                LIST6	POP	D
2860  E1                	POP	H
2861  CA 9028           	JE	LIST8	;GOT FILE TO LIST
2864  01 1100           	LXI	B,FB.NAML
2867  09                	DAD	B	;ADVANCE PAST ENTRY IN NAMTAB

                        *	SEE IF AT END OF NAMTAB

2868  D5                	PUSH	D
2869  EB                	XCHG			(DE);= NEW ADDRESS
286A  2A A235           	LHLD	NAMTLEN
286D  01 3E38           	LXI	B,NAMTAB
2870  09                	DAD	B	;(HL) = LWA+1 OF TABLE
2871  EB                	XCHG
2872  CD 8E18           	CALL	$CDEHL	;COMPARE
2875  D1                	POP	D
2876  C2 5028           	JNE	LIST5	;MORE IN TABLE

                        *	FILE DOESNT MATCH ANY SELECTED FILE. PASS TO NEXT ONE

2879  EB                LIST7	XCHG			(HL);= DIR BUFFER ADDRESS

287A  E5                	PUSH	H
287B  CD 4030           	CALL	GDWP.	;HL = DIRECTORY WORKSPACE PTR.
287E  CD 8A31           	CALL	$INDLB	;A  = DIR. ENTRY LENGTH
2881  FB01              	DW	DIS.ENL
2883  E1                	POP	H

2884  CD 4118           	CALL	$DADA.	;ADVANCE
2887  7E                	MOV	A,M
2888  A7                	ANA	A
2889  EB                	XCHG
288A  C2 3828           	JNZ	LIST4	;TRY THIS ONE
288D  C3 2928           	JMP	LIST3	;READ ANOTHER BLOCK

                        *	HAVE FILE TO LIST

2890  D5                LIST8	PUSH	D	;SAVE DIR POINTER
2891  3A 0D29           	LDA	LSTF	;(A) = SECTORS PER GROUP THIS DEVICE
2894  CD D229           	CALL	PFI	;PRINT FILE INFO
2897  D1                	POP	D
2898  21 F028           	LXI	H,LSTB
289B  34                	INR	M	;COUNT FILE
289C  C3 7928           	JMP	LIST7	;ADVANCE TO NEXT FILE

                        *	ALL DONE. CLOSE DIRECTORY FILE

289F  3E 02             LIST9	MVI	A,CN.DIR
28A1  FF 26             	SCALL	.CLOSE	;CLOSE FILE
28A3  01 0100           	LXI	B,1	;ASSUME SHOFT FORM, JUST WRITE NL
28A6  3A EF28           	LDA	LSTA	;(A) = FORM FLAG
28A9  A7                	ANA	A
28AA  C2 E228           	JNZ	LIST10	;IS SHORT, NO TRAILER

                        *	PRINT SUMMARY:
                        *
                        *	NNN FILES, USING XXX SECTORS. YYY FREE

28AD  3A F028           	LDA	LSTB
28B0  4F                	MOV	C,A
28B1  06 00             	MVI	B,0	;(BC) = FILE COUNT
28B3  3E 03             	MVI	A,3
28B5  21 4F29           	LXI	H,LSTH1
28B8  CD 7132           	CALL	$UDDS	;FILE COUNT

28BB  2A F128           	LHLD	LSTC
28BE  44                	MOV	B,H
28BF  4D                	MOV	C,L	;(BC) = SECTOR COUNT
28C0  21 6029           	LXI	H,LSTH2
28C3  3E 05             	MVI	A,5
28C5  CD 6C32           	CALL	$UDDN	;USED COUNT

28C8  2A 0B29           	LHLD	LSTE
28CB  7E                	MOV	A,M
28CC  CD 302D           	CALL	CFS	;FOLLOW GRT CHAIN
28CF  3A 0D29           	LDA	LSTF
28D2  CD 0719           	CALL	$MU86	;(HL) = SECTORS FREE
28D5  44                	MOV	B,H
28D6  4D                	MOV	C,L
28D7  21 6F29           	LXI	H,LSTH3
28DA  3E 05             	MVI	A,5
28DC  CD 6C32           	CALL	$UDDN	;UNPACK FREE

28DF  01 2D00           	LXI	B,LSTHL
28E2  11 4E29           LIST10	LXI	D,LSTH
28E5  3A 7135           	LDA	SUPRES
28E8  A7                	ANA	A
28E9  C0                	RNZ			NOT;TO SUMMARYIZE
28EA  79                	MOV	A,C	;(A) = COUNT
28EB  EB                	XCHG			(HL);= ADDRESS
28EC  C3 0C31           	JMP	$TYPCC	;TYPE TEXT AND EXIT

28EF  00                LSTA	DB	0	;<>0 IF SHORT FORM

28F0  00                LSTB	DB	0	;FILE COUNT
28F1  0000              LSTC	DW	0	;SECTORS USED
28F3  00000000 00000000 LSTD	DC	24,#0	;FILE NAME DECODE AREA
28FB  00000000 00000000
2903  00000000 00000000
290B  0000              LSTE	DW	0	;GRT ADDRESS
290D  00                LSTF	DB	0	;SECTORS PER GROUP FOR THIS DEVICE
290E  0A4E616D 65092E45 LSTG	DB	NL,'Name',TAB,'.Ext',32,32,'Size',32,32,32,'Created'
2916  78742020 53697A65
291E  20202043 72656174
2926  6564
2928  20202020 54696D65 	DB	32,32,32,32,'Time',32,32,32,'Flags---',TAB,TAB,'Date:',32
2930  20202046 6C616773
2938  2D2D2D09 09446174
2940  653A20
2943  31 312D 4D61722D31LSTG1	DATE
294B  35
294C  0A0A              	DB	NL,NL
      = 0040            LSTGL	EQU	*-LSTG

294E  0A                LSTH	DB	NL	;FIRST CHARACTER MUST BE <NL>
294F  4E4E4E20 46696C65 LSTH1	DB	'NNN Files, Using '
2957  732C2055 73696E67
295F  20
2960  4D4D4D4D 4D205365 LSTH2	DB	'MMMMM Sectors ('
2968  63746F72 732028
296F  58585858 58204672 LSTH3	DB	'XXXXX Free)',NL
2977  6565290A
      = 002D            LSTHL	EQU	*-LSTH
297B                    BLS	SPACE	4,10
                        **	BLS - BUILD LIST OF SOURCE FILES.
                        *
                        *	BLS BUILDS A LIST OF SOURCE FILES INTO *NAMTAB*
                        *	NULL FIELDS ARE SET TO WILDCARDS. BLS REQUIRES THAT ALL
                        *	FILES SPECIFIED HAVE THE SAME DEVICE.
                        *
                        *	IF THE COMMAND LINE CONTAINS NO FILES, BUT CONTAINS AT LEAST
                        *	ONE BLANK (AS WOULD BE THE CASE IN PROCESSING THE /LIST SWITCH, SINCE
                        *	THE '/LIST' IS REPLACED WITH BLANKS) A FILE NAME OF ????????.???
                        *	IS DECODED.
                        *	ENTRY	NAMTAB EMPTY
                        *	EXIT	'C' CLEAR IF OK
                        *		(DE) = #BLSA = 3 CHARACTER DEVICE NAME
                        *		'C' SET IF ERROR
                        *		 (A) = ERROR MESSAGE
                        *	USES	ALL

297B  CD EB32           BLS	CALL	$MOVEL
297E  0300CD29 C629     	DW	3,BLSC,BLSA;SET INITIAL DEFAULT DEVICE
2984  21 0000           	LXI	H,0
2987  22 A235           	SHLD	NAMTLEN	;CLEAR NAMTAB
298A  3E FF             	MVI	A,377Q
298C  32 CC29           	STA	BLSB	;FLAG PROCESSING OF FIRST FILE NAME
298F  CD 5E30           	CALL	LSN	;LOCATE SOURCE NAMES

                        *	CRACK THE NEXT NAME

2992  7E                BLS1	MOV	A,M
2993  11 C629           	LXI	D,BLSA	;(DE) = DEFAULT ADDRESS
2996  A7                	ANA	A
2997  C8                	RZ			NO;MORE NAMES
2998  CD 7131           	CALL	$SOB	;SEE IF ALL NULL
299B  7E                	MOV	A,M
299C  A7                	ANA	A
299D  C2 A329           	JNZ	BLS2	;NOT ALL NULL
29A0  21 CD29           	LXI	H,BLSC	;USE DEFAULT DEVICE
29A3  CD A92D           BLS2	CALL	CAD.	;CONVERT ASCII NAME TO DIRECTORY FORMAT
29A6  D8                	RC			ERROR

                        *	IF FIRST NAME, RECORD DEVICE
                        *	IF NOT FIRST, COMPARE DEVICE AGAINST FIRST DEVICE

29A7  E5                	PUSH	H
29A8  11 BF37           	LXI	D,PIO.DEV
29AB  21 C629           	LXI	H,BLSA
29AE  01 0300           	LXI	B,3	;SETUP COUNT, FROM AND TO

29B1  CD 3018           BLS3	CALL	$COMP	;SEE IF THIS DEVICE SAME AS PREVIOUS
29B4  CA BC29           	JE	BLS4	;OK
29B7  3E 81             	MVI	A,PEC.DNC;MULTIPLE DEVICES ARE ILLEGAL
29B9  37                	STC
29BA  E1                	POP	H
29BB  C9                	RET			RETURN;WITH ERROR

                        *	GOT NAME DECODED. ENTER IN NAMTAB

29BC  CD AE2C           BLS4	CALL	AEN	;ADD ENTRY TO NAMTAB
29BF  E1                	POP	H
29C0  CD D530           	CALL	SFS	;SKIP FILE SEPERATOR (BLANKS AND/OR COMMA)
29C3  C3 9229           	JMP	BLS1	;SEE IF MORE

29C6  53593080 8080     BLSA	DB	'SY0',200Q,200Q,200Q
29CC  00                BLSB	DB	0	;FIRST FILE NAME FLAG
29CD  5359303A 00       BLSC	DB	'SY0:',0	;DEFAULT DEVICE
29D2                    PFI	SPACE	4,10
                        **	PFI - PRINT FILE INFO.
                        *
                        *	PFI DECODES A DIRECTORY ENTRY INTO A CODED LINE, THEN
                        *	WRITES IT TO 'DESTFB'.
                        *
                        *	THE PRODUCED FORMAT DEPENDS UPON THE LISTING FORMAT FLAG,
                        *	LSTA.
                        *
                        *	SHORT FORM:
                        *
                        *	NAME	.EXT	(TAB)
                        *
                        *	LONG FORM:
                        *
                        *	NAME	.EXT	SIZE	DATE	TIME	FLAGS	(NL)
                        *
                        *	ENTRY	(A) = SECTORS PER GROUP FOR THIS DEVICE
                        *		(DE) = DIRECTORY ENTRY POINTER
                        *	EXIT	IF LONG FORM, SECTOR COUNT IS ACCUMULATED IN LSTC
                        *	USES	ALL

29D2  32 542B           PFI	STA	PFIC	;SAVE SECTORS PER GROUP
29D5  21 1C2B           	LXI	H,PFIA
29D8  0E 08             	MVI	C,8
29DA  CD F12A           	CALL	PFI20	;COPY NAME
29DD  CA E329           	JZ	PFI1	;ALL 8 CHARACTERS
29E0  36 09             	MVI	M,TAB
29E2  23                	INX	H
29E3  36 2E             PFI1	MVI	M,'.'
29E5  23                	INX	H
29E6  0E 03             	MVI	C,3
29E8  CD F12A           	CALL	PFI20	;COPY EXTENSION
29EB  3A EF28           	LDA	LSTA
29EE  A7                	ANA	A
29EF  C2 FD29           	JNZ	PFI1.2	;/B
29F2  0C                	INR	C	;+ 1 SPACE
29F3  CD 052B           PFI1.1	CALL	PFI41
29F6  0D                	DCR	C
29F7  C2 F329           	JNZ	PFI1.1
29FA  C3 122A           	JMP	PFI3

                        *	IS SHORT FORM. SEE IF NEED TO END LINE

29FD  36 09             PFI1.2	MVI	M,TAB
29FF  23                	INX	H
2A00  3C                	INR	A
2A01  FE 05             	CPI	5
2A03  C2 0C2A           	JNE	PFI2	;NOT TIME YET
2A06  2B                	DCX	H
2A07  36 0A             	MVI	M,NL
2A09  23                	INX	H	;TIME TO END LINE
2A0A  3E 01             	MVI	A,1
2A0C  32 EF28           PFI2	STA	LSTA	;RESET COUNT
2A0F  C3 E12A           	JMP	PFI6	;OUTPUT TO FILE

                        *	IS LONG FORM, DECODE FILE SIZE

2A12  01 0500           PFI3	LXI	B,DIR.FGN-DIR.EXT-3
2A15  EB                	XCHG			(DE);= LINE ADDR, (HL) = #PIO.DIR+DIR.EXT+3
2A16  09                	DAD	B	;(HL) = #DIR.FGN
2A17  7E                	MOV	A,M	;(A) = (DIR.FGN)
2A18  23                	INX	H
2A19  23                	INX	H
2A1A  4E                	MOV	C,M	;(C) = DIR.LSI = SECTORS USED IN LAST GROUP
                        	ERRNZ	DIR.LSI-DIR.FGN-2
2A1B  EB                	XCHG			(DE);= ADDRESS OF LSI
2A1C  D5                	PUSH	D	;SAVE #DIR.LSI
2A1D  E5                	PUSH	H	;SAVE LINE ADDRESS
2A1E  2A 0B29           	LHLD	LSTE
2A21  6F                	MOV	L,A
2A22  7E                	MOV	A,M
2A23  CD 302D           	CALL	CFS	;COMPUTE FILE ISZE
2A26  3A 542B           	LDA	PFIC	;(A) = SECTORS PER GROUP
2A29  47                	MOV	B,A
2A2A  CD 0719           	CALL	$MU86;(HL) = SECTORS USED (EXCEPT FOR THOSE IN LAST GROUP)

2A2D  3A 6E35           	LDA	ALLOCA
2A30  A7                	ANA	A
2A31  CA 352A           	JZ	PFI3.5
2A34  48                	MOV	C,B	;Use Group Size instead if /ALL
      = 2A35            PFI3.5	EQU	*

2A35  06 00             	MVI	B,0
2A37  09                	DAD	B	;(HL) = SECTORS USED
2A38  44                	MOV	B,H
2A39  4D                	MOV	C,L	;(BC) = SECTORS USED COUNT
2A3A  2A F128           	LHLD	LSTC
2A3D  09                	DAD	B
2A3E  22 F128           	SHLD	LSTC	;ACCUMULATE COUNT OF SECTORS
2A41  E1                	POP	H	;(HL) = LINE ADDRESS
2A42  3E 05             	MVI	A,5	;5 DIGITS MAX
2A44  CD 7132           	CALL	$UDDS	;UNPACK COUNT
2A47  CD 022B           	CALL	PFI42
2A4A  D1                	POP	D	;(DE) = #DIR.LSI

                        *	TYPE CREATION DATE

2A4B  EB                	XCHG
                        	ERRNZ	DIR.CRD-DIR.LSI-1
2A4C  23                	INX	H	;(HL) = #DIR.CRD
2A4D  E5                	PUSH	H
2A4E  CD 8918           	CALL	$HLIHL
2A51  EB                	XCHG
2A52  CD CC31           	CALL	$DAD	;DECODE AUGUSTAN DATE

                        *	DECODE TIME

2A55  CD 022B           	CALL	PFI42
2A58  EB                	XCHG
2A59  E1                	POP	H	;(HL) = #DIR.CRD
2A5A  E5                	PUSH	H
2A5B  01 F8FF           	LXI	B,DIR.CTH-DIR.CRD
2A5E  09                	DAD	B
2A5F  EB                	XCHG			(DE);=> HOURS BYTE IN BCD, (HL) = LINE

2A60  1A                	LDAX	D	;If hours set to 377Q
2A61  FE FF             	CPI	377Q		 ;then don't show time
2A63  CA B42A           	JE	PFI.NT

2A66  CD 092B           	CALL	PFI50	;DECODE BCD
2A69  D5                	PUSH	D	;HOURS
2A6A  E5                	PUSH	H	;LINE
2A6B  2B                	DCX	H
2A6C  2B                	DCX	H
2A6D  E5                	PUSH	H	;LINE-2

2A6E  21 AF2A           	LXI	H,T.AP	;SET AM OR PM
2A71  1A                	LDAX	D
2A72  32 552B           	STA	PFIT
2A75  FE 12             	CPI	12H
2A77  D2 7F2A           	JNC	T.PM
2A7A  36 61             T.AM	MVI	M,'a'
2A7C  C3 8F2A           	JMP	T.0

2A7F  36 70             T.PM	MVI	M,'p'
2A81  D6 12             	SUI	12H
2A83  27                	DAA
2A84  32 552B           	STA	PFIT
2A87  11 552B           	LXI	D,PFIT
2A8A  E1                	POP	H	;LINE-2
2A8B  E5                	PUSH	H	;LINE-2
2A8C  CD 092B           	CALL	PFI50	;DECODE ADJUSTED HOURS

2A8F  3A 552B           T.0	LDA	PFIT	;IF HOUR = '00' THEN MAKE IT '12'
2A92  E1                	POP	H	;LINE-2
2A93  A7                	ANA	A
2A94  C2 9D2A           	JNZ	T.1
2A97  36 31             	MVI	M,'1'
2A99  23                	INX	H
2A9A  36 32             	MVI	M,'2'
2A9C  2B                	DCX	H
2A9D  3E 30             T.1	MVI	A,'0'	;IF FIRST CHAR IS '0' REPLACE WITH ' '
2A9F  BE                	CMP	M
2AA0  C2 A52A           	JNE	T.2
2AA3  36 20             	MVI	M,' '
2AA5  E1                T.2	POP	H	;LINE
2AA6  D1                	POP	D	;HOURS
2AA7  36 3A             	MVI	M,':'
2AA9  23                	INX	H
2AAA  13                	INX	D
                        	ERRNZ	DIR.CTM-DIR.CTH-1
2AAB  CD 092B           	CALL	PFI50	;DECODE BCD
2AAE  36 7A             	MVI	M,'z'	;SET AM OR PM
      = 2AAF            T.AP	EQU	*-1
2AB0  23                	INX	H
2AB1  C3 BA2A           	JMP	PFI.F

2AB4  CD FF2A           PFI.NT	CALL	PFI43
2AB7  CD FF2A           	CALL	PFI43

2ABA  CD 022B           PFI.F	CALL	PFI42

                        *	DECODE FLAGS

2ABD  EB                	XCHG			(DE);= LINE ADDRESS
2ABE  E1                	POP	H	;(HL) = #DIR.CRD
2ABF  01 FBFF           	LXI	B,DIR.FLG-DIR.CRD
2AC2  09                	DAD	B	;(HL) = ADDRESS OF DIRFLG
2AC3  7E                	MOV	A,M	;(A) = FLAGS
2AC4  EB                	XCHG			(HL);= LINE ADDRESS
2AC5  A7                	ANA	A
2AC6  CA DE2A           	JZ	PFI5	;NO FLAGS

2AC9  11 4C2B           	LXI	D,PFIB
2ACC  0E 08             	MVI	C,8
2ACE  87                PFI31	ADD	A
2ACF  F5                	PUSH	PSW
2AD0  1A                	LDAX	D
2AD1  DA D62A           	JC	PFI32
2AD4  3E 20             	MVI	A,' '
2AD6  77                PFI32	MOV	M,A
2AD7  23                	INX	H
2AD8  13                	INX	D
2AD9  F1                	POP	PSW
2ADA  0D                	DCR	C
2ADB  C2 CE2A           	JNZ	PFI31

2ADE  36 0A             PFI5	MVI	M,NL
2AE0  23                	INX	H

                        *	LINE ALL BUILT. WRITE TO DESTFB

2AE1  11 E4D4           PFI6	LXI	D,-PFIA
2AE4  19                	DAD	D
2AE5  7D                	MOV	A,L	;(A) = COUNT
2AE6  21 1C2B           	LXI	H,PFIA
2AE9  C3 0C31           	JMP	$TYPCC	;TYPE LINE AND EXIT
2AEC                    PFI20	SPACE	3,10
                        **	PFI20 - COPY FILE NAME.
                        *
                        *	PFI20 COPIES A NAME FILED FROM THE DIRECTORY ENTRY TO A CODED
                        *	LINE
                        *
                        *	EENTRY	(DE) = DIRECTORY ADDRESS
                        *		(C) = NAME LENGTH
                        *		(HL) = LINE ADDRESS
                        *	EXIT	(DE) = (DE) + (C)
                        *		'Z' SET IF MAX CHARACTERS COPIED
                        *	USES	A,F,C,D,E,H,L

2AEC  77                PFI19	MOV	M,A	;COPY
2AED  23                	INX	H
2AEE  13                	INX	D
2AEF  0D                	DCR	C
2AF0  C8                	RZ			ALL;COPIED
2AF1  1A                PFI20	LDAX	D
2AF2  A7                	ANA	A
2AF3  C2 EC2A           	JNZ	PFI19	;GOT CHAR

                        *	NO NAME. (C) = COUNT LEFT

2AF6  7B                	MOV	A,E
2AF7  81                	ADD	C
2AF8  5F                	MOV	E,A
2AF9  7A                	MOV	A,D
2AFA  CE 00             	ACI	0
2AFC  57                	MOV	D,A
2AFD  B3                	ORA	E	;CLEAR 'Z'
2AFE  C9                	RET

                        *	PUT SPACES IN CODED LINE

2AFF  36 20             PFI43	MVI	M,' '
2B01  23                	INX	H
2B02  36 20             PFI42	MVI	M,' '
2B04  23                	INX	H
2B05  36 20             PFI41	MVI	M,' '
2B07  23                	INX	H
2B08  C9                	RET

                        *	DECODE BCD BYTE

2B09  1A                PFI50	LDAX	D	;GET BYTE
2B0A  E6 F0             	ANI	0F0H	;MASK OFF HI DIGIT
2B0C  0F                	RRC			ROTATE
2B0D  0F                	RRC
2B0E  0F                	RRC
2B0F  0F                	RRC
2B10  C6 30             	ADI	'0'	;MAKE ASCII
2B12  77                	MOV	M,A	;STUFF IT
2B13  23                	INX	H
2B14  1A                	LDAX	D	;GET BYTE
2B15  E6 0F             	ANI	0FH	;MASK OFF LOW DIGIT
2B17  C6 30             	ADI	'0'	;MAKE ASCII
2B19  77                	MOV	M,A	;STUFF IT
2B1A  23                	INX	H
2B1B  C9                	RET

2B1C   (0000)           PFIA	DS	0	;BUFFER AREA FOR LINE BUILD
2B1C  46494C45 4E414D45 	DB	'FILENAME.EXT.NNNNN..DD-MMM-YY..HH:MMz..SLWCABDU',0
2B24  2E455854 2E4E4E4E
2B2C  4E4E2E2E 44442D4D
2B34  4D4D2D59 592E2E48
2B3C  483A4D4D 7A2E2E53
2B44  4C574341 42445500
2B4C  534C5743 41424455 PFIB	DB	'SLWCABDU';CODES
                        	ERRNZ	DIF.SYS-200Q
                        	ERRNZ	DIF.LOC-100Q
                        	ERRNZ	DIF.WP-40Q
                        	ERRNZ	DIF.CNT-20Q
                        	ERRNZ	DIF.ARC-10Q
                        	ERRNZ	DIF.BAD-4
                        	ERRNZ	DIF.DL-2
                        	ERRNZ	DIF.USR-1

2B54  00                PFIC	DB	0	;SECTORS PER GROUP FOR THIS DEVICE
2B55  00                PFIT	DB	0	;TEMP TIME BYTE
2B56                    	STL	'VERSN	- ONECOPY VERSION INFORMATION'
2B56                    	EJECT
                        ***	VERSN	- PIP VERSION INFORMATION
                        *
                        *	/V[ERSION]
                        *	/ID
                        *
                        *	PRINT THE ONECOPY VERSION INFORMATION

      = 2B56            VERSN	EQU	*

2B56  CD 3E2D           	CALL	CTS	;CHECK FOR TARGET FILE SPECIFICATION
2B59  37                	STC
2B5A  C2 542C           	JNZ	ERROR	;TARGET FILE SPECIFICATION ILLEGAL
2B5D  21 D937           	LXI	H,LINE
2B60  CD 7131           	CALL	$SOB	;SKIP OVER ALL THE BLANKS ($DRS TURNS SWITCHES
2B63  7E                	MOV	A,M		;TO BLANKS)
2B64  A7                	ANA	A
2B65  3E 87             	MVI	A,PEC.SFI;SOURCE FILE ILLEGAL
2B67  37                	STC
2B68  C2 542C           	JNZ	ERROR	;ONLY ALLOW SWITCH ON LINE
2B6B  CD 5E19           	CALL	$TYPTX
2B6E  0A4F4E45 434F5059 	DB	NL,'ONECOPY',TAB,'Version: '
2B76  09566572 73696F6E
2B7E  3A20
2B80  332E30            	DB	VERS/16+'0','.',VERS&00001111B+'0'
2B83  20617320 6F6620   	DB	' as of '
2B8A  31 312D 4D61722D31	DATE
2B92  35
2B93  8A                	DB	ENL

2B94  C9                	RET

                        *	/ID Entry Point

2B95  CD 562B           ID	CALL	VERSN			; Show version info
2B98  01 8022           	LXI	B,OCFWA
2B9B  21 D72B           	LXI	H,VERSV0
2B9E  CD AA32           	CALL	$UOW.
2BA1  01 4237           	LXI	B,MEML-1
2BA4  21 E52B           	LXI	H,VERSV1
2BA7  CD AA32           	CALL	$UOW.
2BAA  2A 8335           	LHLD	BUFPTR
2BAD  44                	MOV	B,H
2BAE  4D                	MOV	C,L
2BAF  21 F62B           	LXI	H,VERSV2
2BB2  CD AA32           	CALL	$UOW.
2BB5  CD 222F           	CALL	EBM
2BB8  2A 8335           	LHLD	BUFPTR
2BBB  11 FF00           	LXI	D,377Q	;ROUND UP
2BBE  19                	DAD	D
2BBF  3A 6C35           	LDA	OBUFLIM ;LAST SECTOR NUMBER
2BC2  94                	SUB	H	;MINUS BUFFER SECTOR
2BC3  06 00             	MVI	B,0
2BC5  4F                	MOV	C,A
2BC6  3E 03             	MVI	A,3
2BC8  21 072C           	LXI	H,VERSV3
2BCB  CD 6C32           	CALL	$UDDN

2BCE  CD 5E19           	CALL	$TYPTX
2BD1  46574120 3D20     	DB	'FWA = '
2BD7  3030302E 30303009 VERSV0	DB	'000.000',TAB,'LWA = '
2BDF  4C574120 3D20
2BE5  3030302E 30303009 VERSV1	DB	'000.000',TAB,'Buffer = '
2BED  42756666 6572203D
2BF5  20
2BF6  3030302E 30303020 VERSV2	DB	'000.000','   Size = '
2BFE  20205369 7A65203D
2C06  20
2C07  6E6E6E20 73656374 VERSV3	DB	'nnn sectors',ENL
2C0F  6F72738A
2C13  C3 AF30           	JMP	SBE			; shrink buffer and return
2C16                    	STL	'ERROR PROCESSING'
2C16                    	EJECT
                        **	ERROR PROCESSING ROUTINES
                        *
2C16                    	SPACE	3,10
                        ***	NAMERR - FILE TYPE ERROR, OCCURRED ON FILE WHOSE NAME
                        *	IS NEXT UP IN NAMTAB.
                        *
                        *	PROCESS VIA $FERROR

2C16  2A A635           NAMERR	LHLD	NAMTPTR
2C19  01 F6FF           	LXI	B,-FB.NAM
2C1C  09                	DAD	B
2C1D  C3 9233           	JMP	$FERROR
2C20                    DESTERR	SPACE	4,10
                        **	ERROR ON FILE IN DESTFB

2C20  21 8735           DESTERR LXI	H,DESTFB
2C23  C3 9233           	JMP	$FERROR
2C26                    INTERR	SPACE	4,10
                        **	INTERNAL ERRORS. SHOULD NOT OCCUR.

2C26  3E 31             IERR1	MVI	A,'1'

2C28  21                	DB	21H	;FAKE LXI H,

2C29  3E 32             IERR2	MVI	A,'2'

2C2B  21                	DB	21H	;FAKE LXI H,

2C2C  3E 33             IERR3	MVI	A,'3'

2C2E  32 4E2C           	STA	IERRN	;SAVE CODE

2C31  CD 5E19           	CALL	$TYPTX
2C34  070A4F4E 45434F50 	DB	BELL,NL,'ONECOPY INTERNAL ERROR #'
2C3C  5920494E 5445524E
2C44  414C2045 52524F52
2C4C  2023
2C4E  6E8A              IERRN	DB	'n',ENL

2C50  3E 01             	MVI	A,1
2C52  FF 00             	SCALL	.EXIT	;ABORT
2C54                    ERROR	SPACE	4,10
                        **	ERROR - GENERAL AND SYNTAX ERRORS NOT DIRECTLY ASSOCIATED
                        *	WITH A VALID FILE NAME.

2C54  F5                ERROR	PUSH	PSW	;SAVE CODE
2C55  CD 5E19           	CALL	$TYPTX
2C58  07455252 4F52202D 	DB	BELL,'ERROR -',' '+200Q
2C60  A0
2C61  F1                	POP	PSW
2C62  A7                	ANA	A
2C63  FA 6D2C           	JM	ERROR1	;IS PRODUCT ERROR
2C66  26 0A             	MVI	H,NL	;USE NL AS MESSAGE TRAIL CHAR
2C68  FF 2F             	SCALL	.ERROR	;LOOK UP SYSTEM ERROR
2C6A  C3 9F22           	JMP	RESTART

                        *	IS PRODUCT ERROR

2C6D  21 8E2C           ERROR1	LXI	H,ERRORA
2C70  BE                ERROR2	CMP	M
2C71  23                	INX	H
2C72  C2 702C           	JNE	ERROR2	;FIND ERROR MESSAGE
2C75  CD 5E19           	CALL	$TYPTX
2C78  074F4E45 434F5059 	DB	BELL,'ONECOPY Error #',' '+200Q
2C80  20457272 6F722023
2C88  A0
2C89  FF 03             	SCALL	.PRINT	;PRINT MESSAGE
2C8B  C3 9F22           	JMP	RESTART

2C8E   (0000)           ERRORA	DS	0	;ERROR MESSAGES
2C8E  8030318A          	DB	PEC.DF,'01',ENL
2C92  8130328A          	DB	PEC.DNC,'02',ENL
2C96  8330338A          	DB	PEC.TFI,'03',ENL
2C9A  8430348A          	DB	PEC.CS,'04',ENL
2C9E  8530358A          	DB	PEC.IUW,'05',ENL
2CA2  8630368A          	DB	PEC.IDF,'06',ENL
2CA6  8730378A          	DB	PEC.SFI,'07',ENL
2CAA  8830388A          	DB	PEC.FCI,'08',ENL
2CAE                    	STL	'SUBROUTINES'
2CAE                    	EJECT
2CAE                    AEN	SPACE	4,10
                        **	AEN - ADD ENTRY TO 'NAMTAB'
                        *
                        *	AEN EXPANDS THE FILE INFO IN PIO.XXX INTO A FILE DESCRIPTOR
                        *	AND ENTERS IT IN THE NAMTAB TABLE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' SET IF WILDCARD
                        *	USES	ALL

2CAE  21 E12C           AEN	LXI	H,AENA
2CB1  CD 362F           	CALL	CDA	;CONVERT DIRECTORY FORMAT TO ASCII FORMAT
2CB4  D6 01             	SUI	1	;'C' SET IF WILDCARD
2CB6  F5                	PUSH	PSW	;SAVE FLAG
2CB7  DA C02C           	JC	AEN1	;Ignore Query for wild card names
2CBA  CD 5A2E           	CALL	CQF	;Check Query Flag
2CBD  C2 DF2C           	JNZ	AEN2	;Don't copy this file
2CC0  2A A235           AEN1	LHLD	NAMTLEN
2CC3  01 1100           	LXI	B,FB.NAML
2CC6  09                	DAD	B	;INCREASE SIZE
2CC7  22 A235           	SHLD	NAMTLEN
2CCA  EB                	XCHG			(DE);= NEW LENGTH
2CCB  2A A435           	LHLD	NAMTMAX
2CCE  7D                	MOV	A,L	;SEE IF WILL OVERFLOW
2CCF  93                	SUB	E
2CD0  7C                	MOV	A,H
2CD1  9A                	SBB	D
2CD2  DC 4430           	CC	INA	;INCREASE NAMTAB ALLOCATION
2CD5  21 2D38           	LXI	H,NAMTAB-FB.NAML
2CD8  19                	DAD	D	;(HL) = *TO* ADDRESS
2CD9  11 E12C           	LXI	D,AENA	;(DE) = *FROM* ADDRESS
2CDC  CD AA18           	CALL	$MOVE	;MOVE ENTRY IN
2CDF  F1                AEN2	POP	PSW	;(PSW) = WILDCARD FLAG
2CE0  C9                	RET

2CE1  00000000 00000000 AENA	DC	FB.NAML,#0
2CE9  00000000 00000000
2CF1  00
2CF2                    BSL	SPACE	4,10
                        **	BSL - BUILD SOURCE FILE LIST.
                        *
                        *	BSL CRACKS THE LIST OF THE SOURCE FILES FROM THE COMMAND LINE AND
                        *	BUILDS THEM INTO THE NAMTAB MANAGED TABLE.
                        *	WILD CARDS ENCOUNTERED ARE EXPANDED.
                        *
                        *	ENTRY	(A) <> 0 IF TO ASK ABOUT '*.*' USE
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *		 (A) = CODE
                        *	USES	ALL

2CF2  32 1B2D           BSL	STA	BSLA	;SAVE ASK FLAG
2CF5  CD 5E30           	CALL	LSN	;LOCATE SOURCE NAME

                        *	GO THROUGH SOURCE LIST CRACKING NAMES

2CF8  7E                BSL1	MOV	A,M
2CF9  A7                	ANA	A
2CFA  C8                	RZ			ALL;DONE
2CFB  11 A835           	LXI	D,DEFALT
2CFE  CD A52D           	CALL	CAD	;CONVERT ASCII NAME TO DIRECTORY FORMAT
2D01  D8                	RC			ERROR
2D02  CD E230           	CALL	SND	;SET NEW DEFAULTS
2D05  E5                	PUSH	H	;SAVE LINE ADDRESS
2D06  3A 1B2D           	LDA	BSLA
2D09  A7                	ANA	A
2D0A  C4 1C2D           	CNZ	CCW	;CHECK FOR COMPLETE WILDCARD (*.*)
2D0D  DA 9F22           	JC	RESTART ;USER CHICKENED OUT
2D10  CD 6F2F           	CALL	EWS	;EXPAND WILDCARD SPECIFICATION
2D13  E1                BSL2	POP	H	;RESTORE LINE ADDRESS
2D14  D8                	RC			USER;REFUSED *.*
2D15  CD D530           	CALL	SFS	;SKIP FILE SEPERATOR (BLANKS AND/OR COMMA)
2D18  C3 F82C           	JMP	BSL1	;DO MORE

2D1B  00                BSLA	DB	0	;<>0 IF TO CHECK FOR *.*
2D1C                    CCW	SPACE	4,10
                        **	CCW - CHECK FOR COMPLETE WILDCARD.
                        *
                        *	CCW IS CALLED WITH A NAME CRACKED INTO PIO.XXX, TO SEE IF
                        *	IT IS A *.* SPECIFICATION.
                        *
                        *	IF SO, CCW ASKS,
                        *
                        *	DELETE ALL FILES ON DEV: ?!? (Y/N)
                        *
                        *	THE USER REPLY IS ACCEPTED AND DECODED.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' CLEAR IF NOT *.*, OR 'Y' REPLIED
                        *		'C' SET IF *.* AND NOT 'Y'
                        *	USES	A,F,B,H,L

2D1C  21 C237           CCW	LXI	H,PIO.DIR+DIR.NAM
2D1F  C9                	RET			FORGET;IT
2D20                    CFE	SPACE	4,10
                        **	CFE - CHECK FILE ELIGIBILITY.
                        *
                        *	CFE CHECKS TO SEE IF A WILDCARD-SELECTED FILE IS ELIGIBLE
                        *	FOR PROCESSING. IF THE FILE IS FLAGGED SYSTEM, AND /S IS NOT
                        *	SPECIFIED, THE FILE IS NOT ELIGIBLE.
                        *
                        *	ENTRY	(HL) = DIRECTORY ENTRY POINTER
                        *	EXIT	'Z' SET IF ELIGIBLE
                        *	USES	A,F

2D20  E5                CFE	PUSH	H
2D21  3E 0E             	MVI	A,DIR.FLG
2D23  CD 4118           	CALL	$DADA.
2D26  7E                	MOV	A,M	;(A) = FLAG
2D27  E6 80             	ANI	DIF.SYS
2D29  E1                	POP	H
2D2A  C8                	RZ			ELIGIBLE
2D2B  3A 7335           	LDA	SYSTEM	;CHECK /S FLAG
2D2E  A7                	ANA	A	
2D2F  C9                	RET
2D30                    CFS	SPACE	4,10
                        **	CFS - COMPUTE FILE SIZE
                        *
                        *	CFS COMPUTES THE SIZE OF A FILE. THE DEVICE'S GRT MUST BE IN
                        *	THE 'GRT' BUFFER.
                        *
                        *	ENTRY	(A) = FIRST GROUP NUMBER
                        *	EXIT	(DE) = SIZE
                        *	USES	ALL

2D30  2A 0B29           CFS	LHLD	LSTE
2D33  11 0000           CFS.	LXI	D,0
2D36  A7                CFS1	ANA	A
2D37  C8                	RZ			ALL;DONE
2D38  6F                	MOV	L,A
2D39  7E                	MOV	A,M	;(A) = NEXT GRT
2D3A  13                	INX	D
2D3B  C3 362D           	JMP	CFS1	;TRY AGAIN
2D3E                    CTS	SPACE	4,10
                        **	CTS	-  CHECK TARGET FILE SPECIFICATION
                        *
                        *	CTS CHECKS FOR A TARGET FILE SPECIFICATION
                        *
                        *
                        *	ENTRY	NONE
                        *
                        *	EXIT	(PSW)	= 'Z' SET IF NO TARGET FILE
                        *			= 'Z' CLEAR IF    TARGET FILE
                        *			   (A)  = PEC.TFI ERROR CODE
                        *
                        *	USES	(PSW),(HL)

2D3E  CD 5E30           CTS	CALL	LSN	;(HL) = ADDRESS OF FIRST SOURCE NAME
2D41  11 27C8           	LXI	D,-LINE
2D44  19                	DAD	D	;(HL) == 0 IF NO '=' IN COMMAND LINE
2D45  7D                	MOV	A,L
2D46  B4                	ORA	H
2D47  C8                	RZ			NO;TARGET FILE
2D48  3E 83             	MVI	A,PEC.TFI;TARGET FILE ILLEGAL
2D4A  C9                	RET			TARGET;FILE SPECIFIED
2D4B                    CWM	SPACE	4,10
                        **	CWM - CHECK WILDCARD MATCH.
                        *
                        *	CWM CHECKS TO SEE IF A WILDCARDED FIELD MATCHES A NON-WILDCARDED
                        *	FIELD.
                        *
                        *	ENTRY	(DE) = ADDRESS OF WC NAME
                        *		(HL) = ADDRESS OF NON/WC NAME
                        *		(B) = NUMBER OF CHARACTERS TO CHECK
                        *	EXIT	'Z' SET IF MATCH
                        *		 (HL) = (HL)+(B)
                        *		 (DE) = (DE) = (B)
                        *		'Z' CLEAR IF NO MATCH
                        *	USES	A,F,B,D,E,H,L

2D4B  1A                CWM	LDAX	D
2D4C  A7                	ANA	A
2D4D  FA 522D           	JM	CWM1	;IS MATCH
2D50  BE                	CMP	M
2D51  C0                	RNE			NO;MATCH
2D52  13                CWM1	INX	D
2D53  23                	INX	H	;ADVANCE ADDRESSES
2D54  05                	DCR	B
2D55  C2 4B2D           	JNZ	CWM	;GO FOR MORE
2D58  C9                	RET			GOT;MATCH
2D59                    DDF	SPACE	4,10
                        **	DDF - DECODE DESTINATION FILE.
                        *
                        *	DDF DECODES THE DESTINATION FILE NAME FROM THE COMMAND LINE.
                        *
                        *	IF NO DESTINATION NAME IS SPECIFIED, IT DEFAULTS TO
                        *
                        *	KB:PIPDEST.JGL
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' CLEAR IF OK
                        *		 (A) = 0 IF NAME HAS WILDCARDS
                        *		 (A) = 1 IF NO WILDCARD USED
                        *		 DESTFB+FB.NAM CONTAINS A COMPLETE DESTINATION FILE NAME
                        *		 (HL) = COMMAND LINE POINTER UDPATED
                        *		'C' SET IF ERROR
                        *		 (A) = CODE
                        *	USES	ALL

2D59  11 D937           DDF	LXI	D,LINE
2D5C  62                	MOV	H,D
2D5D  6B                	MOV	L,E	;(HL) = COMMAND POINTER
2D5E  1A                DDF1	LDAX	D
2D5F  13                	INX	D
2D60  FE 3D             	CPI	'='
2D62  CA 6C2D           	JE	DDF2	;HAVE A SOURCE FILE
2D65  A7                	ANA	A
2D66  C2 5E2D           	JNZ	DDF1	;MORE TO CHECK
2D69  21 992D           DDF1.0	LXI	H,DDFA	;USE DEFAULT

                        *	(HL) = ADDRESS FOR NAME

2D6C  11 A835           DDF2	LXI	D,DEFALT
2D6F  CD A52D           	CALL	CAD	;CONVERT ASCII NAME TO DIRECTORY FORMAT
2D72  D8                	RC			ERROR
2D73  CA 692D           	JZ	DDF1.0	;NO FILE NAME SPECIFIED, USE DEFAULT
2D76  7E                	MOV	A,M
2D77  FE 3D             	CPI	'='
2D79  3E 86             	MVI	A,PEC.IDF;ASSUME ILLEGAL DESTINATION FORMAT
2D7B  37                	STC
2D7C  C0                	RNE			MUST;HAVE '='

                        *	HAVE NAME DECODED. EXPAND INTO DESTFB+FB.NAM

2D7D  21 9135           	LXI	H,DESTFB+FB.NAM
2D80  CD 362F           	CALL	CDA	;CONVERT DIRECTORY FORMAT TO ASCII FORMAT
2D83  F5                	PUSH	PSW	;SAVE CODE
2D84  0E 03             	MVI	C,3
2D86  11 A22D           	LXI	D,DDFB
2D89  21 9135           	LXI	H,DESTFB+FB.NAM
2D8C  CD 3018           	CALL	$COMP	;SEE IF DEVICE IS SY0
2D8F  C2 942D           	JNE	DDF3	;IS ERROR
2D92  F1                	POP	PSW
2D93  C9                	RET			RETURN;WITH 'C' CLEAR

2D94  F1                DDF3	POP	PSW	;ERROR, ILLEGAL DEVICE CODE
2D95  3E 05             	MVI	A,EC.DNS
2D97  37                	STC
2D98  C9                	RET

2D99  5359303A 2A2E2A3D DDFA	DB	'SY0:*.*=',0;DEFAULT TARGET FOR ONECOPY
2DA1  00
2DA2  535930            DDFB	DB	'SY0'	;REQUIRED DEVICE SPECIFICATION FOR ONECOPY
2DA5                    CAD	SPACE	4,10
                        **	CAD - CONVERT ASCII FILE NAME INTO DIRECTORY FORMAT.
                        *
                        *	CAD CRACKS AN ALPHANUMERIC FILE DESCRIPTION, OF THE FORM
                        *
                        *	DEV:NAME.EXT
                        *
                        *	INTO THE PIO.XXX FIELDS.
                        *
                        *	THE DEFAULT BLOCK DETERMINES THE VALUES FOR THE DEVICE AND EXTENSION
                        *	FIELDS, IF THEY ARE UNSPECIFIED. IF *CAD* IS ENTERED
                        *	AT *CAD*, AN UNSPECIFIED NAME FIELD IS RETURNED AS ZERO BYTES.
                        *	IF ENTERED AT *CAD.*, AN UNSPECIFIED NAME FIELD IS
                        *	RETURNED AS 200Q (MATCH-ONE) BYTES.
                        *
                        *	ENTRY	(DE) = POINT TO DEFAULT BLOCK
                        *		(HL) = POINTER TO TEXT
                        *	EXIT	'C' SET IF ERROR
                        *		 (A) = ERROR CODE
                        *		'C' CLEAR IF OK
                        *		 (HL) = POINTS PAST FILE NAME
                        *		 'Z' SET IF NULL NAME
                        *		 'Z' CLEAR IF NON-NULL
                        *		  PIO.DIR.NAM = NAME
                        *		  PIO.DIR.EXT = EXTENSION
                        *		  PIO.DEV = DEVICE CODE
                        *		  PIO.UNI = UNIT NUMBER (ASCII DIGIT)
                        *	USES	ALL

2DA5  AF                CAD	XRA	A	;SET TO NULLS
2DA6  C3 AB2D           	JMP	CAD0

2DA9  3E 80             CAD.	MVI	A,200Q
2DAB  E5                CAD0	PUSH	H
2DAC  32 592E           	STA	CADA	;SAVE DEFAULT VALUE

                        *	SET DEFAULTS IN PIO.xxx

2DAF  21 BF37           	LXI	H,PIO.DEV
2DB2  01 0300           	LXI	B,3
2DB5  CD AA18           	CALL	$MOVE	;SET DEFALUT DEVICE
2DB8  01 0300           	LXI	B,3
2DBB  21 CA37           	LXI	H,PIO.DIR+DIR.EXT
2DBE  CD AA18           	CALL	$MOVE	;SET DEFAULT EXTENSION
2DC1  E1                	POP	H
2DC2  CD 7131           	CALL	$SOB	;SKIP BLANKS
2DC5  06 00             	MVI	B,0
2DC7  FE 3F             	CPI	'?'
2DC9  CA E02D           	JE	CAD1	;IS '?'
2DCC  FE 2A             	CPI	'*'
2DCE  CA E02D           	JE	CAD1	;IS '*'
2DD1  FE 2E             	CPI	'.'
2DD3  CA E02D           	JE	CAD1	;IS '.'
2DD6  FE 41             	CPI	'A'
2DD8  DA 4A2E           	JC	CAD4	;NOT NAME
2DDB  FE 5B             	CPI	'Z'+1
2DDD  D2 4A2E           	JNC	CAD4	;NOT NAME

                        *	HAVE ALPHA STRING. CRACK IT

2DE0  CD CF2E           CAD1	CALL	DNT	;DECODE NEXT TOKEN
2DE3  DA 552E           	JC	CAD5	;ERROR
2DE6  FE 3A             	CPI	':'
2DE8  C2 0D2E           	JNE	CAD2	;NOT DEVICE

                        *	HAVE EXPLICIT DEVICE

2DEB  23                	INX	H	;SKIP ':'
2DEC  3E 03             	MVI	A,3
2DEE  B9                	CMP	C
2DEF  DA 552E           	JC	CAD5	;TOO MANY CHARACTERS
2DF2  3E 01             	MVI	A,PIO.UNI-PIO.DEV-1
2DF4  B9                	CMP	C
2DF5  D2 552E           	JNC	CAD5	;Too Few characters

2DF8  3E 30             	MVI	A,'0'
2DFA  32 C137           	STA	PIO.UNI ;Assume Unit 0
2DFD  06 00             	MVI	B,0	;BC = Move Count
2DFF  E5                	PUSH	H	;SAVE (HL)
2E00  21 BF37           	LXI	H,PIO.DEV
2E03  CD AA18           	CALL	$MOVE	;SET EXPLICIT DEVICE
2E06  E1                	POP	H
2E07  CD CF2E           	CALL	DNT	;DECODE NEXT TOKEN
2E0A  DA 552E           	JC	CAD5	;ERROR

                        *	DECODE NAME

2E0D  01 0800           CAD2	LXI	B,8	;(BC) = COUNT
2E10  E5                	PUSH	H	;SAVE TEXT ADDR

                        *	SEE IF NAME IS  UNSPECIFIED

2E11  21 C237           	LXI	H,PIO.DIR+DIR.NAM
2E14  E5                	PUSH	H	;SAVE ADDRESS OF DIR.NAM
2E15  CD AA18           	CALL	$MOVE	;MOVE IN NAME
2E18  E1                	POP	H	;(HL) = #PIO.DIR+DIR.NAM
2E19  7E                	MOV	A,M
2E1A  A7                	ANA	A
2E1B  C2 292E           	JNZ	CAD2.6	;IS SPECIFIED
2E1E  3A 592E           	LDA	CADA	;(A) = FILL CHARACTER
2E21  0E 08             	MVI	C,8	;(C) = COUNT
2E23  77                CAD2.4	MOV	M,A
2E24  23                	INX	H
2E25  0D                	DCR	C
2E26  C2 232E           	JNZ	CAD2.4
2E29  E1                CAD2.6	POP	H
2E2A  7E                	MOV	A,M	;(A) = DELIMITER
2E2B  FE 2E             	CPI	'.'
2E2D  C2 482E           	JNE	CAD3	;NOT EXTENSION

                        *	HAVE EXPLICIT EXTENSION

2E30  23                	INX	H
2E31  CD CF2E           	CALL	DNT
2E34  DA 552E           	JC	CAD5	;ERROR
2E37  3E 03             	MVI	A,3
2E39  B9                	CMP	C
2E3A  DA 552E           	JC	CAD5	;TOO LONG
2E3D  01 0300           	LXI	B,3
2E40  E5                	PUSH	H	;SAVE TEXT POINTER
2E41  21 CA37           	LXI	H,PIO.DIR+DIR.EXT
2E44  CD AA18           	CALL	$MOVE	;MOVE EXTENSION
2E47  E1                	POP	H

                        *	DONE WITH NAME. MUST HAVE LEGIT DELIMITER

2E48  06 01             CAD3	MVI	B,1	;(B) = NAME PRESENT FLAG

                        *	END OF NAME. EXIT
                        *	(B) = 0 IF NULL, (B) <> 0 IF NON-NULL

2E4A  CD 7131           CAD4	CALL	$SOB	;SKIP BLANKS
2E4D  7E                	MOV	A,M	;(A) = NEXT CHARACTER
2E4E  CD FA30           	CALL	$CFD	;CHECK FILE NAME DELIMITER
2E51  D8                	RC			ERROR
2E52  78                	MOV	A,B
2E53  A7                	ANA	A	;SET 'Z' IF NULL
2E54  C9                	RET

                        *	ERROR

2E55  3E 07             CAD5	MVI	A,EC.IFN;ILLEGAL FILE NAME
2E57  37                	STC
2E58  C9                	RET

2E59  00                CADA	DB	0	;FILL CHARACTER FOR OMITTED NAME FIELD
2E5A                    CQF	SPACE	4,10
                        **	CQF - Check Query Flag
                        *
                        *	CQF checks the query flag, and if it is set, asks
                        *	the user if the file is to be transfered by typing
                        *	the filename followed by a question mark.  If the
                        *	response begins with a 'Y' the file is transfered,
                        *	else, it is to be ignored.
                        *
                        *	ENTRY:	PIO.XXX = File Specification
                        *
                        *	EXIT:	PSW	= 'Z'  if     to Copy
                        *			  'NZ' if NOT to Copy
                        *
                        *	USES:	ALL

2E5A  3A 7235           CQF	LDA	QUERY
2E5D  A7                	ANA	A
2E5E  C8                	RZ			NO;Query, so transfer file
2E5F  FE 4E             	CPI	'N'
2E61  CA A92E           	JE	CQFN

2E64  CD 6D2E           	CALL	CQF.
2E67  F5                	PUSH	PSW
2E68  CD 7F31           	CALL	$CRLF
2E6B  F1                	POP	PSW
2E6C  C9                	RET

2E6D  CD C532           CQF.	CALL	TFNS	;Type the file name padded with spaces
2E70  CD 5E19           	CALL	$TYPTX
2E73  203FA0            	DB	' ?',' '+200Q
2E76  FF 07             	SCALL	.CLRCO	;Clear the console

2E78  AF                	XRA	A	;A = I.CSLMD
2E79  06 01             	MVI	B,CSL.CHR
2E7B  0E 81             	MVI	C,CSL.ECH+CSL.CHR
2E7D  FF 06             	SCALL	.CONSL	;Set CHAR/ECHO

2E7F  FF 01             CQFX	SCALL	.SCIN
2E81  DA 7F2E           	JC	CQFX
2E84  CD 4131           	CALL	$MCU
2E87  FE 59             	CPI	'Y'
2E89  C8                	RE			Transfer;this file
2E8A  FE 4E             	CPI	'N'
2E8C  CA A92E           	JE	CQFN
2E8F  FE 2A             	CPI	'*'	;Special marker ?
2E91  C2 B12E           	JNE	CQF1	;Oops
2E94  FF 01             CQFX.	SCALL	.SCIN	;Yes, get Y or N
2E96  DA 942E           	JC	CQFX.
2E99  CD 4131           	CALL	$MCU
2E9C  FE 59             	CPI	'Y'
2E9E  CA AC2E           	JE	CQFY
2EA1  FE 4E             	CPI	'N'
2EA3  C2 B12E           	JNE	CQF1
2EA6  32 7235           	STA	QUERY	;Don't transfer any of the rest either
2EA9  F6 01             CQFN	ORI	1	;'NZ' => DON'T transfer this file
2EAB  C9                	RET

2EAC  AF                CQFY	XRA	A	;Set 'Z'
2EAD  32 7235           	STA	QUERY	;Transfer all of the rest also
2EB0  C9                	RET

2EB1  CD 5E19           CQF1	CALL	$TYPTX	;Illegal Character Entered
2EB4  073F2028 59296573 	DB	BELL,'? (Y)es (N)o (*Y) (*N)',ENL
2EBC  20284E29 6F20282A
2EC4  59292028 2A4E298A
2ECC  C3 6D2E           	JMP	CQF.
2ECF                    DNT	SPACE	4,10
                        **	DNT - DECODE NEXT TOKEN.
                        *
                        *	DNT COPIES THE NEXT ALPHANUMERIC FIELD INTO A ZERO-FILLED WORK AREA.
                        *
                        *	ENTRY	(HL) = TEXT POINTER
                        *	EXIT	'C' SET IF ERROR
                        *		'C' CLEAR IF OK
                        *		(A) = DELIMTER CHARACTER
                        *		(HL) UPDATED TO DELIMITER CHARACTER
                        *		(DNTA) = STRING
                        *		(C) = LENGTH
                        *		(DE) = #DNTA
                        *	USES	ALL

2ECF  11 192F           DNT	LXI	D,DNTA
2ED2  0E 09             	MVI	C,9	;(C) = SIZE OF DNTA
2ED4  41                	MOV	B,C	;(B) = MAX ALLOWED +1
2ED5  AF                	XRA	A
2ED6  12                DNT1	STAX	D	;ZERO BUFFER
2ED7  13                	INX	D
2ED8  0D                	DCR	C
2ED9  C2 D62E           	JNZ	DNT1
2EDC  11 192F           	LXI	D,DNTA

                        *	COPY CHARACTERS

2EDF  7E                DNT2	MOV	A,M
2EE0  FE 3F             	CPI	'?'
2EE2  3E 80             	MVI	A,200Q
2EE4  CA 012F           	JE	DNT3	;IS MATCHONE
2EE7  7E                	MOV	A,M
2EE8  FE 2A             	CPI	'*'
2EEA  CA 0B2F           	JE	DNT5	;IS WILDCARD
2EED  FE 30             	CPI	'0'
2EEF  DA 142F           	JC	DNT4	;NOT ALPHANUMERIC
2EF2  FE 3A             	CPI	'9'+1
2EF4  DA 012F           	JC	DNT3	;NUMERIC
2EF7  FE 41             	CPI	'A'
2EF9  DA 142F           	JC	DNT4	;DELIMITER
2EFC  FE 5B             	CPI	'Z'+1
2EFE  D2 142F           	JNC	DNT4	;DELIMITER

                        *	HAVE GOOD CHARACTER

2F01  12                DNT3	STAX	D	;STORE CHAR
2F02  13                	INX	D
2F03  23                	INX	H
2F04  0C                	INR	C	;COUNT
2F05  05                	DCR	B	;LIMIT DECREMENT
2F06  C2 DF2E           	JNZ	DNT2	;NOT OVERFLOW

                        *	OVERFLOW

2F09  37                	STC			FLAG;ERR
2F0A  C9                	RET

                        *	IS '*' WILDCARD

2F0B  3E 80             DNT5	MVI	A,200Q
2F0D  12                	STAX	D
2F0E  13                	INX	D
2F0F  05                	DCR	B
2F10  C2 0B2F           	JNZ	DNT5	;FILL WITH MATCH ONE
2F13  23                	INX	H	;SKIP '*'

                        *	END OF STRING

2F14  A7                DNT4	ANA	A	;CLEAR 'C'
2F15  11 192F           	LXI	D,DNTA	;SET POINTER
2F18  C9                	RET

2F19  31 312D4D61722D31 DNTA	DATE			WORK;AREA
2F21  35
2F22                    EBM	SPACE	4,10
                        **	EBM - EXPAND BUFFER TO MAXIMUM.
                        *
                        *	EBM IS CALLED TO EXPAND THE BUFFER 'BUF' TO THE MAXIMUM SIZE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(BUFSIZ) = BUFFER SIZE (MULTIPLE OF 256)
                        *	USES	ALL

2F22  2A D020           EBM	LHLD	S.SYSM
2F25  11 FAFF           	LXI	D,-6
2F28  19                	DAD	D	;(HL) = NEW ADDRESS SOUGHT
2F29  FF 2A             	SCALL	.SETTP
2F2B  DA 262C           	JC	IERR1	;INTERNAL ERROR 1
2F2E  2A D220           	LHLD	S.USRM
2F31  7C                	MOV	A,H	;(A) = LIMIT/256
2F32  32 6C35           	STA	OBUFLIM	;SET LIMIT
2F35  C9                	RET
2F36                    CDA	SPACE	4,10
                        **	CDA - CONVERT DIRECTORY FORMAT TO ASCII.
                        *
                        *	CDA COPIES A DIRECTORY ENTRY FROM PIO.XXX TO A TARGET FIELD.
                        *	THE DEVICE SPECIFICATION (IN PIO.DEV AND PIO.UNI) IS ALSO ENCODED.
                        *	THE TARGET FIELD IS LEFT IN THE FORM:
                        *
                        *	DEV:NAME.XXX <00>
                        *
                        *	ENTRY	(HL) = FWA NAME FIELD
                        *	EXIT	(A) = 0, HAVE WILDCARD
                        *		    = 1, NO WILDCARDS USED
                        *		'C' CLEAR
                        *	USES	ALL

2F36  01 0003           CDA	LXI	B,3*256	;(B) = CHARACTER COUNT, (C) = WILDCARD FLAG
2F39  11 BF37           	LXI	D,PIO.DEV
2F3C  CD 5A2F           	CALL	CDA5	;COPY IT
2F3F  36 3A             	MVI	M,':'
2F41  23                	INX	H
2F42  06 08             	MVI	B,8
2F44  11 C237           	LXI	D,PIO.DIR+DIR.NAM
2F47  CD 5A2F           	CALL	CDA5	;COPY IT
2F4A  36 2E             	MVI	M,'.'
2F4C  23                	INX	H
2F4D  06 03             	MVI	B,3
                        	ERRNZ	DIR.EXT-DIR.NAM-8
2F4F  CD 5A2F           	CALL	CDA5	;COPY IT
2F52  36 00             	MVI	M,0	;FLAG END OF NAME
2F54  79                	MOV	A,C	;(A) (BIT 7) = 1 IF WILDCARDS
2F55  07                	RLC
2F56  2F                	CMA
2F57  E6 01             	ANI	1	;=0 IF WILDCARD
2F59  C9                	RET
2F5A                    CDA5	SPACE	2,10
                        **	CDA5 - CONVERT DIRECTORY FIELD TO ASCII.
                        *
                        *	ZEROS ARE IGNORED, 200Q WILDCARDS ARE MAPPED TO '?'
                        *
                        *	ENTRY	(DE) = FROM
                        *		(HL) = T0
                        *		(B) = COUNT
                        *		(C) = ORA ACCUMULATOR
                        *	EXIT	(DE) ADVANCED
                        * 		(HL) = (HL)+(B)
                        *		(C) = (C) .OR. (FROM CHARACTERS PROCESSED)
                        *	USES	ALL

2F5A  1A                CDA5	LDAX	D	;(A) = CHARACTER
2F5B  B1                	ORA	C
2F5C  4F                	MOV	C,A
2F5D  1A                	LDAX	D
2F5E  13                	INX	D
2F5F  A7                	ANA	A
2F60  CA 6A2F           	JZ	CDA7	;IS 00
2F63  F2 682F           	JP	CDA6	;NOT 200Q
2F66  3E 3F             	MVI	A,'?'
2F68  77                CDA6	MOV	M,A
2F69  23                	INX	H	;INCREMENT TO
2F6A  05                CDA7	DCR	B
2F6B  C2 5A2F           	JNZ	CDA5	;IF MORE TO GO
2F6E  C9                	RET
2F6F                    EWS	SPACE	4,10
                        **	EWS - EXPAND WILDCARD SPECIFICATION.
                        *
                        *	DWS ENTERS THE FILE NAME IN PIO.XXX INTO THE MANAGED TABLE
                        *	NAMTAB. IF THE FILE NAME CONTAINS WILDCARDS, THE DIRECTORY
                        *	IS READ FOR ELIGIBLE FILES.
                        *
                        *	ENTRY	PIO.XXX = FILE NAME
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *	USES	ALL

2F6F  CD AE2C           EWS	CALL	AEN	;TRY TO ENTER IT
2F72  D0                	RNC			NO;WILDCARDS, AM DONE

                        *	IS WILDCARD. LOOK UP DEVICE TYPE

2F73  2A A235           	LHLD	NAMTLEN
2F76  11 2D38           	LXI	D,NAMTAB-FB.NAML
2F79  19                	DAD	D	;(HL) = ADDRESS OF LAST ENTRY
2F7A  CD A52D           	CALL	CAD	;CONVERT ASCII NAME TO DIRECTORY FORMAT
2F7D  D8                	RC			ERROR
2F7E  2A A235           	LHLD	NAMTLEN
2F81  11 EFFF           	LXI	D,-FB.NAML
2F84  19                	DAD	D
2F85  22 A235           	SHLD	NAMTLEN	;REMOVE WILDCARD FROM TABLE
2F88  CD EB32           	CALL	$MOVEL
2F8B  0300BF37 7435     	DW	3,PIO.DEV,DIRNAM;SET DIRECTORY NAME IN XXX:DIRECT.SYS
2F91  CD EB32           	CALL	$MOVEL
2F94  0B00C237 2F30     	DW	8+3,PIO.DIR+DIR.NAM,EWSC;SAVE WILDCARD PATTERN
2F9A  01 1130           	LXI	B,EWSB
2F9D  21 7435           	LXI	H,DIRNAM
2FA0  FF 2B             	SCALL	.DECODE ;GET INFORMATION ABOUT DEVICE
2FA2  D8                	RC			ERROR
2FA3  3A 1130           	LDA	EWSB	;SEE IF A DIRECTORY DEVICE
2FA6  E6 01             	ANI	DT.DD
2FA8  3E 05             	MVI	A,EC.DNS	;ASSUME DEVICE NOT SUITABLE
2FAA  37                	STC
2FAB  C8                	RZ			ERROR

                        *	IS DIRECTORY DEVICE. OPEN DIRECTORY

2FAC  21 7435           	LXI	H,DIRNAM
2FAF  3E 02             	MVI	A,CN.DIR
2FB1  FF 22             	SCALL	.OPENR
2FB3  3E 80             	MVI	A,PEC.DF
2FB5  D8                	RC			DEVICE;FORMAT FAILURE

                        *	READ DIRECTORY ENTRYS FOR MATCH

2FB6  CD 3A30           EWS1	CALL	GDWP	;DE = DIRECTORY WORKSPACE PTR
2FB9  01 0002           	LXI	B,512
2FBC  3E 02             	MVI	A,CN.DIR
2FBE  D5                	PUSH	D	;SAVE ADDRESS
2FBF  FF 04             	SCALL	.READ	;READ BLOCK
2FC1  E1                	POP	H	;(HL) = DIRECTORY ADDRESS
2FC2  DA 0630           	JC	EWS7	;ALL DONE

                        *	LOOK AT DIRECTORY BLOCK FOR MATCHES

2FC5  E5                	PUSH	H
2FC6  CD 4030           	CALL	GDWP.
2FC9  CD 8A31           	CALL	$INDLB
2FCC  FB01              	DW	DIS.ENL ;A  = DIRECTORY ENTRY LENGTH
2FCE  E1                	POP	H

2FCF  4F                	MOV	C,A	;(C) = LENGTH

                        *	CHECK NEXT ENTRY

2FD0  7E                EWS3	MOV	A,M	;(A) = 1ST CHAR THIS ENTRY
2FD1  A7                	ANA	A
2FD2  CA B62F           	JZ	EWS1	;END OF BLOCK
                        	ERRNZ	DF.EMP-377Q
2FD5  3C                	INR	A
2FD6  CA 0030           	JZ	EWS6	;ENTRY EMPTY
                        	ERRNZ	DF.CLR-376Q
2FD9  3C                	INR	A
2FDA  CA 0630           	JZ	EWS7	;END OF LIST
2FDD  CD 202D           	CALL	CFE	;CHECK FOR FILE ELIGIBILITY
2FE0  C2 0030           	JNZ	EWS6	;NOT TO PROCESS
2FE3  E5                	PUSH	H
2FE4  11 2F30           	LXI	D,EWSC
2FE7  06 0B             	MVI	B,8+3
2FE9  CD 4B2D           	CALL	CWM	;CHECK WILDCARD MATCH
2FEC  C2 FF2F           	JNZ	EWS4	;NO MATCH

                        *	HAVE MATCH. ADD TO LSIT

2FEF  D1                	POP	D	;(DE) = FROM
2FF0  D5                	PUSH	D
2FF1  C5                	PUSH	B	;SAVE (C)
2FF2  01 0B00           	LXI	B,8+3
2FF5  21 C237           	LXI	H,PIO.DIR+DIR.NAM
2FF8  CD AA18           	CALL	$MOVE
2FFB  CD AE2C           	CALL	AEN	;ADD TO TABLE
2FFE  C1                	POP	B	;RESTORE (C)

                        *	LOOKUP NEXT ENTRY

2FFF  E1                EWS4	POP	H
3000  06 00             EWS6	MVI	B,0
3002  09                	DAD	B	;POINT TO NEXT
3003  C3 D02F           	JMP	EWS3

                        *	ALL DONE. CLOSE DIRECTORY FILE

3006  3E 02             EWS7	MVI	A,CN.DIR
3008  FF 26             	SCALL	.CLOSE
300A  C9                	RET

300B  53593080 8080     EWSA	DB	'SY0',200Q,200Q,200Q

3011  00000000 00000000 EWSB	DC	30,#0
3019  00000000 00000000
3021  00000000 00000000
3029  00000000 0000

302F  00000000 00000000 EWSC	DC	8+3,#0	;WILDCARD PATTERN FOR DIRECTORY SEARCH
3037  000000
303A                    GDWP	SPACE	4,10
                        **	GDWP	-  GET DIRECTORY WORKSPACE POINTER
                        *
                        *	GDWP GETS THE DIRECTORY WORKSPACE POINTER
                        *
                        *	ENTRY:	NONE
                        *
                        *	EXIT:	DE	= DIRECTORY WORKSPACE POINTER
                        *
                        *	USES:	DE

303A  EB                GDWP	XCHG
303B  CD 4030           	CALL	GDWP.	;HL = DIRECTORY WORKSPACE POINTER
303E  EB                	XCHG
303F  C9                	RET

3040  2A 5121           GDWP.	LHLD	S.SCR	;HL = SYSTEM SCRATCH
3043  C9                	RET
3044                    INA	SPACE	4,10
                        **	INA - INCREASE NAMTAB ALLOCATION.
                        *
                        *	INA IS CALLED TO INCREASE THE NAMTAB ALLOCATION. THE
                        *	BUFFER AREA IS MOVED UP TO MAKE ROOM.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,H,L

3044  21 A535           INA	LXI	H,NAMTMAX+1
3047  34                	INR	M	;INCREMENT LENGTH
3048  21 8435           	LXI	H,BUFPTR+1
304B  34                	INR	M	;MOVE BUFFER
304C  2A 8535           	LHLD	BUFSIZ
304F  7C                	MOV	A,H
3050  B5                	ORA	L
3051  3E 11             	MVI	A,EC.NEM;FLAG OUT OF MEMORY IF BUFFER NOT EMPTY
3053  C2 542C           	JNZ	ERROR
3056  C5                	PUSH	B
3057  D5                	PUSH	D
3058  CD AF30           	CALL	SBE	;NOTIFY SYSTEM
305B  D1                	POP	D
305C  C1                	POP	B
305D  C9                	RET
305E                    LSN	SPACE	4,10
                        **	LSN - LOCATE SOURCE NAME
                        *
                        *	LSN SCANS THE COMMAND LINE FOR THE FIRST SOURCE FILE NAME.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(HL) = 1ST FILE NAME FWA
                        *	USES	A,F,H,L

305E  21 D937           LSN	LXI	H,LINE
3061  7E                LSN1	MOV	A,M
3062  23                	INX	H
3063  FE 3D             	CPI	'='
3065  C8                	RE			GOT;IT
3066  A7                	ANA	A
3067  C2 6130           	JNZ	LSN1	;MORE LINE
306A  21 D937           	LXI	H,LINE;IS NO =
306D  C9                	RET
306E                    MWN	SPACE	4,10
                        **	MWN - MERGE WILDCARD NAMES.
                        *
                        *	MWN MERGES A COMPLETELY SPECIFIED FILENAME WITH A WILDCARDED COMPLETELY
                        *	SPECIFIED FILE NAME.
                        *
                        *	BOTH FILE NAMES SHOULD HAVE THE SAME DEVICE SPECIFICATION.
                        *
                        *	FILE NAME FORMAT:
                        *
                        *	DEV:NAMEXXXX.EXT 00
                        *
                        *	ENTRY	(BC) = ADDRESS OF WILDCARDED ASCII NAME
                        *		(DE) = ADDRESS OF NON-WC ASCII NAME
                        *		(HL) = ADDRESS FOR RESULTANT ASCII NAME
                        *	EXIT	NONE
                        *	USES	ALL

306E  E5                MWN	PUSH	H	;SAVE TARGET ADDRESS
306F  C5                	PUSH	B	;SAVE WC PATTERN
3070  EB                	XCHG			(HL);= MASTER NAME
3071  CD A52D           	CALL	CAD	;CONVERT TO DIRECTORY FORMAT
3074  CD EB32           	CALL	$MOVEL
3077  0B00C237 AE35     	DW	8+3,PIO.DIR,MWNA;(MWNA) = DECODED MASTER
307D  E1                	POP	H	;(HL) = WC PATTERN
307E  CD A52D           	CALL	CAD	;(PIO.DIR) = WC PATTERN
3081  11 AE35           	LXI	D,MWNA	;(DE) = MASTER PATTERN
3084  21 C237           	LXI	H,PIO.DIR;(DE) = WC PATTERN ADDRESS
3087  0E 0B             	MVI	C,8+3	;MERGE NAME AND EXTENSION

                        *	MERGE NAMES

3089  7E                MWN1	MOV	A,M	;(A) = WC PATTERN
308A  A7                	ANA	A
308B  F2 8F30           	JP	MWN2	;USE THIS
308E  1A                	LDAX	D	;IS MATCH CHARACTER, USE MASTER INSTEAD
308F  77                MWN2	MOV	M,A	;STORE CHARACTER
3090  13                	INX	D
3091  23                	INX	H
3092  0D                	DCR	C
3093  C2 8930           	JNZ	MWN1	;MERGE TILL DONE
3096  E1                	POP	H	;(HL) = TARGET ADDRESS
3097  C3 362F           	JMP	CDA	;CONVERT DIRECTORY FORMAT TO ASCII
309A                    REN	SPACE	4,10
                        **	REN - REMOVE ENTRY FROM *NAMTAB*
                        *
                        *	REN REMOVES THE FIRST 'FB.NAML' BYTES FROM NAMTAB.
                        *
                        *	THE AMOUNT (FB.NAML) IS REMOVED FROM THE SIZE OF THE TABLE. THE
                        *	TABLE IS NOT CHECKED FOR UNDERFLOW, THE CALLER MUST GUARANTEE THE
                        *	PRESENSE OF AT LEAST FB.NAML BYTES IN NAMTAB.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

309A  2A A235           REN	LHLD	NAMTLEN
309D  11 EFFF           	LXI	D,-FB.NAML
30A0  19                	DAD	D	;REMOVE COUNT FROM LEN
30A1  22 A235           	SHLD	NAMTLEN
30A4  44                	MOV	B,H
30A5  4D                	MOV	C,L	;(BC) = REMAINING LENGTH
30A6  11 4F38           	LXI	D,NAMTAB+FB.NAML;(DE) = START OF 2ND ENTRY
30A9  21 3E38           	LXI	H,NAMTAB
30AC  C3 AA18           	JMP	$MOVE	;MOVE DOWN AND RETURN
30AF                    SBE	SPACE	4,10
                        **	SBE - SET BUFFER EMPTY.
                        *
                        *	THE SYSTEM IS NOTIFIED.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

30AF  21 0000           SBE	LXI	H,0
30B2  22 8535           	SHLD	BUFSIZ
30B5  2A 8335           	LHLD	BUFPTR	;(HL) = BUFFER FWA (AND LWA!)
30B8  23                	INX	H
30B9  23                	INX	H
30BA  FF 2A             	SCALL	.SETTP
30BC  D0                	RNC			OK
30BD  C3 542C           	JMP	ERROR	;NOT ENOUGH ROOM
30C0                    SDD	SPACE	4,10
                        **	SDD - SET DEFAULT DEFAULT.
                        *
                        *	SDD IS CALLED TO SETUP THE CURRENT DEFAULT DEVICE
                        *	AND EXTENSION TO 'SY0' AND <NULL>, RESPECTIVELY.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	NONE

30C0  CD 2C19           SDD	CALL	$SAVALL
30C3  CD EB32           	CALL	$MOVEL
30C6  0600CF30 A835     	DW	6,SDDA,DEFALT;SET DEFAULT DEFAULT
30CC  C3 2719           	JMP	$RSTALL	;RESTORE AND RETURN

30CF  53593000 0000     SDDA	DB	'SY0',0,0,0;DEFAULT DEFAULT VALUES
30D5                    SFS	SPACE	4,10
                        **	SFS - SKIP FILE SEPERATOR.
                        *
                        *	SFS IS CALLED TO SKIP OVER THE CHARACTERS SEPERATING ONE
                        *	FILE NAME FROM ANOTHER ON THE LINE. THE FILES MAY BE SEPERATED
                        *	BY BLANKS OR A COMMA ALONE, OR BY BLANKS WITH A COMMA. THE
                        *	SYNTAX IS
                        *
                        *	<BLANKS> <,> <BLANKS>
                        *
                        *	ONE, TWO OR ALL THREE FIELDS MAY BE PRESENT.
                        *
                        *	ENTRY	(HL) = POINT TO START OF SEP FIELD
                        *	EXIT	(HL) ADVANCED PAST SEPERATOR FIELD
                        *	USES	A,F,H,L

30D5  CD 7131           SFS	CALL	$SOB	;SKIP BLANKS
30D8  7E                	MOV	A,M
30D9  FE 2C             	CPI	','
30DB  C2 DF30           	JNE	SFS1	;NOT ,
30DE  23                	INX	H	;SKIP ,
30DF  C3 7131           SFS1	JMP	$SOB	;GET ANY MORE BLANKS AND EXIT
30E2                    SND	SPACE	4,10
                        **	SND - SET NEW DEFAULTS.
                        *
                        *	SND IS CALLED TO SET A NEW DEFAULT DEVICE AND EXTENSION
                        *	IN THE 'DEFALT' AREA.
                        *
                        *	ENTRY	PIO.DEV = DEVICE CODE
                        *		PIO.UNI = UNIT #
                        *		PIO.DIR+DIR.EXT = EXTENSION
                        *	EXIT	NONE
                        *	USES	NONE

30E2  CD 2C19           SND	CALL	$SAVALL	;SAVE REGS
                        	ERRNZ	PIO.UNI-PIO.DEV-2
30E5  CD EB32           	CALL	$MOVEL
30E8  0300              	DW	3
30EA  BF37              	DW	PIO.DEV
30EC  A835              	DW	DEFALT
30EE  CD EB32           	CALL	$MOVEL
30F1  0300              	DW	3
30F3  CA37              	DW	PIO.DIR+DIR.EXT
30F5  AB35              	DW	DEFALT+3
30F7  C3 2719           	JMP	$RSTALL	;RETURN
30FA                    	STL	'COMMON DECKS'
30FA                    	EJECT
30FA                    	XTEXT	CFD
30FA                    	SPACE	4,10
                        **	$CFD - CHECK FILE DELIMITER.
                        *
                        *	$CFD CHECKS AN ASCII CHARACTER TO SEE IF IT IS A LEGAL FILE
                        *	NAME DELIMITER. LEGAL DELIMITERS ARE
                        *
                        *	, = / <BLANK>  <00>
                        *
                        *	ENTRY	(A) = CHARACTER
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *		 (A) = ERROR CODE
                        *	USES	A,F

30FA  A7                $CFD	ANA	A
30FB  C8                	RZ				; IS 00
30FC  FE 2C             	CPI	','
30FE  C8                	RE				; IS ,
30FF  FE 3D             	CPI	'='
3101  C8                	RE				; IS =
3102  FE 2F             	CPI	'/'
3104  C8                	RE				; IS /
3105  FE 20             	CPI	' '
3107  C8                	RE				; IS ' '
3108  3E 07             	MVI	A,EC.IFN		; ILLEGAL FILE NAME
310A  37                	STC
310B  C9                	RET
310C                    	XTEXT	TYPCC
310C                    	SPACE	4,10
                        **	$TYPCC - TYPE A CHARACTER STRING BY COUNT.
                        *
                        *	$TYPCC TYPES A STRING OF CHARACTERS. THE CALLER SUPPLIES
                        *	THE CHARACTER ADDRESS AND COUNT.
                        *
                        *	ENTRY	(HL) = ADDRESS
                        *		(A) = COUNT
                        *	EXIT	(HL) = LAST CHARACTER ADDRESS+1
                        *	USES	A,F,H,L

      = 310C            $TYPCC	EQU	*

310C  A7                	ANA	A
310D  C8                	RZ				; NOTHING TO TYPE
310E  F5                	PUSH	PSW			; SAVE COUNT
310F  7E                	MOV	A,M			; (A) = CHARACTER
3110  23                	INX	H
3111  FF 02             	SCALL	.SCOUT
3113  F1                	POP	PSW
3114  3D                	DCR	A
3115  C3 0C31           	JMP	$TYPCC
3118                    	XTEXT	WER
3118                    WER	SPACE	4,10
                        **	$WER - WRITE ENABLE RAM.
                        *
                        *	$WER IS CALLED TO ENABLE WRITTING TO THE H17 CONTROLLER'S
                        *	RAM AREA.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	NONE

      = 19A1            $WER	EQU	031241A 		; IN H17 ROM
3118                    	SPACE	4,10
                        **	$WDR - WRITE DISABLE RAM.
                        *
                        *	$WDR IS CALLED TO DISABLE WRITTING TO THE H17 CONTROLLER'S
                        *	RAM AREA.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	NONE

      = 1992            $WDR	EQU	031222A 		; IN H17 ROM
3118                    	XTEXT	ZERO
3118                    ZERO	SPACE	4,10
                        **	$ZERO - ZERO MEMORY
                        *
                        *	$ZERO ZEROS A BLOCK OF MEMORY.
                        *
                        *	ENTRY	(HL) = ADDRESS
                        *		(B) = COUNT
                        *	EXIT	(A) = 0
                        *	USES	A,B,F,H,L

      = 198A            $ZERO	EQU	031212A 		; IN H17 ROM
3118                    	XTEXT	MU86
3118                    MU86	SPACE	4,10
                        **	$MU86 - MULTIPLY 8X16 UNSIGNED.
                        *
                        *	$MU86 MULTIPLIES A 16 BIT VALUE BY A 8
                        *	BIT VALUE.
                        *
                        *	ENTRY	(A) = MULTIPLIER
                        *		(DE) = MULTIPLICAND
                        *	EXIT	(HL) = RESULT
                        *		'Z' SET IF NOT OVERFLOW
                        *	USES	A,F,H,L

      = 1907            $MU86	EQU	031007A 		; IN H17 ROM
3118                    	XTEXT	CCO
3118                    CCO	SPACE	4,10
                        **	$CCO - CLEAR CONTROL-O
                        *
                        *	$CCO IS CALLED TO CLEAR THE EFFECT OF THE CTL-O CHARACTER.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	NONE


3118  CD 2C19           $CCO	CALL	$SAVALL 		; SAVE REGISTERS
311B  3E 04             	MVI	A,I.CONFL
311D  01 0100           	LXI	B,CO.FLG		; CLEAR CO.FLG
3120  FF 06             	SCALL	.CONSL
3122  C3 2719           	JMP	$RSTALL 		; RESTORE REGISTERS AND RETURN
3125                    	XTEXT	GNL
3125                    	SPACE	4,10
                        **	$GNL - GUARANTEE NEW LINE.
                        *
                        *	$GNL GUARANTEES THE START OF A NEW LINE BY ISSUING A CRLF
                        *	IF THE CURSOR IS NOT AT COLUMN 1..
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

3125  3E 02             $GNL	MVI	A,I.CUSOR
3127  01 0000           	LXI	B,0
312A  FF 06             	SCALL	.CONSL			; READ CURSOR
312C  3D                	DCR	A
312D  C8                	RZ				; AT COLUMN 1
312E  C3 7F31           	JMP	$CRLF			;  ELSE, NEW LINE
3131                    	XTEXT	MLU
3131                    	SPACE	4,10
                        **	MLU - MAP LOWER CASE LINE TO UPPER CASE.
                        *
                        *	MLU MAPS THE LOWER CASE ALPHABETICS IN A LINE TO UPPER CASE.
                        *
                        *	ENTRY	(HL)  = LINE FWA
                        *	EXIT	NONE
                        *	USES	NONE

3131  F5                $MLU	PUSH	PSW	;SAVE (PSW)
3132  E5                	PUSH	H	;SAVE FWA
3133  2B                	DCX	H	;ANTICIPATE INX H
3134  23                $MLU1	INX	H
3135  7E                	MOV	A,M	;(A)= CHARACTER
3136  CD 4131           	CALL	$MCU	;MAP CHAR TO UPPER
3139  77                	MOV	M,A
313A  A7                	ANA	A
313B  C2 3431           	JNZ	$MLU1	;MORE TO GO
313E  E1                	POP	H	;RESTORE (HL)
313F  F1                	POP	PSW	;RESTORE (PSW)
3140  C9                	RET
3141                    	XTEXT	MCU
3141                    	SPACE	4,10
                        **	MCU - MAP LOWER CASE TO UPPER CASE.
                        *
                        *	MCU MAPS A LOWER CASE ALPHABETIC TO UPPER
                        *	CASE.
                        *
                        *	ENTRY	(A) = CHARACTER
                        *	EXIT	(A) = CHARACTER RESULT
                        *	USES	A,F

3141  FE 61             $MCU	CPI	'a'
3143  D8                	RC				; NOT LOWER CASE
3144  FE 7B             	CPI	'z'+1
3146  D0                	RNC				; NOT LOWER CASE
3147  D6 20             	SUI	'a'-'A'
3149  C9                	RET
314A                    	XTEXT	RTL
314A                    	SPACE	4,10
                        **	$RTL - READ TEXT LINE.
                        *
                        *	$RTL READS A LINE FROM THE TERMINAL.
                        *
                        *	CHARACTER ARE ACCEPTED FROM THE TERMINAL, RUBOUT AND BACKSPACE
                        *	CHARACTERS ARE PROCESSED. WHEN A CARRIAGE RETURN IS ENTERED,
                        *	$RTL RETURNS.
                        *
                        *	ENTRY	(HL) = BUFFER FWA
                        *	EXIT	'C' CLEAR IF OK
                        *		 DATA IN BUFFER
                        *		 (A) = TEXT LENGTH
                        *		'C' SET IF CTL-D STRUCK
                        *	USES	A,F

314A  CD 5131           $RTL.	CALL	$RTL			; $RTL IN UPPER CASE
314D  D8                	RC				; CTL-D
314E  C3 3131           	JMP	$MLU			; MAP LINE TO UPPER CASE

      = 3151            $RTL	EQU	*

3151  E5                	PUSH	H			; SAVE FWA
3152  FF 01             $RTL1	SCALL	.SCIN
3154  DA 5231           	JC	$RTL1
3157  FE 04             	CPI	CTLD
3159  CA 6E31           	JE	$RTL2			; CTL-D STRUCK
315C  77                	MOV	M,A
315D  23                	INX	H
315E  FE 0A             	CPI	NL
3160  C2 5231           	JNE	$RTL1
3163  2B                	DCX	H
3164  36 00             	MVI	M,0
3166  23                	INX	H

                        *	ALL DONE. COMPUTE LENGTH

3167  EB                	XCHG				; (DE) = LWA+1
3168  E3                	XTHL				; (HL) = FWA
3169  7B                	MOV	A,E
316A  95                	SUB	L			; (A) = LENGTH
316B  A7                	ANA	A			; CLEAR CARRY
316C  D1                	POP	D			; RESTORE (DE)
316D  C9                	RET

                        *	CTL-D STRUCK

316E  E1                $RTL2	POP	H			; (HL) = FWA
316F  37                	STC
3170  C9                	RET
3171                    	XTEXT	MOVE
3171                    MOVE	SPACE	4,10
                        **	$MOVE - MOVE DATA
                        *
                        *	$MOVE MOVES A BLOCK OF BYTES TO A NEW MEMORY ADDRESS.
                        *	IF THE MOVE IS TO A LOWER ADDRESS, THE BYTES ARE MOVED FROM
                        *	FIRST TO LAST.
                        *
                        *	IF THE MOVE IS TO A HIGHER ADDRESS, THE BYTES ARE MOVED FROM
                        *	LAST TO FIRST.
                        *
                        *	THIS IS DONE SO THAT AN OVERLAPED MOVE WILL NOT 'RIPPLE'.
                        *
                        *	ENTRY	(BC) = COUNT
                        *		(DE) = FROM
                        *		(HL) = TO
                        *	EXIT	MOVED
                        *		(DE) = ADDRESS OF NEXT FROM BYTE
                        *		(HL) = ADDRESS OF NEXT *TO* BYTE
                        *		'C' CLEAR
                        *	USES	ALL

      = 18AA            $MOVE	EQU	030252A 		; IN H17 ROM
3171                    	XTEXT	CHL
3171                    CHL	SPACE	4,10
                        **	$CHL - COMPLEMENT (HL).
                        *
                        *	(HL) = -(HL)		TWO'S COMPLEMENT
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,H,L

      = 1894            $CHL	EQU	030224A 		; IN H17 ROM
3171                    	XTEXT	SOB
3171                    	SPACE	4,10
                        **	$SOB - SKIP OVER BLANKS.
                        *
                        *	$SOB IS CALLED TO SKIP AN ARBITRARILY LONG STRING OF BLANKS AND TABS.
                        *
                        *	ENTRY	(HL) = FWA OF (POSSIBLE) BLANK STRING
                        *	EXIT	(HL) = LWA+1 OF BLANK STRING (UNCHANGED IF NO BLANKS)
                        *		(A) = FIRST NON-BLANK, NON-TAB CHARACTER EEN
                        *	USES	A,F,H,L

3171  2B                $SOB	DCX	H			; PRE-DECREMENT
3172  23                $SOB1	INX	H
3173  7E                	MOV	A,M
3174  FE 20             	CPI	' '
3176  CA 7231           	JE	$SOB1			; GOT BLANK
3179  FE 09             	CPI	TAB
317B  CA 7231           	JE	$SOB1			; GOT TAB
317E  C9                	RET
317F                    	XTEXT	DADA
317F                    DADA	SPACE	4,10
                        **	$DADA - PERFORM (H,L) = (H,L) + (0,A)
                        *
                        *	ENTRY	(H,L) = BEFORE VALUE
                        *		(A) = BEFORE VALUE
                        *	EXIT	(H,L) = (H,L) + (0,A)
                        *		'C' SET IF OVERFLOW
                        *	USES	F,H,L

      = 183A            $DADA	EQU	030072A 		; IN H17 ROM
317F                    	XTEXT	TJMP
317F                    TJMP   SPACE	 4,10
                        **     $TJMP - TABLE JUMP.
                        *
                        *      USAGE
                        *
                        *      CALL	 $TJMP		  (A) = INDEX
                        *      DW	 ADDR1
                        *      .	   .
                        *      .	   .
                        *      .	   .
                        *      DW	 ADDRN
                        *
                        *      ENTRY	(A) = INDEX
                        *      EXIT	TO PROCESSOR
                        *		 (A) = INDEX*2
                        *      USES	NONE

      = 1931            $TJMP	EQU	031061A 		; IN H17 ROM, (A) = INDEX*2

      = 1932            $TJMP.	EQU	031062A 		; IN H17 ROM
317F                    	XTEXT	CRLF
317F                    CRLF	SPACE	4,10
                        **	$CRLF - TYPE CARRIAGE RETURN/ LINE FEED
                        *
                        *	$CRLF IS USED TO GENERATE PADDED CRLF'S.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(A) = 0
                        *	USES	A,F

317F  3E 0A             $CRLF	MVI	A,NL
3181  FF 02             	SCALL	.SCOUT
3183  AF                	XRA	A
3184  C9                	RET
3185                    	XTEXT	TYPT2
3185                    TYPT2	SPACE	4,10
                        **	$TYPTX - TYPE TEXT.
                        *
                        *	$TYPTX IS CALLED TO TYPE A BLOCK OF TEXT ON THE SYSTEM CONSOLE.
                        *
                        *	IMBEDDED ZER0 BYTES INDICATE A CARRIAGE RETURN LINE FEED,
                        *	A BYTE WITH THE 200Q BIT SET IS THE LAST BYTE IN THE MESSAGE.
                        *
                        *	ENTRY	(RET) = TEXT
                        *	EXIT	TO (RET+LENGTH)
                        *	USES	A,F

      = 195E            $TYPTX	EQU	031136A 		; IN H17 ROM

      = 1964            $TYPTX. EQU	031144A 		; IN H17 ROM
3185                    	XTEXT	COMP
3185                    COMP	SPACE	4,10
                        **	$COMP - COMPARE TWO CHARACTER STRINGS.
                        *
                        *	$COMP COMPARES TWO BYTE STRINGS.
                        *
                        *	ENTRY	(C) = COMPARE COUNT
                        *		(DE) = FWA OF STRING #1
                        *		(HL) = FWA OF STRING #2
                        *	EXIT	'Z' CLEAR, IS MIS-MATCH
                        *		 (C) = LENGTH REMAINING
                        *		 (DE) = ADDRESS OF MISMATCH IN STRING#1
                        *		 (HL) = ADDRESS OF MISMATCH IN STRING #2
                        *		'C' SET, HAVE MATCH
                        *		 (C) = 0
                        *		 (DE) = (DE) + (0C)
                        *		 (HL) = (HL) + (0C)
                        *	USES	A,F,C,D,E,H,L

      = 1830            $COMP	EQU	030060A 		; IN H17 ROM
3185                    	XTEXT	SAVALL
3185                    SAVALL	SPACE	3,10
                        **	$RSTALL - RESTORE ALL REGISTERS.
                        *
                        *	$RSTALL RESTORES ALL THE REGISTERS OFF THE STACK, AND
                        *	RETURNS TO THE PREVIOUS CALLER.
                        *
                        *	ENTRY	(SP) = PSW
                        *		(SP+2) = BC
                        *		(SP+4) = DE
                        *		(SP+6) = HL
                        *		(SP+8) = RET
                        *	EXIT	TO *RET*, REGISTERS RESTORED
                        *	USES	ALL

      = 1927            $RSTALL EQU	031047A 		; IN H17 ROM
3185                    	SPACE	3,10
                        **	$SAVALL - SAVE ALL REGISTERS ON STACK.
                        *
                        *	$SAVALL SAVES ALL THE REGISTERS ON THE STACK.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(SP) = PSW
                        *		(SP+2) = BC
                        *		(SP+4) = DE
                        *		(SP+6) = HL
                        *	USES	H,L

      = 192C            $SAVALL EQU	031054A 		; IN H17 ROM
3185                    	XTEXT	CDEHL
3185                    CDEHL	SPACE	4,10
                        **	$CDEHL - COMPARE (DE) TO (HL)
                        *
                        *	$CDEHL COMPARES (DE) TO (HL) FOR EQUALITY.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'Z' SET IF (DE) = (HL)
                        *	USES	A,F

      = 188E            $CDEHL	EQU	030216A 		; IN H17 ROM
3185                    	XTEXT	UDD
3185                    UDD	SPACE	4,10
                        **	$UDD - UNPACK DECIMAL DIGITS.
                        *
                        *	UDD CONVERTS A 16 BIT VALUE INTO A SPECIFIED NUMBER OF
                        *	DECIMAL DIGITS. THE RESULT IS ZERO FILLED.
                        *
                        *	ENTRY	(B,C) = ADDRESS VALUE
                        *		(A) = DIGIT COUNT
                        *		(H,L) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + (A)
                        *	USES	ALL

      = 196F            $UDD	EQU	031157A 		; IN H17 ROM
3185                    	XTEXT	DU66
3185                    DU66	SPACE	4,10
                        **	$DU66 - UNSIGNED 16 / 16 DIVIDE.
                        *
                        *	(HL) = (BC)/(DE)
                        *
                        *	ENTRY	(BC), (DE) PRESET
                        *	EXIT	(HL) = RESULT
                        *		(DE) = REMAINDER
                        *	USES	ALL

      = 1846            $DU66	EQU	030106A 		; IN H17 ROM
3185                    	XTEXT	DADA2
3185                    DADA2	SPACE	4,10
                        **	$DADA. - ADD (0,A) TO (H,L)
                        *
                        *	ENTRY	NONE
                        *	EXIT	(HL) = (HL) + (0A)
                        *	USES	A,F,H,L

      = 1841            $DADA.	EQU	030101A 		; IN H17 ROM
3185                    	XTEXT	HLIHL
3185                    HLIHL	SPACE	4,10
                        **	$HLIHL - LOAD HL INDIRECT THROUGH HL.
                        *
                        *	(HL) = ((HL))
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,H,L

      = 1889            $HLIHL	EQU	030211A 		; IN H17 ROM
3185                    	XTEXT	ILDEHL
3185                    	SPACE	4,10
                        ***	ILDEHL - INDEXED LOAD OF (DE) FROM (HL).
                        *
                        *	LOAD (DE) WITH THE FULL WORD VALUE POINTED TO BY (HL).
                        *
                        *	ENTRY:	(HL) = ADDRESS OF VALUE
                        *	EXIT:	(DE) = ((HL))
                        *		(HL) = (HL) + 2
                        *	USES:	D,E

3185  5E                ILDEHL	MOV	E,M
3186  23                	INX	H
3187  56                	MOV	D,M
3188  23                	INX	H
3189  C9                	RET
318A                    	XTEXT	INDL
318A                    INDL	SPACE	4,10
                        **	$INDL - INDEXED LOAD.
                        *
                        *	$INDL LOADS DE WITH THE TWO BYTES AT (HL)+DISPLACMENT
                        *
                        *	THIS ACTS AS AN INDEXED FULL WORD LOAD.
                        *
                        *	(DE) = ( (HL) + DSPLACEMENT )
                        *
                        *	ENTRY	((RET)) = DISPLACMENT (FULL WORD)
                        *		(HL) = TABLE ADDRESS
                        *	EXIT	TO (RET+2)
                        *	USES	A,F,D,E

      = 189C            $INDL	EQU	030234A 		; IN H17 ROM
318A                    	XTEXT	INDXX
318A                    	SPACE	4,10
                        **	$INDLB	-  INDEXED LOAD BYTE
                        *
                        *	BYTE INDEXED LOAD PRIMITIVE
                        *
                        *	ENTRY:	HL = BASE ADDRESS
                        *		(RET) = FULL WORD RELOCATION
                        *	EXIT:	A = ( HL + (RET) )
                        *	USES:	A

318A  EB                $INDLB	XCHG				; DE = BASE
318B  E3                	XTHL				; SAVE	.DE.
318C  D5                	PUSH	D			; SAVE	BASE
318D  C5                	PUSH	B			; SAVE	.BC.

318E  4E                	MOV	C,M
318F  23                	INX	H
3190  46                	MOV	B,M			; BC = OFFSET
3191  23                	INX	H			; HL =	.RET.

3192  EB                	XCHG				; HL = BASE
3193  09                	DAD	B			; HL = BASE + OFFSET
3194  7E                	MOV	A,M			; A  = ( BASE + OFFSET )
3195  EB                	XCHG				; HL =	.RET.

3196  C1                	POP	B			; RESTORE  .BC.
3197  D1                	POP	D			; RESTORE  BASE
3198  E3                	XTHL				; HL = .DE. ; (SP) = .RET.
3199  EB                	XCHG				; DE = .DE. ; HL = BASE
319A  C9                	RET
319B                    	SPACE	4,10
                        **	$INDS	-  INDEXED STORE
                        *
                        *	INDEXED STORE PRIMITIVE.
                        *
                        *	ENTRY:	HL = BASE ADDRESS
                        *		DE = VALUE TO STORE
                        *	EXIT:	( HL + (RET) ) = DE
                        *	USES:	NONE

319B  CD 0733           $INDS	CALL	XCHGBC
319E  E3                	XTHL				; SAVE	.BC.
319F  D5                	PUSH	D
31A0  CD 8531           	CALL	ILDEHL			; DE = OFFSET
31A3  CD 0733           	CALL	XCHGBC			; BC = .RET.
31A6  EB                	XCHG				; DE = BASE ; HL = OFFSET
31A7  19                	DAD	D			; HL = BASE + OFFSET
31A8  EB                	XCHG
31A9  E3                	XTHL				; SAVE	BASE
31AA  EB                	XCHG				; DE = VALUE
31AB  CD C731           	CALL	ISDEHL
31AE  E1                	POP	H			; HL = BASE
31AF  CD 0733           	CALL	XCHGBC
31B2  E3                	XTHL				; RESTORE  .BC.
31B3  C3 0733           	JMP	XCHGBC
31B6                    	SPACE	4,10
                        **	$INDSB	-  INDEXED BYTE STORE
                        *
                        *	INDEXED BYTE STORE.
                        *
                        *	ENTRY:	A = VALUE TO STORE
                        *		HL = BASE ADDRESS
                        *		(RET) = OFFSET
                        *	EXIT:	NONE
                        *	USES:	PSW

31B6  EB                $INDSB	XCHG				; DE = BASE
31B7  E3                	XTHL				; SAVE	.DE.
31B8  D5                	PUSH	D			; SAVE	BASE
31B9  C5                	PUSH	B			; SAVE	.BC.

31BA  4E                	MOV	C,M
31BB  23                	INX	H
31BC  46                	MOV	B,M			; BC = OFFSET
31BD  23                	INX	H			; HL =	.RET.

31BE  EB                	XCHG				; HL = BASE
31BF  09                	DAD	B			; HL = BASE + OFFSET
31C0  77                	MOV	M,A			; ( BASE + OFFSET ) = A
31C1  EB                	XCHG

31C2  C1                	POP	B			; RESTORE  .BC.
31C3  D1                	POP	D			; RESTORE  BASE
31C4  E3                	XTHL				; HL = .DE. ; (SP) = .RET.
31C5  EB                	XCHG				; DE = .DE. ; HL = BASE
31C6  C9                	RET
31C7                    	XTEXT	ISDEHL
31C7                    	SPACE	4,10
                        **	ISDEHL	-  INDEXED STORE OF DE AT HL
                        *
                        *	STORE 'DE' AT THE ADDRESS POINTED TO BY 'HL', AND INCREMENT 'HL'
                        *	BY 2.
                        *
                        *	ENTRY:	DE = VALUE
                        *		HL = ADDRESS OF VALUE
                        *	EXIT:	(HL) = DE
                        *		HL = HL + 2
                        *	USES:	HL

31C7  73                ISDEHL	MOV	M,E
31C8  23                	INX	H
31C9  72                	MOV	M,D
31CA  23                	INX	H
31CB  C9                	RET
31CC                    	XTEXT	DAD
31CC                    	SPACE	4,10
                        **	$DAD - DECODE AUGUSTAN DATE.
                        *
                        *	$DAD DECODES A 15 BIT DATE CODE OF THE FORMAT:
                        *
                        *	----------------------------------------
                        *	I  0  I  6 BITS  I  4 BITS  I  5 BITS  I
                        *	----------------------------------------
                        *		YEAR-70       MON       DAY
                        *		 1-63        1-12       1-31
                        *
                        *	TO THE FORM:
                        *
                        *	DD-MMM-YY
                        *
                        *	ENTRY	(DE) = 15 BIT VALUE
                        *		(HL) = ADDRESS FOR DECODE
                        *	EXIT	(HL) = (HL)+9
                        *	USES	ALL

31CC  7A                $DAD	MOV	A,D
31CD  B3                	ORA	E
31CE  CA 2D32           	JZ	DAD2	;No-Date

31D1  22 2532           	SHLD	DAD1.	;Save HL in case of bad data

31D4  42                	MOV	B,D
31D5  4B                	MOV	C,E
31D6  11 2000           	LXI	D,32
31D9  E5                	PUSH	H	;SAVE ADDRESS
31DA  CD 4618           	CALL	$DU66	;(DE) = DAY, (HL) = YEAR & MONTH
31DD  E3                	XTHL			(HL);= ADDRESS
31DE  42                	MOV	B,D
31DF  4B                	MOV	C,E
31E0  7B                	MOV	A,E
31E1  A7                	ANA	A
31E2  CA 2332           	JZ	DAD1X	;BAD VALUE
31E5  3E 02             	MVI	A,2
31E7  CD 6F19           	CALL	$UDD	;UNPACK DAY
31EA  36 2D             	MVI	M,'-'
31EC  23                	INX	H
31ED  C1                	POP	B	;(BC) = YEAR & MONTH
31EE  11 1000           	LXI	D,16
31F1  E5                	PUSH	H	;SAVE ADDRESS
31F2  CD 4618           	CALL	$DU66
31F5  E3                	XTHL			(HL);= ADDRESS, ((SP)) = YEAR
31F6  7B                	MOV	A,E
31F7  87                	ADD	A
31F8  83                	ADD	E	;(A) = 3*MONTH
31F9  CA 2332           	JZ	DAD1X	;BAD VALUE
31FC  FE 27             	CPI	13*3
31FE  D2 2332           	JNC	DAD1X	;TOO LARGE
3201  EB                	XCHG			(DE);= ADDRESS
3202  21 3332           	LXI	H,DADB-3
3205  CD 4118           	CALL	$DADA.	;(HL) = ADDRESS OF MONTH
3208  01 0300           	LXI	B,3
320B  EB                	XCHG			(HL);= BUFFER ADDR, (DE) = ADDR IN 'DADB'
320C  CD AA18           	CALL	$MOVE	;MOVE MONTH IN
320F  36 2D             	MVI	M,'-'
3211  23                	INX	H
3212  C1                	POP	B	;(BC) = YEAR
3213  79                	MOV	A,C
3214  C6 46             	ADI	70
3216  FE 64             	CPI	100
3218  D2 2432           	JNC	DAD1	;TOO LARGE
321B  4F                	MOV	C,A	;(BC) = YEAR
321C  3E 02             	MVI	A,2
321E  CD 6F19           	CALL	$UDD	;UNPACK YEAR
3221  A7                	ANA	A
3222  C9                	RET

                        *	ILLEGAL FORMAT

3223  E1                DAD1X	POP	H	;RESTORE STACK
3224  21 0000           DAD1	LXI	H,*-*
      = 3225            DAD1.	EQU	*-2
3227  11 6332           	LXI	D,DADCX
322A  C3 3032           	JMP	DAD3

                        *	No-Date

322D  11 5A32           DAD2	LXI	D,DADC
3230  01 0900           DAD3	LXI	B,DADCL
3233  C3 AA18           	JMP	$MOVE

3236  4A616E46 65624D61 DADB	DB	'Jan','Feb','Mar','Apr','May','Jun'
323E  72417072 4D61794A
3246  756E
3248  4A756C41 75675365 	DB	'Jul','Aug','Sep','Oct','Nov','Dec'
3250  704F6374 4E6F7644
3258  6563

325A  3C4E6F2D 44617465 DADC	DB	'<No-Date>'
3262  3E
      = 0009            DADCL	EQU	*-DADC

3263  3F3F2D3F 3F3F2D3F DADCX	DB	'??-???-??'
326B  3F
                        	ERRNZ	*-DADCX-DADCL
326C                    	XTEXT	UDDX
326C                    	SPACE	4,10
                        **	$UDDX - UNPACK DECIMAL DIGITS.					/3.0/
                        *
                        *	UDDX CONVERTS A 16 BIT VALUE INTO A SPECIFIED NUMBER OF DECIMAL
                        *	DIGITS.
                        *
                        *	$UDDN = PAD WITH NULLS
                        *
                        *	$UDDS = PAD WITH SPACES
                        *
                        *	ENTRY	(B,C) = ADDRESS VALUE
                        *		(A) = DIGIT COUNT
                        *		(H,L) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + (A)
                        *	USES	ALL

      = 326C            $UDDN	EQU	*

326C  57                	MOV	D,A	;SAVE (A)
326D  AF                	XRA	A	;(A) = NUL
326E  C3 7432           	JMP	$UDDX

      = 3271            $UDDS	EQU	*

3271  57                	MOV	D,A	;SAVE (A)
3272  3E 20             	MVI	A,' '	;(A) = SPACE

3274  32 9F32           $UDDX	STA	UDDPAD	;SET PAD CHARACTER
3277  7A                	MOV	A,D	;RESTORE (A)
3278  CD 3A18           	CALL	$DADA
327B  E5                	PUSH	H	;SAVE FINAL (H,L) VALUE

327C  F5                UDDX1	PUSH	PSW
327D  E5                	PUSH	H
327E  11 0A00           	LXI	D,10
3281  CD 4618           	CALL	$DU66	;(H,L) = VALUE/10
3284  44                	MOV	B,H
3285  4D                	MOV	C,L	;(BC) = QUOTIENT
3286  E1                	POP	H
3287  3E 30             	MVI	A,'0'
3289  83                	ADD	E	;ADD REMAINDER
328A  2B                	DCX	H
328B  77                	MOV	M,A	;STORE DIGIT
328C  78                	MOV	A,B
328D  B1                	ORA	C
328E  CA 9832           	JZ	UDDX2	;ALL ZEROS
3291  F1                	POP	PSW
3292  3D                	DCR	A
3293  C2 7C32           	JNZ	UDDX1	;IF MORE TO GO

                        *	ALL DONE. EXIT

3296  E1                UDDX1.5	POP	H	;RESTORE H
3297  C9                	RET			RETURN

                        *	DIGITS LEADING THIS ONE ARE ZERO. STORE NULLS INSTEAD.

3298  F1                UDDX2	POP	PSW
3299  3D                UDDX3	DCR	A
329A  CA 9632           	JE	UDDX1.5 ;ALL DONE
329D  2B                	DCX	H
329E  36 00             	MVI	M,0
      = 329F            UDDPAD	EQU	*-1
32A0  C3 9932           	JMP	UDDX3
32A3                    	XTEXT	UOW
32A3                    	SPACE	4,8
                        **	$UOW - UNPACK OCTAL WORD
                        *
                        *	ENTRY	(BC) = VALUE
                        *		(HL) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + 6
                        *	USES	A,F,H,L
                        *
32A3                    	SPACE	3,8
                        **	$UOW. - UNPACK OCTAL WORD (ADD '.' BETWEEN BYTES)
                        *
                        *	ENTRY	(BC) = VALUE
                        *		(HL) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + 7
                        *	USES	A,F,H,L
                        *
32A3                    	SPACE	3,10
                        **	$UOB - UNPACK OCTAL BYTE
                        *
                        *	ENTRY	(A) = VALUE
                        *		(HL) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + 3
                        *	USES	A,F,H,L

32A3  78                $UOW	MOV	A,B
32A4  CD B232           	CALL	$UOB
32A7  C3 B132           	JMP	UOW1

32AA  78                $UOW.	MOV	A,B			; GET MSB
32AB  CD B232           	CALL	$UOB
32AE  36 2E             	MVI	M,'.'			; FOR SHOW
32B0  23                	INX	H

32B1  79                UOW1	MOV	A,C			; GET LSB

32B2  A7                $UOB	ANA	A			; CLEAR CARRY
32B3  CD B932           	CALL	UOD
32B6  CD B932           	CALL	UOD

                        *	UNPACK OCTAL DIGIT

32B9  17                UOD	RAL				; ROTATE DIGIT INTO PLACE
32BA  17                	RAL
32BB  17                	RAL
32BC  F5                	PUSH	PSW
32BD  E6 07             	ANI	00000111B		; MASK OFF EXCESS
32BF  C6 30             	ADI	'0'			; MAKE IT ASCII
32C1  77                	MOV	M,A			; POKE DIGIT
32C2  23                	INX	H			; BUMP POINTER
32C3  F1                	POP	PSW
32C4  C9                	RET
32C5                    	XTEXT	TFNS
32C5                    	SPACE	4,10
                        **	TFNS - TYPE FILE NAME PADDED WITH SPACES			/3.0a/
                        *
                        *	TFNS TYPES THE FILE WHOSE NAME IS LOCATED AT PIO.DEV
                        *	NULLS ARE PRINTED AS SPACES SO FILE NAMES LINE UP PRETTY
                        *
                        *	OPTIONAL ENTRY AT 'TFNS.' WITH HL POINTING TO STANDARD
                        *	FORMAT FILE NAME
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,B,H,L

32C5  21 BF37           TFNS	LXI	H,PIO.DEV

32C8  06 03             TFNS.	MVI	B,3	;TYPE DEVICE
32CA  CD DC32           	CALL	TFNS1
32CD  CD 5E19           	CALL	$TYPTX	;TYPE ':'
32D0  BA                	DB	':'+EOL

32D1  06 08             	MVI	B,8	;TYPE FILE NAME
32D3  CD DC32           	CALL	TFNS1
32D6  CD 5E19           	CALL	$TYPTX	;TYPE '.'
32D9  AE                	DB	'.'+EOL

32DA  06 03             	MVI	B,3	;TYPE EXTENSION
32DC  7E                TFNS1	MOV	A,M
32DD  A7                	ANA	A
32DE  C2 E332           	JNZ	TFNS2
32E1  3E 20             	MVI	A,' '
32E3  FF 02             TFNS2	SCALL	.SCOUT
32E5  23                	INX	H
32E6  05                	DCR	B
32E7  C2 DC32           	JNZ	TFNS1
32EA  C9                	RET
32EB                    	XTEXT	MOVEL
32EB                    	SPACE	4,10
                        **	$MOVEL - MOVE DATA
                        *
                        *	$MOVEL MOVES A BLOCK OF BYTES TO A NEW MEMORY ADDRESS.
                        *	IF THE MOVE IS TO A LOWER ADDRESS, THE BYTES ARE MOVED FROM
                        *	FIRST TO LAST.
                        *
                        *	IF THE MOVE IS TO A HIGHER ADDRESS, THE BYTES ARE MOVED FROM
                        *	LAST TO FIRST.
                        *
                        *	THIS IS DONE SO THAT AN OVERLAPED MOVE WILL NOT 'RIPPLE'.
                        *
                        *	CALL	$MOVEL
                        *	DW	COUNT
                        *	DW	FROM
                        *	DW	TO
                        *
                        *	ENTRY	((SP)) = RET
                        *		(RET+0) = COUNT (WORD VALUE)
                        *		(RET+2) = FROM
                        *		(RET+4) = TO
                        *	EXIT	TO (RET+6)
                        *		(DE) = ADDRESS OF NEXT FROM BYTE
                        *		(HL) = ADDRESS OF NEXT *TO* BYTE
                        *		'C' CLEAR
                        *	USES	ALL

32EB  E1                $MOVEL	POP	H			; (HL) = RET
32EC  4E                	MOV	C,M
32ED  23                	INX	H
32EE  46                	MOV	B,M			; (BC) = COUNT
32EF  23                	INX	H
32F0  5E                	MOV	E,M
32F1  23                	INX	H
32F2  56                	MOV	D,M			; (DE) = FROM
32F3  23                	INX	H
32F4  D5                	PUSH	D			; ((SP)) = FROM
32F5  5E                	MOV	E,M
32F6  23                	INX	H
32F7  56                	MOV	D,M			; (DE) = TO
32F8  23                	INX	H
32F9  E3                	XTHL				; ((SP)) = RET, (HL) = FROM
32FA  EB                	XCHG				; (DE) = FROM , (HL) = TO
32FB  C3 AA18           	JMP	$MOVE			; MOVE IT
32FE                    	XTEXT	RCHAR
32FE                    RCHAR	SPACE	4,10
                        **	$RCHAR - READ SINGLE CHARACTER FROM CONSOLE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(A) = CHARACTER
                        *	USES	A,F

32FE  FF 01             $RCHAR	SCALL	.SCIN
3300  DA FE32           	JC	$RCHAR	;NOT READY
3303  C9                	RET

3304  FF 02             $WCHAR	SCALL	.SCOUT
3306  C9                	RET
3307                    	XTEXT	XCHGBC
3307                    	SPACE	4,10
                        ***	XCHGBC - Exchange (HL) with (BC).
                        *
                        *	Entry:	NONE
                        *	Exit:	(HL) = (BC)
                        *		(BC) = (HL)
                        *	Uses:	B,C,H,L
                        *
                        *	Note:	Whoever wrote the original version of this routine
                        *		(that distributed by Heath), really ought to be shot.

3307  C5                XCHGBC	PUSH	B			; Put (BC) on stack
3308  E3                	XTHL				; Swap it with (HL)
3309  C1                	POP	B			; Pop new (BC)
330A  C9                	RET
330B                    	XTEXT	DRS
330B                    	SPACE	4,10
                        **	$DRS - DECODE AND REMOVE SWITCHES.
                        *
                        *	$DRS IS CALLED TO DECODE COMMAND SWITCHES FROM A LINE
                        *	OF TEXT. SWITCHES TAKE THE FORM:
                        *
                        *	/XXXXX
                        *
                        *	AFTER A SWITCH HAS BEEN LOCATED, IT (AND THE PRECEDING '/')
                        *	ARE REPLACED WITH BLANKS.
                        *
                        *	VALID SWITCH DESCRIPTIONS ARE ENCODED INTO A TABLE
                        *	SUPPLIED BY THE CALLER, IN THE FORMAT:
                        *
                        *	DB	'X...X'		REQUIRED SWITCH CHARACTERS
                        *	DB	'C'+200Q,...,'C'+200Q	OPTIONAL CHARACTERS
                        *	DB	200Q		END OF CHARACTERS
                        *	DW	ADDR		PROCESSOR ADDRESS (CALLED WHEN SWITCH DETECTED)
                        *
                        *	DB	'Y...Y'		NEXT SWITCH
                        *	.	 .
                        *	.	 .
                        *	.	 .
                        *
                        *	DB	0		FLAGS END OF TABLE
                        *
                        *	SWITCHES MUST BE FOLLOWED BY A ':', A '/' (ANOTHER SWITCH)
                        *	A ',', OR A 00 BYTE.
                        *
                        *	UPON DETECTION OF A VALID SWITCH, $DRS CALLS THE USER PROCESS
                        *	ROUTINE. UPON ENTRY,
                        *	(HL) = ADDRESS OF THE FIRST BYTE FOLLOWING THE SWTICH
                        *	'Z' CLEAR IF CHARACTER = '/', ',', OR 00
                        *	'Z' SET IF CHARACTER = ':'
                        *
                        *	THE USER ROUTINE CAN DECODE SWITCH SUB-OPTIONS, IF DESIRED.
                        *	THE USER ROUTINE MAY USE ALL REGISTERS.
                        *
                        *	ENTRY	(DE) = SWITCH TABLE FWA
                        *		(HL) = LINE FWA
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *		 (HL) = ADDRESS OF START OF BAD SWITCH
                        *		 (A) = ERROR CODE
                        *	USES	ALL

      = 330B            $DRS	EQU	*

                        *	LOOK FOR SWITCHES

330B  7E                $DRS1	MOV	A,M
330C  A7                	ANA	A
330D  C8                	RZ			END;OF LINE
330E  23                	INX	H
330F  FE 2F             	CPI	'/'
3311  C2 0B33           	JNE	$DRS1	;NOT A SWITCH
3314  22 9033           	SHLD	$DRSB	;($DRSB) = SWITCH FWA (AFTER '/')

                        *	GOT A SWITCH. LOOK FOR A MATCH IN THE CALLER'S TABLE

3317  D5                	PUSH	D	;SAVE TABLE FWA
3318  2A 9033           $DRS2	LHLD	$DRSB	;(HL) = SWITCH FWA
331B  1A                $DRS3	LDAX	D	;(A) = TABLE ENTRY
331C  E6 7F             	ANI	177Q
331E  CA 4633           	JZ	$DRS6	;GOT A MATCH
3321  BE                	CMP	M
3322  C2 2A33           	JNE	$DRS4	;NO MATCH
3325  13                	INX	D
3326  23                	INX	H
3327  C3 1B33           	JMP	$DRS3	;SEE IF MORE MATCH

                        *	HAVE MIS-MATCH. SEE IF THE MISSING CHARACTER IS SIGNIFICANT

332A  7E                $DRS4	MOV	A,M	;(A) = LINE CHARACTER WE COULDNT MATCH
332B  CD 6E33           	CALL	$DRS15	;SEE IF OK TERMINATOR
332E  C2 3633           	JNE	$DRS4.5	;NO MATCH ON THIS SWITCH
3331  1A                	LDAX	D	;(A) = NEXT CHARACTER IN SWITCH PATTERN
3332  A7                	ANA	A
3333  FA 4633           	JM	$DRS6	;HAVE SUFFICIENT MATCH
3336  CD 8233           $DRS4.5	CALL	$DRS20	;SKIP TABLE ENTRY
3339  1A                	LDAX	D
333A  A7                	ANA	A
333B  C2 1833           	JNZ	$DRS2	;MORE SWITCHES IN TABLE TO CHECK

                        *	BAD SWITCH

333E  D1                $DRS5	POP	D	;RESTORE STACK
333F  2A 9033           	LHLD	$DRSB	;POINT TO BAD SWITCH
3342  37                	STC
3343  3E 1A             	MVI	A,EC.IS	;ILLEGAL SWITCH
3345  C9                	RET

                        *	HAVE SWITCH. CHECK IT'S FOLLOWING CHARACTER

3346  CD 7131           $DRS6	CALL	$SOB	;SKIP OVER BLANKS
3349  CD 6E33           	CALL	$DRS15	;CHECK CHARACTER
334C  C2 3E33           	JNE	$DRS5	;IN ERROR
334F  CD 8233           	CALL	$DRS20	;GET PROCESSOR ADDRESS
3352  11 5C33           	LXI	D,$DRS7
3355  E5                	PUSH	H	;SAVE (HL)
3356  D5                	PUSH	D	;SET RETURN ADDRESS FOR TABLE CODE
3357  C5                	PUSH	B	;SAVE PROCESSOR ADDRESS
3358  7E                	MOV	A,M	;(A) = NEXT CHARACTER
3359  FE 3A             	CPI	':'	;SET CONDITION CODES
335B  C9                	RET			CALL;USER PROCESS

                        *	USER PROCESS RETURNS HERE

335C  D1                $DRS7	POP	D	;(DE) = LAST CHARACTER OF SWITCH+1
335D  2A 9033           	LHLD	$DRSB	;(HL) = FIRST CHARACTER OF SWITCH AFTER /
3360  2B                	DCX	H	;(HL) = ADDRESS OF '/'

                        *	REPLACE SWITCH WITH BLANKS

3361  36 20             $DRS8	MVI	M,' '
3363  23                	INX	H
3364  CD 8E18           	CALL	$CDEHL
3367  C2 6133           	JNE	$DRS8	;NOT THERE YET
336A  D1                	POP	D	;(DE) = SWITCH TABLE FWA
336B  C3 0B33           	JMP	$DRS1	;LOOK FOR MORE SWITCHES
336E                    	SPACE	2,10
                        **	$DRS15 - CHECK FOR VALID DELIMITER CHARACTER.
                        *
                        *	$DRS15 CHECKS THE NEXT TEXT CHARACTER TO SEE IF IT IS
                        *
                        *	00, '/', ' ', TAB, ',', ':'
                        *
                        *	ENTRY	(A) = CHARACTER
                        *	EXIT	'Z' SET IF CHARACTER IS ONE OF THE ABOVE
                        *	USES	F

336E  A7                $DRS15	ANA	A
336F  C8                	RZ			IS;00
3370  FE 2F             	CPI	'/'
3372  C8                	RE
3373  FE 20             	CPI	' '						;/3.0a/
3375  C8                	RE								/
3376  FE 09             	CPI	TAB						;/
3378  C8                	RE								/3.0a/
3379  FE 2C             	CPI	','
337B  C8                	RE
337C  FE 3A             	CPI	':'
337E  C8                	RE
337F  FE 3D             	CPI	'='						;/3.0a/
3381  C9                	RET
3382                    	SPACE	2,10
                        **	$DRS20 - GET PROCESSOR ADDRESS.
                        *
                        *	$DRS20 IS CALLED TO GET THE PROCESSOR ADDRESS FIELD OUT OF
                        *	AN ENTRY IN THE SWITCH TABLE. THE CALLER SUPPLIES A POINTER
                        *	TO SOMEWHERE IN THE TEXT PART OF THE SWITCH DESCRIPTION;
                        *	$DRS20 ADVANCES THE POINTER TO THE PROCESSOR ADDRESS.
                        *
                        *	ENTRY	(DE) = POINTER TO TEXT PART OF SWITCH ENTRY
                        *	EXIT	(DE) = POINTER TO 1ST BYTE OF NEXT SWITCH TABLE ENTRY
                        *		(BC) = PROCESSOR ADDRESS FROM TABLE
                        *	USES	A,F,B,C,D,E

3382  1A                $DRS20	LDAX	D
3383  13                	INX	D
3384  FE 80             	CPI	200Q
3386  C2 8233           	JNE	$DRS20
3389  1A                	LDAX	D	;(A) = LOW BYTE OF PROCESSOR ADDRESS
338A  4F                	MOV	C,A
338B  13                	INX	D
338C  1A                	LDAX	D
338D  47                	MOV	B,A	;(BC) = PROCESSOR ADDRESS
338E  13                	INX	D
338F  C9                	RET

3390  0000              $DRSB	DW	0	;POINTER TO SWITCH BEING PROCESSED
3392                    	XTEXT	FERROR
3392                    	SPACE	4,10
                        **	$FERROR - PROCESS FILE ERRORS.
                        *
                        *	$FERROR IS CALLED TO COMPLAIN ABOUT AN ERROR ENCOUNTERED
                        *	WHEN PROCESSING FILES.
                        *
                        *	ENTRY	(A) = ERROR CODE
                        *		(HL) = ADDRESS OF FILE NAME - FB.NAM
                        *	EXIT	TO RESTART
                        *	USES	ALL

3392  F5                $FERROR PUSH	PSW			; SAVE CODE
3393  CD 5E19           	CALL	$TYPTX
3396  0A457272 6F72206F 	DB	NL,'Error on file',' '+200Q
339E  6E206669 6C65A0
33A5  11 0A00           	LXI	D,FB.NAM
33A8  19                	DAD	D

                        *	PRINT FILE NAME

33A9  7E                $FERR1	MOV	A,M
33AA  23                	INX	H			; ADVANCE MESSAGE
33AB  A7                	ANA	A
33AC  CA B433           	JZ	$FERR2
33AF  FF 02             	SCALL	.SCOUT
33B1  C3 A933           	JMP	$FERR1

                        *	TYPE ERROR MESSAGE

33B4  CD 5E19           $FERR2	CALL	$TYPTX
33B7  202DA0            	DB	' -',' '+200Q
33BA  26 0A             	MVI	H,NL
33BC  F1                	POP	PSW			; (A) = CODE
33BD  FF 2F             	SCALL	.ERROR
33BF  C3 9F22           	JMP	RESTART 		; EXIT
33C2                    	STL	'PATCH AREA'
33C2                    	EJECT
33C2  AAAAAAAA AAAAAAAA PATCH	DC	64,#0AAH;PATCH AREA
33CA  AAAAAAAA AAAAAAAA
33D2  AAAAAAAA AAAAAAAA
33DA  AAAAAAAA AAAAAAAA
33E2  AAAAAAAA AAAAAAAA
33EA  AAAAAAAA AAAAAAAA
33F2  AAAAAAAA AAAAAAAA
33FA  AAAAAAAA AAAAAAAA

                        *	Auxiliary Patch Area (Round up 1 page)

3402  BBBBBBBB BBBBBBBB 	DC	*+255/256*256-*,#0BBH
340A  BBBBBBBB BBBBBBBB
3412  BBBBBBBB BBBBBBBB
341A  BBBBBBBB BBBBBBBB
3422  BBBBBBBB BBBBBBBB
342A  BBBBBBBB BBBBBBBB
3432  BBBBBBBB BBBBBBBB
343A  BBBBBBBB BBBBBBBB
3442  BBBBBBBB BBBBBBBB
344A  BBBBBBBB BBBBBBBB
3452  BBBBBBBB BBBBBBBB
345A  BBBBBBBB BBBBBBBB
3462  BBBBBBBB BBBBBBBB
346A  BBBBBBBB BBBBBBBB
3472  BBBBBBBB BBBBBBBB
347A  BBBBBBBB BBBBBBBB
3482  BBBBBBBB BBBBBBBB
348A  BBBBBBBB BBBBBBBB
3492  BBBBBBBB BBBBBBBB
349A  BBBBBBBB BBBBBBBB
34A2  BBBBBBBB BBBBBBBB
34AA  BBBBBBBB BBBBBBBB
34B2  BBBBBBBB BBBBBBBB
34BA  BBBBBBBB BBBBBBBB
34C2  BBBBBBBB BBBBBBBB
34CA  BBBBBBBB BBBBBBBB
34D2  BBBBBBBB BBBBBBBB
34DA  BBBBBBBB BBBBBBBB
34E2  BBBBBBBB BBBBBBBB
34EA  BBBBBBBB BBBBBBBB
34F2  BBBBBBBB BBBBBBBB
34FA  BBBBBBBB BBBB

3500                    	STL	'ONECOPY SPECIAL DATA STRUCTURES'
3500                    	EJECT

                        **	FDN - FILE DESCRIPTOR NODES.
                        *
                        *	THESE NODES ARE USED TO KEEP TRACK OF FILES WHICH ARE BEING
                        *	HELD IN MEMORY WHILE TRANSFERING.

3500   (0000)           FDN	DS	0	;START OF TYPICAL NODE
      = 0000            FDN.LNK	EQU	*-FDN	;LINK TO NEXT NODE IN CHAIN
3500   (0001)           	DS	1	;ALL IN SAME PAGE,  JUST KEEP PAGE INDEX
      = 0001            FDN.STA	EQU	*-FDN	;STATUS BYTE
      = 0010            ST.CNT	EQU	DIF.CNT	;IS CONTIGUOUS
      = 0002            ST.OPR	EQU	00000010B;IS BEING READ
      = 0001            ST.OPW	EQU	00000001B;OPEN FOR WRITE
3501   (0001)           	DS	1	;STATUS BYTE
      = 0002            FDN.SIZ	EQU	*-FDN	;TOTAL SIZE OF FILE (IF ST.CNT SET)
3502   (0001)           	DS	1	;SIZE IN GROUPS
      = 0003            FDN.AMR	EQU	*-FDN	;AMOUNT ALREADY READ
3503   (0002)           	DS	2		;IN SECTORS
      = 0005            FDN.AMW	EQU	*-FDN	;AMOUNT ALREADY WRITTEN
3505   (0002)           	DS	2		;IN SECTORS
      = 0007            FDN.ADR	EQU	*-FDN	;ADDRESS IN BUFFER
3507   (0001)           	DS	1		;ADDRESS/256 (MUST BE EVEN PAGE)
      = 0008            FDN.AIM	EQU	*-FDN	;AMOUNT IN MEMORY
3508   (0001)           	DS	1		;IN SECTORS
      = 0009            FDN.DAT EQU	*-FDN	;DATE OF SOURCE FILE
3509   (0002)           	DS	2
      = 000B            FDN.TIM EQU	*-FDN	;TIME OF SOURCE FILE
350B   (0002)           	DS	2
      = 000D            FDNELEN	EQU	*-FDN	;ENTRY  LENGTH

3500                    	ORG	FDN	;ORG BACK OVER DEFINITION AREA

                        **	TABLE. A LINK OF 0 IS A NULL LINK.
                        *
                        *	THE ENTIRE GROUP OF NODES MUST RESIDE
                        *	IN THE SAME PAGE

      = 3500            FDNFWA	EQU	*	;START OF NODES

3500  02                FDNFRE	DB	#FDN.1	;START OF FREE CHAIN
3501  00                FDNHEAD	DB	0		;ACTIVE LIST NOW EMPTY

3502   (0000)           FDN.1	DS	0
3502  0F                	DB	#FDN.2	;FDN.LNK
3503  00                	DB	0	;FDN.STA
3504  00                	DB	0	;FDN.SIZ
3505  0000              	DW	0	;FDN.AMR
3507  0000              	DW	0	;FDN.AMW
3509  00                	DB	0	;FDN.ADR
350A  00                	DB	0	;FDN.AIM
350B  0000              	DW	0	;FDN.DAT
350D  0000              	DW	0	;FDN.TIM

350F   (0000)           FDN.2	DS	0
350F  1C                	DB	#FDN.3	;FDN.LNK
3510  00                	DB	0	;FDN.STA
3511  00                	DB	0	;FDN.SIZ
3512  0000              	DW	0	;FDN.AMR
3514  0000              	DW	0	;FDN.AMW
3516  00                	DB	0	;FDN.ADR
3517  00                	DB	0	;FDN.AIM
3518  0000              	DW	0	;FDN.DAT
351A  0000              	DW	0	;FDN.TIM

351C   (0000)           FDN.3	DS	0
351C  29                	DB	#FDN.4	;FDN.LNK
351D  00                	DB	0	;FDN.STA
351E  00                	DB	0	;FDN.SIZ
351F  0000              	DW	0	;FDN.AMR
3521  0000              	DW	0	;FDN.AMW
3523  00                	DB	0	;FDN.ADR
3524  00                	DB	0	;FDN.AIM
3525  0000              	DW	0	;FDN.DAT
3527  0000              	DW	0	;FDN.TIM

3529   (0000)           FDN.4	DS	0
3529  36                	DB	#FDN.5	;FDN.LNK
352A  00                	DB	0	;FDN.STA
352B  00                	DB	0	;FDN.SIZ
352C  0000              	DW	0	;FDN.AMR
352E  0000              	DW	0	;FDN.AMW
3530  00                	DB	0	;FDN.ADR
3531  00                	DB	0	;FDN.AIM
3532  0000              	DW	0	;FDN.DAT
3534  0000              	DW	0	;FDN.TIM

3536   (0000)           FDN.5	DS	0
3536  43                	DB	#FDN.6	;FDN.LNK
3537  00                	DB	0	;FDN.STA
3538  00                	DB	0	;FDN.SIZ
3539  0000              	DW	0	;FDN.AMR
353B  0000              	DW	0	;FDN.AMW
353D  00                	DB	0	;FDN.ADR
353E  00                	DB	0	;FDN.AIM
353F  0000              	DW	0	;FDN.DAT
3541  0000              	DW	0	;FDN.TIM

3543   (0000)           FDN.6	DS	0
3543  50                	DB	#FDN.7	;FDN.LNK
3544  00                	DB	0	;FDN.STA
3545  00                	DB	0	;FDN.SIZ
3546  0000              	DW	0	;FDN.AMR
3548  0000              	DW	0	;FDN.AMW
354A  00                	DB	0	;FDN.ADR
354B  00                	DB	0	;FDN.AIM
354C  0000              	DW	0	;FDN.DAT
354E  0000              	DW	0	;FDN.TIM

3550   (0000)           FDN.7	DS	0
3550  5D                	DB	#FDN.8	;FDN.LNK
3551  00                	DB	0	;FDN.STA
3552  00                	DB	0	;FDN.SIZ
3553  0000              	DW	0	;FDN.AMR
3555  0000              	DW	0	;FDN.AMW
3557  00                	DB	0	;FDN.ADR
3558  00                	DB	0	;FDN.AIM
3559  0000              	DW	0	;FDN.DAT
355B  0000              	DW	0	;FDN.TIM

355D   (0000)           FDN.8	DS	0
355D  00                	DB	0	;FDN.LNK
355E  00                	DB	0	;FDN.STA
355F  00                	DB	0	;FDN.SIZ
3560  0000              	DW	0	;FDN.AMR
3562  0000              	DW	0	;FDN.AMW
3564  00                	DB	0	;FDN.ADR
3565  00                	DB	0	;FDN.AIM
3566  0000              	DW	0	;FDN.DAT
3568  0000              	DW	0	;FDN.TIM

      = 0008            FDNCNT	EQU	*-FDN.1/FDNELEN	;NUMBER OF NODES

      = 0035            .	SET	*/256
                        	ERRNZ	FDNFWA/256-.;MUST BE ALL IN SAME PAGE
356A                    	STL	'DATA AND FILE BUFFERS'
356A                    	EJECT

356A  00                VOLFLAG DB	0	;=0 IF READING FROM SOURCE, =377Q IF WRITING TO DEST
356B  00                VOLSER	DB	0	;SERIAL NUMBER OF CURRENT DISK

356C  00                OBUFLIM	DB	0	;BUFFER LIMIT/256
356D  00                OBUFPTR	DB	0	;NEXT FREE PAGE IN BUFFER/256

356E  00                ALLOCA	DB	0	;/ALL flag (<>0 if /ALL specified)
356F  00                COMAND	DB	0	;COMMAND IN PROGRESS
3570  00                MODE	DB	0	;<>0 IF LINE PASSED ON STACK
3571  00                SUPRES	DB	0	;/SUP flag (<>0 if /SU specified)
3572  00                QUERY	DB	0	;/Q flag (<>0 if /Q specified)
3573  01                SYSTEM	DB	1	;/S flag (=0 if /S specified)

3574  5858583A 44495245 DIRNAM	DB	'XXX:DIRECT.SYS',0;DIRECTORY FILE NAME
357C  43542E53 595300

3583  3E38              BUFPTR	DW	BUFF	;POINTER TO START  OF BUFFER
3585  0000              BUFSIZ	DW	0	;BUFFER LENGTH
3587                    	SPACE	3,10
                        **	FILE BLOCKS

3587   (0000)           DESTFB	DS	0	;DUMY BUFFER
3587  C8                	DB	200	;ILLEGAL CHANNEL NUMBER
3588  00                	DB	0	;FLAGS
3589  0000              	DW	0
358B  0000              	DW	0
358D  0000              	DW	0
358F  0000              	DW	0	;END OF BLOCK
3591  00000000 00000000 	DC	FB.NAML,#0;NAME AREA
3599  00000000 00000000
35A1  00
35A2                    	SPACE	3,10
35A2  0000              NAMTLEN	DW	0	;NAME TABLE POINTER
35A4  0000              NAMTMAX	DW	0	;MAXIMUM SIZE OF NAME TABLE
35A6  0000              NAMTPTR	DW	0	;POINTER TO ACTIVE ELEMENT IN NAMTAB

35A8                    	STL	'PRS - PRESET PROGRAM (OVERLAID BY BUFFERS).'
35A8                    	EJECT
35A8                    PRS	SPACE	4,10
                        ***	PRS - PRESET PIP PROGRAM.
                        *
                        *	PRS IS CALLED TO PERFORM ONE-TIME-ONLY PRESETTING OF
                        *	THE PROGRAM ENVIRONMENT.
                        *
                        *	THE CODE IS OVERLAID BY BUFFERS AND WORK AREAS WHEN PIP IS RUNNING.
                        *	DO NOT USE ANY OF THE BUFFERS AND WORK AREAS IN *PRS*
                        *
                        *
                        *	ENTRY	NONE
                        *
                        *	EXIT	IF  CORRECT VERSION OF HDOS
                        *		    NONE
                        *		  ELSE
                        *		    EXIT TO HDOS
                        *
                        *	USES	ALL

      = 35A8            ENTRY	EQU	*	;INITIAL ENTRY POINT
35A8  FF 09             PRS	SCALL	.VERS
35AA  DA BB36           	JC	PRS1	;ERROR IN GETTING VERSION
35AD  FE 30             	CPI	VERS
35AF  C2 BB36           	JNZ	PRS1	;NOT CORRECT VERSION OF HDOS
35B2  21 3E38           	LXI	H,RMEML	;(HL) = RUN-TIME HIGH MEMORY
35B5  FF 2A             	SCALL	.SETTP	;SET HI MEMORY
35B7  DA BE36           	JC	PRS2	;IF  ERROR
35BA  21 0923           	LXI	H,CCHIT
35BD  3E 03             	MVI	A,CTLC
35BF  FF 21             	SCALL	.CTLC	;SET CTL-C PROCESSING
35C1  3E FF             	MVI	A,377Q
35C3  FF 26             	SCALL	.CLOSE	;CLOSE OVERLAY CHANNEL
35C5  CD C536           	CALL	$DOS	;DISMOUNT OPERATING SYSTEM
35C8  DA BE36           	JC	PRS2	;IF ERROR
35CB  CD 5E19           	CALL	$TYPTX
35CE  0A090909 2020204F 	DB	NL,TAB,TAB,TAB,32,32,32,'ONECOPY'
35D6  4E45434F 5059
35DC  0A090909 56657273 	DB	NL,TAB,TAB,TAB,'Version:',32,32,VERS/16+'0','.',VERS&0FH+'0'
35E4  696F6E3A 2020332E
35EC  30
35ED  0A090920 20202020 	DB	NL,TAB,TAB,32,32,32,32,32,32,'Issue:',32,32,'#50.07.00'
35F5  20497373 75653A20
35FD  20233530 2E30372E
3605  3030
3607  0A0A4F4E 45434F50 	DB	NL,NL,'ONECOPY is used to copy files for systems with only one'
360F  59206973 20757365
3617  6420746F 20636F70
361F  79206669 6C657320
3627  666F7220 73797374
362F  656D7320 77697468
3637  206F6E6C 79206F6E
363F  65
3640  20666C6F 70707920 	DB	' floppy drive.',NL,'Read the appropriate manual before using.'
3648  64726976 652E0A52
3650  65616420 74686520
3658  61707072 6F707269
3660  61746520 6D616E75
3668  616C2062 65666F72
3670  65207573 696E672E
3678  0A0A496E 73657274 	DB	NL,NL,'Insert the initial source disk. '
3680  20746865 20696E69
3688  7469616C 20736F75
3690  72636520 6469736B
3698  2E20
369A  20486974 20524554 	DB	' Hit RETURN when ready:',' '+200Q
36A2  55524E20 7768656E
36AA  20726561 64793AA0
36B2  CD 4030           	CALL	GDWP.
36B5  CD 5131           	CALL	$RTL	;GET CR

36B8  C3 8022           	JMP	PRS3	;Jump the the rest of the code

36BB  3E 28             PRS1	MVI	A,EC.NCV;NOT CORRECT VERSION
36BD  37                	STC
36BE  26 0A             PRS2	MVI	H,NL
36C0  FF 2F             	SCALL	.ERROR
36C2  C3 0623           	JMP	EXIT

36C5                    	XTEXT	DOS
36C5                    	SPACE	4,10
                        **	$DOS - DISMOUNT OPERATING SYSTEM.
                        *
                        *	$DOS dismounts all units of all directory devices.
                        *
                        *	THE USER IS MESSAGED ABOUT THE DISKS, AND THE OPERATING
                        *	SYSTEM IS NOTIFIED.
                        *
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' CLEAR IF NO ERROR
                        *		'C' SET   IF	ERROR
                        *		 (A)  = ERROR CODE
                        *	USES	ALL
                        *

36C5  CD 5E19           $DOS	CALL	$TYPTX
36C8  0A074469 736D6F75 	DB	NL,BELL,'Dismounting All Disks:',NL,ENL
36D0  6E74696E 6720416C
36D8  6C204469 736B733A
36E0  0A8A

36E2  CD 1F37           	CALL	$DOS.
36E5  D8                	RC

36E6  CD 5E19           	CALL	$TYPTX
36E9  0A52656D 6F766520 	DB	NL,'Remove the Disk(s). Hit RETURN when ready:',' '+200Q
36F1  74686520 4469736B
36F9  2873292E 20486974
3701  20524554 55524E20
3709  7768656E 20726561
3711  64793AA0

3715  CD FE32           DOS1	CALL	$RCHAR			; READ CHARACTER
3718  FE 0A             	CPI	NL
371A  C2 1537           	JNE	DOS1

371D  A7                	ANA	A			; CLEAR CARRY
371E  C9                	RET
371F                    	SPACE	4,10
371F  FF 86             $DOS.	SCALL	.DAD			; Dismount all Disks
3721  C9                	RET
3722                    	SPACE	4,8
                        **	"what" identification

3722  40282329 48444F53 	DB	'@(#)HDOS 3.0 Onecopy Utility',NL
372A  20332E30 204F6E65
3732  636F7079 20557469
373A  6C697479 0A
373F  0100              	DW	.DATE.
3741  0200              	DW	.TIME.

      = 3743            MEML	EQU	*	;MEMORY LENGTH
3743                    	STL	'RUN-TIME WORK AREAS'
3743                    	EJECT
                        **	THE FOLLOWING BUFFERS AND AREAS OVERLAY THE PRS CODE.
                        *
                        *	*PRS* MAY NOT USE ANY CELLS BELOW *LINE*, AT THE
                        *	RISK OF SMASHING ITSELF

      = 35A8            DEFALT	EQU	PRS	;DEFAULT BLOCK

      = 35AE            MWNA	EQU	DEFALT+6;MWN WORK AREA

      = 35BF            SLABEL	EQU	MWNA+FB.NAML;Saved Label Sector
      = 36BF            LABEL	EQU	SLABEL+256;Label Sector

3743                    PIO.	SPACE	3,10
                        **	PIO.XXX - IMAGE OF SYSTEM AIO.XXX AREA
                        *
                        *	THESE CELLS MIRROR THE SYSTEM AIO.XXX AREA

      = 37BF            PIO.DEV EQU	LABEL+256;DEVICE CODE
      = 37C1            PIO.UNI EQU	PIO.DEV+2;UNIT NUMBER (0-9)

      = 37C2            PIO.DIR EQU	PIO.UNI+1;DIRECTORY ENTRY

      = 37D9            LINE	EQU	PIO.DIR+DIRELEN;COMMAND BUFFER

      = 383E            NAMTAB	EQU	LINE+101;NAME TABLE

      = 0200            BUFMINL	EQU	512	;MINIMUM SIZE FOR BUFFER (WHEN IN USE)
      = 383E            BUFF	EQU	NAMTAB	;BUFFER AREA STARTS AFTER NAMTAB

      = 383E            RMEML	EQU	NAMTAB	;INITIAL RUNNING MEMORY LENGTH

3743   (35A8)           	END	ENTRY

00000 Total Errors


00000 Total Warnings

$CCO               3118    $CDEHL             188E E  $CFD               30FA
$CHL               1894 E  $COMP              1830 E  $CRLF              317F
$DAD               31CC    $DADA              183A E  $DADA.             1841 E
$DOS               36C5    $DOS.              371F    $DRS               330B E
$DRS1              330B    $DRS15             336E    $DRS2              3318
$DRS20             3382    $DRS3              331B    $DRS4              332A
$DRS4.5            3336    $DRS5              333E    $DRS6              3346
$DRS7              335C    $DRS8              3361    $DRSB              3390
$DU66              1846 E  $FERR1             33A9    $FERR2             33B4
$FERROR            3392    $GNL               3125    $HLIHL             1889 E
$INDL              189C E  $INDLB             318A    $INDS              319B
$INDSB             31B6    $MCU               3141    $MLU               3131
$MLU1              3134    $MOVE              18AA E  $MOVEL             32EB
$MU86              1907 E  $RCHAR             32FE    $RSTALL            1927 E
$RTL               3151 E  $RTL.              314A    $RTL1              3152
$RTL2              316E    $SAVALL            192C E  $SOB               3171
$SOB1              3172    $TJMP              1931 E  $TJMP.             1932 E
$TYPCC             310C E  $TYPTX             195E E  $TYPTX.            1964 E
$UDD               196F E  $UDDN              326C E  $UDDS              3271 E
$UDDX              3274    $UOB               32B2    $UOW               32A3
$UOW.              32AA    $WCHAR             3304    $WDR               1992 E
$WER               19A1 E  $ZERO              198A E  .                  0035 S
.CHFLG             0030    .CLEAR             002D    .CLEARA            002E
.CLOSE             0026    .CLRCO             0007    .CONSL             0006
.CRC16             000B    .CTLC              0021    .DAD               0086
.DATE.             0001 E  .DECODE            002B    .DELET             0028
.DELETE            0028 E  .DISMT             0031    .DMNMS             0083
.DMOUN             0081    .DMOUNT            0081 E  .ERROR             002F
.EXIT              0000    .GDA               000A    .LINK              0020
.LOADD             0032    .LOADO             0008    .MONMS             0082
.MOUNT             0080    .NAME              002C    .OPENC             0025
.OPENR             0022    .OPENU             0024    .OPENW             0023
.POSIT             0027    .PRINT             0003    .READ              0004
.RENAM             0029    .RENAME            0029 E  .RESET             0084
.RESNMS            0085    .SCIN              0001    .SCOUT             0002
.SETTOP            002A E  .SETTP             002A    .SYSRES            000C
.TIME.             0002 E  .VERS              0009    .WRITE             0005
ABS.COD            0008    ABS.ENT            0006    ABS.ID             0000
ABS.LDA            0002    ABS.LEN            0004    ACL                23B8
AEN                2CAE    AEN1               2CC0    AEN2               2CDF
AENA               2CE1    AIO.CGN            2127    AIO.CHA            214E
AIO.CNT            2149    AIO.CSI            2128    AIO.DDA            2121 E
AIO.DES            212D    AIO.DEV            212F    AIO.DIR            2132
AIO.DTA            212B    AIO.EOF            214B    AIO.EOM            214A
AIO.FLG            2123    AIO.GRT            2124    AIO.LGN            2129
AIO.LSI            212A    AIO.SPG            2126    AIO.TFP            214C
AIO.UNI            2131    AIO.VEC            2120    ALLOCA             356E
BELL               0007 E  BKSP               0008 E  BLS                297B
BLS1               2992    BLS2               29A3    BLS3               29B1
BLS4               29BC    BLSA               29C6    BLSB               29CC
BLSC               29CD    BOOT.P             0001 E  BRIEF              27A7
BS                 0008 E  BSL                2CF2    BSL1               2CF8
BSL2               2D13    BSLA               2D1B    BUFF               383E E
BUFMINL            0200 E  BUFPTR             3583    BUFSIZ             3585
C.STX              0002 E  C.SYN              0016 E  CAD                2DA5
CAD.               2DA9    CAD0               2DAB    CAD1               2DE0
CAD2               2E0D    CAD2.4             2E23    CAD2.6             2E29
CAD3               2E48    CAD4               2E4A    CAD5               2E55
CADA               2E59    CBR                2701    CCHIT              2309
CCW                2D1C    CDA                2F36    CDA5               2F5A
CDA6               2F68    CDA7               2F6A    CDB.H84            0001 E
CDB.H85            0000 E  CFE                2D20    CFS                2D30
CFS.               2D33    CFS1               2D36    CN.DES             0001 E
CN.DIR             0002 E  CN.SOU             0000 E  CO.FLG             0001 E
COMAND             356F    COPY               23ED E  CQF                2E5A
CQF.               2E6D    CQF1               2EB1    CQFN               2EA9
CQFX               2E7F    CQFX.              2E94    CQFY               2EAC
CR                 000D E  CS.FLG             0080 E  CSL.CHR            0001 E
CSL.ECH            0080 E  CSL.RAW            0004 E  CSL.WRP            0002 E
CTLA               0001 E  CTLB               0002 E  CTLC               0003 E
CTLD               0004 E  CTLE               0005 E  CTLO               000F E
CTLP               0010 E  CTLQ               0011 E  CTLR               0012 E
CTLS               0013 E  CTLX               0018 E  CTLZ               001A E
CTP.2SB            0008 E  CTP.BKM            0002 E  CTP.BKS            0080 E
CTP.FF             0040 E  CTP.HHS            0004 E  CTP.MLI            0020 E
CTP.MLO            0010 E  CTP.TAB            0001 E  CTS                2D3E
CWM                2D4B    CWM1               2D52    D.CON              2048
D.RAM              20A0    D.VEC              2058    DAD1               3224
DAD1.              3225 E  DAD1X              3223    DAD2               322D
DAD3               3230    DADB               3236    DADC               325A
DADCL              0009 E  DADCX              3263    DC.ABT             0007
DC.CLO             0006    DC.DSF             000E    DC.INT             000D
DC.LOD             0009    DC.MAX             000F    DC.MOU             0008
DC.OPR             0003    DC.OPU             0005    DC.OPW             0004
DC.RDY             000A    DC.REA             0000    DC.RER             0002
DC.SET             000B    DC.UNL             000C    DC.WRI             0001
DDF                2D59    DDF.BOL            0009 E  DDF.BOO            0000
DDF.LAB            0009    DDF.USR            000A    DDF1               2D5E
DDF1.0             2D69    DDF2               2D6C    DDF3               2D94
DDFA               2D99    DDFB               2DA2    DEFALT             35A8 E
DEL                007F E  DESTERR            2C20    DESTFB             3587
DEV.DDA            0004    DEV.DVG            000D    DEV.DVL            000B
DEV.FLG            0006    DEV.JMP            0003    DEV.MNU            0008
DEV.MUM            0007    DEV.NAM            0000    DEV.RES            0002
DEV.UNT            0009    DEVELEN            000E E  DF.CLR             00FE E
DF.EMP             00FF E  DIF.ARC            0008 E  DIF.BAD            0004 E
DIF.CNT            0010 E  DIF.DL             0002 E  DIF.LOC            0040 E
DIF.SYS            0080 E  DIF.USR            0001 E  DIF.WP             0020 E
DIR.ACD            0015    DIR.CRD            0013    DIR.CTH            000B
DIR.CTM            000C    DIR.EXT            0008    DIR.FGN            0010
DIR.FLG            000E    DIR.LGN            0011    DIR.LSI            0012
DIR.NAM            0000    DIR.NOA            000D    DIR.USR            000F
DIRELEN            0017 E  DIRIDL             000B E  DIRNAM             3574
DIS.ENL            01FB    DIS.ENT            0000 E  DIS.LNK            01FE
DIS.SEC            01FC    DNT                2ECF    DNT1               2ED6
DNT2               2EDF    DNT3               2F01    DNT4               2F14
DNT5               2F0B    DNTA               2F19    DOS1               3715
DR.FX              0004 E  DR.IM              0001 E  DR.PR              0002 E
DR.SPL             00E0 E  DR.UNL             0008 E  DT.CH              0010 E
DT.CR              0002 E  DT.CW              0004 E  DT.DD              0001 E
DT.FX              0020 E  DT.P3              0040 E  DT.RN              0008 E
DT.UL              0080 E  DV.EL              0000 E  DV.NU              0001 E
EBM                2F22    EC.CNA             0004    EC.CNR             0034
EC.CUI             0037    EC.DDA             0017    EC.DFM             0031
EC.DIF             000F    EC.DIW             001D    EC.DNI             0025
EC.DNL             002F    EC.DNP             0030    EC.DNR             0026
EC.DNS             0005    EC.DSC             0027    EC.EOF             0001
EC.EOM             0002    EC.FAO             0019    EC.FAP             0016
EC.FIX             002D    EC.FL              0018    EC.FNF             000C
EC.FNO             0009    EC.FNR             001C    EC.FOD             0023
EC.FUC             000B    EC.ICN             000E    EC.IDF             0032
EC.IDN             0006    EC.IFC             0010    EC.IFN             0007
EC.ILA             002E    EC.ILC             0003    EC.ILO             0020
EC.ILR             000A    EC.ILV             001F    EC.IOI             002A
EC.IS              001A    EC.ITS             0033    EC.LAD             002C
EC.LBO             0036    EC.NCV             0028    EC.NEM             0011
EC.NOS             0029    EC.NPM             0024    EC.NRD             0008
EC.NVM             0022    EC.OTL             002B    EC.RF              0012
EC.SDR             0035    EC.UNA             001E    EC.UND             000D
EC.UUN             001B    EC.VPM             0021    EC.WF              0013
EC.WP              0015    EC.WPV             0014    ENL                008A E
ENTRY              35A8 E  EOL                0080 E  ERROR              2C54
ERROR1             2C6D    ERROR2             2C70    ERRORA             2C8E
ESC                001B E  EWS                2F6F    EWS1               2FB6
EWS3               2FD0    EWS4               2FFF    EWS6               3000
EWS7               3006    EWSA               300B    EWSB               3011
EWSC               302F    EXIT               2306    FB.CHA             0000
FB.FLG             0001    FB.FWA             0002    FB.LIM             0006
FB.LWA             0008    FB.NAM             000A    FB.NAML            0011 E
FB.PTR             0004    FBENL              001B E  FDN                3500
FDN.1              3502    FDN.2              350F    FDN.3              351C
FDN.4              3529    FDN.5              3536    FDN.6              3543
FDN.7              3550    FDN.8              355D    FDN.ADR            0007 E
FDN.AIM            0008 E  FDN.AMR            0003 E  FDN.AMW            0005 E
FDN.DAT            0009 E  FDN.LNK            0000 E  FDN.SIZ            0002 E
FDN.STA            0001 E  FDN.TIM            000B E  FDNCNT             0008 E
FDNELEN            000D E  FDNFRE             3500    FDNFWA             3500 E
FDNHEAD            3501    FF                 000C E  FT.ABS             0000 E
FT.BAC             0003 E  FT.DD              0001 E  FT.OC              0010 E
FT.OR              0002 E  FT.OU              0008 E  FT.OW              0004 E
FT.PIC             0001 E  FT.REL             0002 E  GDWP               303A
GDWP.              3040    GETLAB             278A    I.BRE              0002 E
I.CONFL            0004 E  I.CONTY            0001 E  I.CONWI            0003 E
I.COP              0000 E  I.CSLMD            0000 E  I.CUSOR            0002 E
I.ID               0004 E  I.LIS              0001 E  I.MOU              0005 E
I.VER              0003 E  ID                 2B95    IERR1              2C26
IERR2              2C29    IERR3              2C2C    IERRN              2C4E
IFL                2707    IFL1               2714    ILDEHL             3185
INA                3044    IOC.CGN            0008    IOC.CSI            0009
IOC.DDA            0002    IOC.DES            000E    IOC.DEV            0010
IOC.DIL            0011 E  IOC.DIR            0013    IOC.DRL            0008 E
IOC.DTA            000C    IOC.FLG            0004    IOC.GRT            0005
IOC.LGN            000A    IOC.LNK            0000    IOC.LSI            000B
IOC.SPG            0007    IOC.SQL            0003 E  IOC.UNI            0012
IOCCTD             0001 E  IOCELEN            002A E  ISDEHL             31C7
LAB.AUX            004F E  LAB.AXL            0001 E  LAB.DAT            0000 E
LAB.DIS            0003    LAB.GRT            0005    LAB.IND            0001
LAB.LAB            0011    LAB.LBL            003C E  LAB.LVN            0050
LAB.NOD            0002 E  LAB.PSS            000E    LAB.RGT            000A
LAB.SER            0000    LAB.SIZ            000C    LAB.SPG            0007
LAB.SPT            004F    LAB.SYS            0001 E  LAB.VER            0009
LAB.VFL            0010    LAB.VLT            0008    LAB.VPL            0005 E
LAB.VPR            000C E  LABEL              36BF E  LF                 000A E
LINE               37D9 E  LIST               27A1    LIST1              27AA
LIST1.5            27D5    LIST10             28E2    LIST2              2824
LIST3              2829    LIST4              2838    LIST5              2850
LIST6              285F    LIST7              2879    LIST8              2890
LIST9              289F    LSN                305E    LSN1               3061
LSTA               28EF    LSTB               28F0    LSTC               28F1
LSTD               28F3    LSTE               290B    LSTF               290D
LSTG               290E    LSTG1              2943    LSTGL              0040 E
LSTH               294E    LSTH1              294F    LSTH2              2960
LSTH3              296F    LSTHL              002D E  MAD                2720 E
MAD0               272A    MAD3               2731    MAD4               2739
MAD4.5             2761    MEML               3743 E  MND                277C
MNDA               2785    MODE               3570    MOUNT              23CE
MOUNTA             23DC    MWN                306E    MWN1               3089
MWN2               308F    MWNA               35AE E  NAMERR             2C16
NAMTAB             383E E  NAMTLEN            35A2    NAMTMAX            35A4
NAMTPTR            35A6    NL                 000A E  NUL                0000 E
NUL2               0000 E  NULL               0080 E  OBUFLIM            356C
OBUFPTR            356D    OCFWA              2280 E  OCOPY              23ED E
OCOPY1             2431    OCOPY2             2445    OCOPY3             245C
OCOPY6             2462    OCOPYA             2486    OCOPYC             2487
OCOPYD             2488    OCOPYDL            0011 E  OCOPYE             2474
OCOPYF             2499    OCOPYG             24A8    OVL.COD            0000
OVL.ENS            0008 E  OVL.ENT            0004    OVL.FLB            0006
OVL.SIZ            0002    OVL0               0000    PATCH              33C2
PEC.CS             0084 E  PEC.DF             0080 E  PEC.DNC            0081 E
PEC.FCI            0088 E  PEC.IDF            0086 E  PEC.IUW            0085 E
PEC.SFI            0087 E  PEC.TFI            0083 E  PFI                29D2
PFI.F              2ABA    PFI.NT             2AB4    PFI1               29E3
PFI1.1             29F3    PFI1.2             29FD    PFI19              2AEC
PFI2               2A0C    PFI20              2AF1    PFI3               2A12
PFI3.5             2A35 E  PFI31              2ACE    PFI32              2AD6
PFI41              2B05    PFI42              2B02    PFI43              2AFF
PFI5               2ADE    PFI50              2B09    PFI6               2AE1
PFIA               2B1C    PFIB               2B4C    PFIC               2B54
PFIT               2B55    PIO.DEV            37BF E  PIO.DIR            37C2 E
PIO.UNI            37C1 E  PIP                229F E  PIP1               22AF
PIPA               2313    PIPB               22FA    PRS                35A8
PRS1               36BB    PRS2               36BE    PRS3               2280
QUERY              3572    QUOTE              0027 E  REN                309A
RESTART            229F E  RMEML              383E E  RPH                24BC E
RPH.DAT            25E1 E  RPH.TIM            25E7 E  RPH1               24D3
RPH2               24E2    RPH2.5             250E    RPH3               2554
RPH4               258E    RPHX               25AA    RPHX0              25B0
RPHX1              25BB    RUBOUT             007F E  S.BAUD             20E4
S.BDA              2150    S.BOOTF            211C    S.CAADR            20DB
S.CACC             2106    S.CCTAB            20DD    S.CDB              20E3
S.CFWA             20EA    S.CLKTR            20CD    S.CODE             2107
S.CONFL            20DA    S.CONTY            20D7    S.CONWI            20D9
S.CSLMD            20D6    S.CUSOR            20D8    S.DATC             20C8
S.DATE             20BF    S.DDDTA            20F6    S.DDGRP            20F4
S.DDLDA            20F0    S.DDLEN            20F2    S.DDOPC            20F8
S.DFWA             20EC    S.DIREA            210E    S.DLINK            20E6
S.EXITA            2040    S.FASER            210B    S.FCI              2111
S.GUP              2117    S.HIMEM            20CE    S.INT              20E3
S.JUMPS            2108    S.MOUNT            211A    S.OSI              2156
S.OSO              2157    S.OSZ              2158    S.RFWA             20EE
S.SCI              2114    S.SCR              2151    S.SDD              2108
S.SOVR             2176    S.SYSM             20D0    S.TFWA             20E8
S.TIME             20CA    S.USRM             20D2    S.VAL              20BF
SBE                30AF    SDD                30C0    SDDA               30CF
SFS                30D5    SFS1               30DF    SLABEL             35BF E
SND                30E2    ST.CNT             0010 E  ST.OPR             0002 E
ST.OPW             0001 E  STACK              2280 E  STACKL             010A E
START              22A6    SUPRES             3571    SW.ALL             236E
SW.BRE             2385    SW.BRE1            2392    SW.ID              23AE
SW.LIS             2398    SW.LIS1            23A3    SW.MOU             23B3
SW.QUE             237F    SW.SUP             2379    SW.SYS             2374
SW.VER             23A9    SWIT1              2360    SYDD               2058 E
SYSCALL            00FF E  SYSTEM             3573    T.0                2A8F
T.1                2A9D    T.2                2AA5    T.AM               2A7A
T.AP               2AAF E  T.PM               2A7F    TAB                0009 E
TFNS               32C5    TFNS.              32C8    TFNS1              32DC
TFNS2              32E3    UDDPAD             329F E  UDDX1              327C
UDDX1.5            3296    UDDX2              3298    UDDX3              3299
UNT.DIS            0006    UNT.FLG            0000    UNT.GRT            0002
UNT.GTS            0004    UNT.SIZ            0008 E  UNT.SPG            0001
UOD                32B9    UOW1               32B1    USERFWA            2280 E
VERS               0030 E  VERSN              2B56 E  VERSV0             2BD7
VERSV1             2BE5    VERSV2             2BF6    VERSV3             2C07
VFL.80T            0002 E  VFL.DTD            0002 E  VFL.FIX            0004 E
VFL.NSD            0001 E  VOLFLAG            356A    VOLSER             356B
WPH                25F0 E  WPH.DAT            26F8 E  WPH.TIM            26EE E
WPH0               260B    WPH1               2635    WPH1.5             2649
WPH2               2657    WPH3               2671    WPH4               26A3
WPHX               26C2    WPHX.              26F3    XCHGBC             3307
