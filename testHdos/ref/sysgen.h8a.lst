0000                    	TITLE	'SYSGEN - GENERATE NEW SYSTEM'
                        ***	SYSGEN IS A CUT-DOWN FROM PIP.
                        *

                        ***	PIP - PERIHPERAL INTERCHANGE PROGRAM.
                        *
                        *	J.G. LETWIN, 11/1977 FOR *HEATH* COMPANY
                        *
                        *	COPYRIGHT 1977, 1979 BY HEATH COMPANY
                        *
                        *	G. Chandler, 9/78	Maintenence release
                        *			79/04	Issue --.04.--
                        *			79/11	Issue --.05.--
                        *			80/07	Issue --.06.--
                        *	B. Parrott, 8/86
                        *			86/08	Issue --.07.--
                        *
                        *	80.07.gc
                        *		Linked list structure modified to remove page boundary
                        *		requirements.
                        *		H17 dependency removed.
                        *		Multiple Unit
                        *		Multiple Device.
                        *		Command Line Switch Processing
                        *
0000                    	SPACE	4
                        ***	USE:
                        *
                        *		Command Line File specification replacing default.
                        *		/Minimal Switch
                        *		Destination Device specification
                        *
0000                    	SPACE	4,10
                        **	Assembly Constants

      = 0008            FDNCNT	EQU	8	;Number of File Descriptor Nodes


                        **	SYSTEM EQUIVALENCES

      = 0000            CN.SOU	EQU	0	;SOURCE CHANNEL NUMBER
      = 0001            CN.DES	EQU	1	;DESTINATION CHANNEL NUMBER
      = 0002            CN.DIR	EQU	2	;DIRECTORY CHANNEL NUMBER


                        **	PROGRAM ERROR CODES	(Must not equal ENL)

      = 0080            PEC.DF	EQU	200Q	;DEVICE FORMAT ERROR
      = 0081            PEC.DNC	EQU	201Q	;DEVICES NOT CONSISTANT
      = 0082            PEC.RSE	EQU	202Q	;RENAME SPECIFICATION ERROR
      = 0083            PEC.TFI	EQU	203Q	;TARGET FILE ILLEGAL
      = 0084            PEC.CS	EQU	204Q	;CONTRADICTORY SWITCHES
      = 0085            PEC.IUW	EQU	205Q	;ILLEGAL USE OF WILDCARD
      = 0086            PEC.IDF	EQU	206Q	;ILLEGAL DESTINATION FILE FORMAT
      = 0087            PEC.CO	EQU	207Q	;Command Overflow

0000                    	EJECT
0000                    	XTEXT	DIRDEF
0000                    	SPACE	3,10
                        **	DIRECTORY ENTRY FORMAT.

0000                    	ORG	0

      = 00FF            DF.EMP	EQU	377Q			; ENTRY EMPTY
      = 00FE            DF.CLR	EQU	376Q			; ENTRY EMPTY, REMAINDER ALSO CLEAR

0000   (0008)           DIR.NAM DS	8			; NAME
0008   (0003)           DIR.EXT DS	3			; EXTENSION
      = 000B            DIRIDL	equ	*			; file identification length	/3.0a/

000B   (0001)           DIR.CTH DS	1			; creation time (BCD hours)	/3.0a/
000C   (0001)           DIR.CTM DS	1			; creation date (BCD minutes)	/3.0a/

000D   (0001)           DIR.NOA DS	1			; number of accesses		/3.0a/
000E   (0001)           DIR.FLG DS	1			; FLAGS
000F   (0001)           DIR.USR DS	1			; user area mask		/3.0a/
0010   (0001)           DIR.FGN DS	1			; FIRST GROUP NUMBER
0011   (0001)           DIR.LGN DS	1			; LAST GROUP NUMBER
0012   (0001)           DIR.LSI DS	1			; LAST SECTOR INDEX (IN LAST GROUP)
0013   (0002)           DIR.CRD DS	2			; CREATION DATE
0015   (0002)           DIR.ACD DS	2			; last access date		/3.0a/

      = 0017            DIRELEN EQU	*			; DIRECTORY ENTRY LENGTH
0017                    	XTEXT	DIFDEF
0017                    DIFDEF	SPACE	4,10
                        **	DIRECTORY FILE FLAGS.

      = 0080            DIF.SYS EQU	10000000B		; System file
      = 0040            DIF.LOC EQU	01000000B		; Locked from flag changes
      = 0020            DIF.WP	EQU	00100000B		; Write protected
      = 0010            DIF.CNT EQU	00010000B		; Contiguous file
      = 0008            DIF.ARC EQU	00001000B		; File archive attribute	/3.0a/
      = 0004            DIF.BAD EQU	00000100B		; File is damaged		/3.0a/
      = 0002            DIF.DL	EQU	00000010B		; Locked against delete 	/3.0a/
      = 0001            DIF.USR EQU	00000001B		; User-defined			/3.0a/
0017                    	XTEXT	DEVDEF
0017                    	SPACE	4,10
                        ***	DEVICE TABLE ENTRYS.

0000                    	ORG	0

0000   (0002)           DEV.NAM DS	2			; DEVICE NAME
      = 0000            DV.EL	EQU	00000000B		; END OF DEVICE LIST FLAG
      = 0001            DV.NU	EQU	00000001B		; DEVICE ENTRY NOT IN USE

0002   (0001)           DEV.RES DS	1			; DRIVER RESIDENSE CODE
      = 0001            DR.IM	EQU	00000001B		; DRIVER IN MEMORY
      = 0002            DR.PR	EQU	00000010B		; DRIVER PERMANENTLY RESIDENT
      = 0004            DR.FX	equ	00000100b		; Driver FIXED in memory	/3.0a/
      = 0008            DR.UNL	equ	00001000b		; Driver unload pending 	/3.0a/
                        *	equ	00010000b		; Reserved			/3.0a/
      = 00E0            DR.SPL	equ	11100000b		; SET preamble size mask	/3.0a/

0003   (0001)           DEV.JMP DS	1			; JMP TO PROCESSOR
0004   (0002)           DEV.DDA DS	2			; DRIVER ADDRESS
0006   (0001)           DEV.FLG DS	1			; FLAG BYTE
      = 0001            DT.DD	EQU	00000001B		; DIRECTORY DEVICE
      = 0002            DT.CR	EQU	00000010B		; CAPABLE OF READ OPERATION
      = 0004            DT.CW	EQU	00000100B		; CAPABLE OF WRITE OPERATION
      = 0008            DT.RN	EQU	00001000B		; Capable of random access
      = 0010            DT.CH	EQU	00010000B		; Capable of Character mode
      = 0020            DT.FX	EQU	00100000B		; Fixed Media			/3.0a/
      = 0040            DT.P3	EQU	01000000B		; pre-3.0 media 		/3.0a/
      = 0080            DT.UL	EQU	10000000B		; requires unload notification	/3.0a/

0007   (0001)           DEV.MUM DS	1			; MOUNTED UNIT MASK
0008   (0001)           DEV.MNU DS	1			; MAXIMUM NUMBER OF UNITS
0009   (0002)           DEV.UNT DS	2			; ADDRESS OF UNIT SPECIFIC DATA TABLE

000B   (0002)           DEV.DVL DS	2			; DRIVER BYTE LENGTH
000D   (0001)           DEV.DVG DS	1			; DRIVER ROUTINE GROUP ADDRESS

      = 000E            DEVELEN EQU	*			; DEVICE TABLE ENTRY LENGTH
000E                    UNT.TAB	SPACE	4,10
                        **	UNIT SPECIFIC DEVICE DATA TABLE ENTRIES

0000                    	ORG	0

0000   (0001)           UNT.FLG DS	1			; UNIT SPECIFIC  *DEV.FLG*
0001   (0001)           UNT.SPG DS	1			; Sectors Per Group
0002   (0002)           UNT.GRT DS	2			; ADDRESS OF GRT (IF DT.DD)
0004   (0002)           UNT.GTS DS	2			; GRT SECTOR NUMBER
0006   (0002)           UNT.DIS DS	2			; DIRECTORY FIRST SECTOR NUMBER

      = 0008            UNT.SIZ EQU	*			; SIZE OF UNIT SPECIFIC DATA ENTRY
0008                    	XTEXT	IOCDEF
0008                    IOCDEF	SPACE	3,10
                        **	I/O CHANNEL DEFINITIONS.

0000                    	ORG	0

0000   (0002)           IOC.LNK DS	2			; ADDRESS OF NEXT CHANNEL, =0 IF LAST
0002   (0002)           IOC.DDA DS	2			; THREAD JUMP TO DEVICE DRIVER (VIA DEV TABLE)

0004   (0001)           IOC.FLG DS	1			; FILE TYPE FLAGS
      = 0001            FT.DD	EQU	00000001B		;  =1 IF DIRECTORY DEVICE
      = 0002            FT.OR	EQU	00000010B		;  =1 IF OPEN FOR READ
      = 0004            FT.OW	EQU	00000100B		;  =1 IF OPEN FOR WRITE
      = 0008            FT.OU	EQU	00001000B		;  =1 IF OPEN FOR UPDATE
      = 0010            FT.OC	EQU	00010000B		;  =1 IF OPEN FOR CHARACTER MODE
      = 0003            IOC.SQL EQU	*-IOC.DDA		; LENGTH OF INFO FOR SEQUENTIAL FILE

0005   (0002)           IOC.GRT DS	2			; ADDRESS OF GROUP RESERVATION TABLE
0007   (0001)           IOC.SPG DS	1			; SECTORS PER GROUP, THIS DEVICE
0008   (0001)           IOC.CGN DS	1			; CURRENT GROUP NUMBER
0009   (0001)           IOC.CSI DS	1			; CURRENT SECTOR INDEX (IN CURRENT GROUP)
000A   (0001)           IOC.LGN DS	1			; LAST GROUP NUMBER
000B   (0001)           IOC.LSI DS	1			; LAST SECTOR INDEX (IN LAST GROUP)
      = 0008            IOC.DRL EQU	*-IOC.FLG		; LENGTH OF INFO NORMALLY COPIED BACK TO
                        *					; THE CHANNEL TABLE
000C   (0002)           IOC.DTA DS	2			; DEVICE TABLE ADDRESS FOR THIS DEVICE
000E   (0002)           IOC.DES DS	2			; SECTOR NUMBER OF DIRECTORY ENTRY
0010   (0002)           IOC.DEV DS	2			; DEVICE CODE
0012   (0001)           IOC.UNI DS	1			; UNIT NUMBER (0-9)
      = 0011            IOC.DIL EQU	*-IOC.DDA		; LENGTH OF INFO FOR DIRECTORY FILE

0013   (0017)           IOC.DIR DS	DIRELEN 		; DIRECTORY ENTRY

      = 002A            IOCELEN EQU	*			; IOC ENTRY LENGTH

      = 0001            IOCCTD	EQU	1			; INDEX OF USER CHANNEL #0 IN CHANTAB (FIRST = 0)
002A                    	XTEXT	DISDEF
002A                    DISDEF	SPACE	3,10
                        **	DIRECTORY BLOCK FORMAT.

0000                    	ORG	0

      = 0000            DIS.ENT EQU	*			; FIRST ENTRY ADDRESS

0000   (01FA)           	DS	22*DIRELEN		; 22 DIRECTORY ENTRYS PER BLOCK
01FA   (0001)           	DS	1			; 0 BYTE = END OF ENTRYS IN THIS BLOCK

01FB                    	ORG	512-5			; AT END OF BLOCK

01FB   (0001)           DIS.ENL DS	1			; LENGTH OF EACH ENTRY (=DIRELEN)
01FC   (0002)           DIS.SEC DS	2			; BLOCK # OF THIS BLOCK,
01FE   (0002)           DIS.LNK DS	2			; BLOCK # OF NEXT BLOCK, =0 IF LAST
0200                    	XTEXT	FBDEF
0200                    	SPACE	4,10
                        **	FILE BLOCK DEFINITIONS.

0000                    	ORG	0

0000   (0001)           FB.CHA	DS	1			; CHANNEL NUMBER
0001   (0001)           FB.FLG	DS	1			; FLAGS
0002   (0002)           FB.FWA	DS	2			; BUFFER FWA
0004   (0002)           FB.PTR	DS	2			; BUFFER POINTER
0006   (0002)           FB.LIM	DS	2			; LIMIT OF DATA IN BUFFER (READ)
0008   (0002)           FB.LWA	DS	2			; LWA OF BUFFER
000A   (0011)           FB.NAM	DS	4+8+4+1 		; NAME OF FILE
      = 0011            FB.NAML EQU	*-FB.NAM
      = 001B            FBENL	EQU	*			; ENTRY LENGTH
001B                    	XTEXT	ECDEF
001B                    	SPACE	4,10
                        **	ERROR CODE DEFINITIONS.

0000                    	ORG	0

0000   (0001)           	DS	1		; NO ERROR #0
0001   (0001)           EC.EOF	DS	1		; END OF FILE
0002   (0001)           EC.EOM	DS	1		; END OF MEDIA
0003   (0001)           EC.ILC	DS	1		; ILLEGAL SCALL CODE
0004   (0001)           EC.CNA	DS	1		; CHANNEL NOT AVAILABLE
0005   (0001)           EC.DNS	DS	1		; DEVICE NOT SUITABLE
0006   (0001)           EC.IDN	DS	1		; ILLEGAL DEVICE NAME
0007   (0001)           EC.IFN	DS	1		; ILLEGAL FILE NAME
0008   (0001)           EC.NRD	DS	1		; NO ROOM FOR DEVICE DRIVER
0009   (0001)           EC.FNO	DS	1		; CHANNEL NOT OPEN
000A   (0001)           EC.ILR	DS	1		; ILLEGAL REQUEST
000B   (0001)           EC.FUC	DS	1		; FILE USAGE CONFLICT
000C   (0001)           EC.FNF	DS	1		; FILE NAME NOT FOUND
000D   (0001)           EC.UND	DS	1		; UNKNOWN DEVICE
000E   (0001)           EC.ICN	DS	1		; ILLEGAL CHANNEL NUMBER
000F   (0001)           EC.DIF	DS	1		; DIRECTORY FULL
0010   (0001)           EC.IFC	DS	1		; ILLEGAL FILE CONTENTS
0011   (0001)           EC.NEM	DS	1		; NOT ENOUGH MEMORY
0012   (0001)           EC.RF	DS	1		; READ FAILURE
0013   (0001)           EC.WF	DS	1		; WRITE FAILURE
0014   (0001)           EC.WPV	DS	1		; WRITE PROTECTION VIOLATION
0015   (0001)           EC.WP	DS	1		; DISK WRITE PROTECTED
0016   (0001)           EC.FAP	DS	1		; FILE ALREADY PRESENT
0017   (0001)           EC.DDA	DS	1		; DEVICE DRIVER ABORT
0018   (0001)           EC.FL	DS	1		; FILE LOCKED
0019   (0001)           EC.FAO	DS	1		; FILE ALREADY OPEN
001A   (0001)           EC.IS	DS	1		; ILLEGAL SWITCH
001B   (0001)           EC.UUN	DS	1		; UNKNOWN UNIT NUMBER
001C   (0001)           EC.FNR	DS	1		; FILE NAME REQUIRED
001D   (0001)           EC.DIW	DS	1		; DEVICE IS NOT WRITABLE (OR WRITE LOCKED)
001E   (0001)           EC.UNA	DS	1		; UNIT NOT AVAILABLE
001F   (0001)           EC.ILV	DS	1		; ILLEGAL VALUE
0020   (0001)           EC.ILO	DS	1		; ILLEGAL OPTION
0021   (0001)           EC.VPM	DS	1		; VOLUME PRESENTLY MOUNTED ON DEVICE
0022   (0001)           EC.NVM	DS	1		; NO VOLUME PRESENTLY MOUNTED
0023   (0001)           EC.FOD	DS	1		; FILE OPEN ON DEVICE
0024   (0001)           EC.NPM	DS	1		; NO PROVISIONS MADE FOR REMOUNTING MORE DISKS
0025   (0001)           EC.DNI	DS	1		; DISK NOT INITIALIZED
0026   (0001)           EC.DNR	DS	1		; DISK IS NOT READABLE
0027   (0001)           EC.DSC	DS	1		; DISK STRUCTURE IS CORRUPT
0028   (0001)           EC.NCV	DS	1		; NOT CORRECT VERSION OF HDOS
0029   (0001)           EC.NOS	DS	1		; NO OPERATING SYSTEM MOUNTED
002A   (0001)           EC.IOI	DS	1		; ILLEGAL OVERLAY INDEX
002B   (0001)           EC.OTL	DS	1		; OVERLAY TOO LARGE
002C   (0001)           EC.LAD	DS	1		; File is locked against delete 	/3.0a/
002D   (0001)           EC.FIX	DS	1		; Device media is fixed 		/3.0a/
002E   (0001)           EC.ILA	DS	1		; Illegal Load Address			/3.0a/
002F   (0001)           EC.DNL	DS	1		; Device Not Loaded			/3.0a/
0030   (0001)           EC.DNP	DS	1		; Device Not Locked in Memory		/3.0a/
0031   (0001)           EC.DFM	DS	1		; Device is Fixed in Memory		/3.0a/
0032   (0001)           EC.IDF	DS	1		; Illegal Date Format			/3.0a/
0033   (0001)           EC.ITS	DS	1		; Illegal Time Format			/3.0a/
0034   (0001)           EC.CNR	DS	1		; System Clock Not Resident		/3.0a/
0035   (0001)           EC.SDR	DS	1		; System Disk is Reset			/3.0a/
0036   (0001)           EC.LBO	DS	1		; Line Buffer Overflow			/3.0a/
0037   (0001)           EC.CUI	DS	1		; Can't Unlink from Interrupt Vector	/3.0a/
0038                    	XTEXT	OVLDEF
0038                    	SPACE	4,10
                        **	OVERLAY TABLE ENTRYS.

0000                    	ORG	0

0000   (0002)           OVL.COD DS	2			; FIRST SECTOR OF OVERLAY CODE
0002   (0002)           OVL.SIZ DS	2			; OVERLAY SIZE
0004   (0002)           OVL.ENT DS	2			; OVERLAY ENTRY POINT
0006   (0001)           OVL.FLB DS	1			; OVERLAY FLAG BYTE
0007   (0001)           	DS	1			; DUMMY BYTE TO ROUND TABLE SIZE UP TO 8
      = 0008            OVL.ENS EQU	*			; OVERLAY ENTRY SIZE

                        *	OVERLAY INDICES

0000                    	ORG	0

0000   (0001)           OVL0	DS	1
0001                    	XTEXT	HOSEQU
0001                    	SPACE	4,10
                        **	HDOS SYSTEM EQUIVALENCES.					/3.0a/
                        *

2040                    	ORG	040100A

2040   (0008)           S.EXITA DS	8			; Jump to System Exit

2048   (0010)           D.CON	DS	16			; Disk Constants

      = 2058            SYDD	EQU	*			; System Disk Entry Point

2058   (0048)           D.VEC	DS	24*3			; H17 Disk Vectors
20A0   (001F)           D.RAM	DS	31			; H17 Disk Work Area

20BF   (0024)           S.VAL	DS	36			; SYSTEM VALUES
20E3   (0093)           S.INT	DS	147			; SYSTEM INTERNAL WORK AREAS

2176   (0002)           S.SOVR	DS	2			; STACK OVERFLOW WARNING
2178   (0108)           	DS	042200A-*		; SYSTEM STACK
      = 010A            STACKL	EQU	*-S.SOVR		; STACK SIZE

      = 2280            STACK	EQU	*			; LWA+1 SYSTEM STACK
      = 2280            USERFWA EQU	*			; USER FWA

                        *	Ensure Compatibility

                        	ERRNZ	040130A-SYDD
                        	ERRNZ	040277A-S.VAL
                        	ERRNZ	040343A-S.INT
                        	ERRNZ	042200A-USERFWA
2280                    	XTEXT	HOSDEF
2280                    	SPACE	3,10
                        **	HOSDEF - Define HOS Parameters.
                        *

      = 0030            VERS	equ	3*16+0			; VERSION 3.0			/3.0a/

      = 00FF            SYSCALL equ	377Q			; SYSCALL INSTRUCTION

0000                    	org	0

                        *	Resident Functions

0000   (0001)           .EXIT	ds	1			; EXIT (MUST BE FIRST)
0001   (0001)           .SCIN	ds	1			; SCIN
0002   (0001)           .SCOUT	ds	1			; SCOUT
0003   (0001)           .PRINT	ds	1			; PRINT
0004   (0001)           .READ	ds	1			; READ
0005   (0001)           .WRITE	ds	1			; WRITE
0006   (0001)           .CONSL	ds	1			; SET/CLEAR CONSOLE OPTIONS
0007   (0001)           .CLRCO	ds	1			; CLEAR CONSOLE BUFFER
0008   (0001)           .LOADO	ds	1			; LOAD AN OVERLAY (obsolete)	/3.0a/
0009   (0001)           .VERS	ds	1			; RETURN HDOS VERSION NUMBER
000A   (0001)           .GDA	ds	1			; Get Device Driver Address	/3.0a/
000B   (0001)           .CRC16	ds	1			; CRC a block of memory 	/3.0a/
000C   (0001)           .SYSRES ds	1			; PRECEDING FUNCTIONS ARE RESIDENT


                        *	*HDOSOVL0.SYS*  FUNCTIONS

0020                    	org	40Q

0020   (0001)           .LINK	ds	1			; LINK	(MUST BE FIRST)
0021   (0001)           .CTLC	ds	1			; CTL-C
0022   (0001)           .OPENR	ds	1			; OPENR
0023   (0001)           .OPENW	ds	1			; OPENW
0024   (0001)           .OPENU	ds	1			; OPENU
0025   (0001)           .OPENC	ds	1			; OPENC
0026   (0001)           .CLOSE	ds	1			; CLOSE
0027   (0001)           .POSIT	ds	1			; POSITION
0028   (0001)           .DELET	ds	1			; DELETE
      = 0028            .DELETE equ	.DELET
0029   (0001)           .RENAM	ds	1			; RENAME
      = 0029            .RENAME equ	.RENAM
002A   (0001)           .SETTP	ds	1			; SETTOP
      = 002A            .SETTOP equ	.SETTP
002B   (0001)           .DECODE ds	1			; NAME DECODE
002C   (0001)           .NAME	ds	1			; GET FILE NAME FROM CHANNEL
002D   (0001)           .CLEAR	ds	1			; CLEAR CHAN
002E   (0001)           .CLEARA ds	1			; CLEAR ALL CHANS
002F   (0001)           .ERROR	ds	1			; LOOKUP ERROR
0030   (0001)           .CHFLG	ds	1			; CHANGE FLAGS
0031   (0001)           .DISMT	ds	1			; FLAG SYSTEM DISK DISMOUNTED
0032   (0001)           .LOADD	ds	1			; LOAD DEVICE DRIVER

                        *	*HDOSOVL1.SYS*  FUNCTIONS

0080                    	org	200Q

0080   (0001)           .MOUNT	ds	1			; MOUNT  (MUST BE FIRST)
0081   (0001)           .DMOUN	ds	1			; DISMOUNT
      = 0081            .DMOUNT equ	.DMOUN
0082   (0001)           .MONMS	ds	1			; MOUNT/NO MESSAGE
0083   (0001)           .DMNMS	ds	1			; DISMOUNT/NO MESSAGE
0084   (0001)           .RESET	ds	1			; RESET = DISMOUNT/MOUNT OF UNIT
0085   (0001)           .RESNMS ds	1			; RESET/NO (OR USER) MESSAGE
0086   (0001)           .DAD	ds	1			; Dismount All Disks
0087                    	XTEXT	ASCII
0087                    	SPACE	3,10
                        **	ASCII CHARACTER EQUIVALENCES.

      = 0000            NUL	EQU	000Q			; null
      = 0007            BELL	EQU	007Q			; bell
      = 0008            BKSP	EQU	010Q			; backspace
      = 0008            BS	EQU	BKSP
      = 0009            TAB	EQU	011Q			; horizontal tab
      = 000A            LF	EQU	012Q			; line feed
      = 000A            NL	EQU	012Q			; new line (HDOS)
      = 000C            FF	EQU	014Q			; form feed
      = 000D            CR	EQU	015Q			; carriage return
      = 001B            ESC	EQU	033Q			; escape
      = 007F            DEL	EQU	177Q			; delete

                        *	Specials

      = 0080            EOL	EQU	200Q			; end of line flag
      = 0080            NULL	EQU	200Q			; pad character
      = 0000            NUL2	EQU	0			; ditto
      = 007F            RUBOUT	EQU	DEL			; rubout/delete
      = 0016            C.SYN	EQU	026Q			; SYNC
      = 0002            C.STX	EQU	002Q			; STX
      = 0027            QUOTE	EQU	047Q			; quote character (")
      = 008A            ENL	EQU	NL+EOL			; NL + end-of-line flag

                        *	Control keys

      = 0001            CTLA	EQU	'A'-'@' 		; CTRL/A
      = 0002            CTLB	EQU	'B'-'@' 		; CTRL/B
      = 0003            CTLC	EQU	'C'-'@' 		; CTRL/C
      = 0004            CTLD	EQU	'D'-'@' 		; CTRL/D
      = 0005            CTLE	EQU	'E'-'@' 		; CTRL/E
      = 000F            CTLO	EQU	'O'-'@' 		; CTRL/O
      = 0010            CTLP	EQU	'P'-'@' 		; CTRL/P
      = 0011            CTLQ	EQU	'Q'-'@' 		; CTRL/Q
      = 0012            CTLR	EQU	'R'-'@' 		; CTRL/R
      = 0013            CTLS	EQU	'S'-'@' 		; CTRL/S
      = 0018            CTLX	EQU	'X'-'@' 		; CTRL/X
      = 001A            CTLZ	EQU	'Z'-'@' 		; CTRL/Z
0087                    	XTEXT	ESINT
0087                    	SPACE	4,10
                        **	S.INT - SYSTEM INTERNAL WORKAREA DEFINITIONS.
                        *
                        *	THESE CELLS ARE REFERENCED BY OVERLAYS AND MAIN CODE, AND
                        *	MUST THEREFORE RESIDE IN FIXED LOW MEMORY.

20E3                    	ORG	S.INT

                        **	CONSOLE STATUS FLAGS

20E3   (0001)           S.CDB	DS	1			; CONSOLE DESCRIPTOR BYTE
      = 0000            CDB.H85	EQU	00000000B
      = 0001            CDB.H84 EQU	00000001B		; =0 IF H8-5, =1 IF H8-4
20E4   (0002)           S.BAUD	DS	2			; [0-14]  H8-4 BAUD RATE, =0 IF H8-5
                        *					; [15]	  =1 IF BAUD RATE => 2 STOP BITS

                        **	TABLE ADDRESS WORDS

20E6   (0002)           S.DLINK DS	2			; ADDRESS OF DATA IN HDOS CODE
20E8   (0002)           S.TFWA	DS	2			; FWA Task Table		/3.1a/
20EA   (0002)           S.CFWA	DS	2			; FWA CHANNEL TABLE
20EC   (0002)           S.DFWA	DS	2			; FWA DEVICE TABLE
20EE   (0002)           S.RFWA	DS	2			; FWA RESIDENT HDOS CODE

                        **	DEVICE DRIVER DELAYED LOAD FLAGS

20F0   (0002)           S.DDLDA DS	2			; DRIVER LOAD ADDRESS (HIGH BYTE=0 IF NO LOAD PENDING)
20F2   (0002)           S.DDLEN DS	2			; CODE LENGTH IN BYTES
20F4   (0001)           S.DDGRP DS	1			; GROUP NUMBER FOR DRIVER
20F5   (0001)           	DS	1			; HOLD PLACE
20F6   (0002)           S.DDDTA DS	2			; DEVICE'S ADDRESS IN DEVLST +DEV.RES
20F8   (0001)           S.DDOPC DS	1			; OPEN OPCODE PENDEDING

20F9   (000D)           	DS	13			; reserved

                        *	SYSCALL PROCESSING WORK AREAS

                        	ERRNZ	*-041006A
2106   (0001)           S.CACC	DS	1			; (ACC) UPON SYSCALL
2107   (0001)           S.CODE	DS	1			; SYSCALL INDEX IN PROGRESS

                        *	JUMPS TO ROUTINES IN RESIDENT HDOS CODE

2108   (0000)           S.JUMPS DS	0			; START OF DUMP VECTORS
2108   (0003)           S.SDD	DS	3			; JUMP TO STAND-IN DEVICE DRIVER
210B   (0003)           S.FASER DS	3			; JUMP TO FATSERR (FATAL SYSTEM ERROR)
210E   (0003)           S.DIREA DS	3			; JUMP TO DIREAD (DISK FILE READ)
2111   (0003)           S.FCI	DS	3			; JUMP TO FCI (FETCH CHANNEL INFO)
2114   (0003)           S.SCI	DS	3			; JUMP TO SCI (STORE CHANNEL INFO)
2117   (0003)           S.GUP	DS	3			; JUMP TO GUP (GET UNIT POINTER)

211A   (0001)           S.MOUNT DS	1			; <>0 IF THE SYSTEM DISK IS MOUNTED
211B   (0001)           	DS	1			; reserved			/3.0a/

211C   (0001)           S.BOOTF DS	1			; BOOT FLAGS
      = 0001            BOOT.P	EQU	00000001B		; EXECUTE PROLOGUE UPON BOOTUP

211D   (0003)           	DS	3			; reserved
2120                    	SPACE	4,10
                        **	ACTIVE I/O AREA.
                        *
                        *	THE AIO.XXX AREA CONTAINS INFORMATION ABOUT THE I/O OPERATION
                        *	CURRENTLY BEING PERFORMED. THE INFORMATION IS OBTAINED FROM
                        *	THE CHANNEL TABLE, AND WILL BE RESTORED THERE WHEN DONE.
                        *
                        *	NORMALLY, THE AIO.XXX INFORMATION WOULD BE OBTAINED DIRECTLY
                        *	FROM VARIOUS SYSTEM TABLES VIA POINTER REGISTERS. SINCE THE
                        *	8080 HAS NO GOOD INDEXED ADDRESSING, THE DATA IS MANUALLY
                        *	COPIED INTO THE AIO.XXX CELLS BEFORE PROCESSING, AND
                        *	BACKDATED AFTER PROCESSING.

                        	ERRNZ	*-041040A
2120   (0003)           AIO.VEC DS	3			; JUMP INSTRUCTION
      = 2121            AIO.DDA EQU	*-2			; DEVICE DRIVER ADDRESS
2123   (0001)           AIO.FLG DS	1			; FLAG BYTE
2124   (0002)           AIO.GRT DS	2			; ADDRESS OF GROUP RESERV TABLE
2126   (0001)           AIO.SPG DS	1			; SECTORS PER GROUP
2127   (0001)           AIO.CGN DS	1			; CURRENT GROUP NUMBER
2128   (0001)           AIO.CSI DS	1			; CURRENT SECTOR INDEX
2129   (0001)           AIO.LGN DS	1			; LAST GROUP NUMBER
212A   (0001)           AIO.LSI DS	1			; LAST SECTOR INDEX
212B   (0002)           AIO.DTA DS	2			; DEVICE TABLE ADDRESS
212D   (0002)           AIO.DES DS	2			; DIRECTORY SECTOR
212F   (0002)           AIO.DEV DS	2			; DEVICE CODE
2131   (0001)           AIO.UNI DS	1			; UNIT NUMBER (0-9)

2132   (0017)           AIO.DIR DS	DIRELEN 		; DIRECTORY ENTRY

2149   (0001)           AIO.CNT DS	1			; SECTOR COUNT
214A   (0001)           AIO.EOM DS	1			; END OF MEDIA FLAG
214B   (0001)           AIO.EOF DS	1			; END OF FILE FLAG
214C   (0002)           AIO.TFP DS	2			; TEMP FILE POINTERS
214E   (0002)           AIO.CHA DS	2			; ADDRESS OF CHANNEL BLOCK (IOC.DDA)
2150                    	SPACE	4,10
                        *	these cells set by monitor boot code

2150   (0001)           S.BDA	DS	1			; Boot Device Address (Setup by ROM)
2151   (0002)           S.SCR	DS	2			; SYSTEM SCRATCH AREA ADDRESS
2153   (0003)           	DS	3
2156   (0001)           S.OSI	DS	1			; Operating system index	/3.0a/
2157   (0001)           S.OSO	DS	1			; Operating system occurance	/3.0a/
2158   (0003)           S.OSZ	DS	3			; Operating system sector zero	/3.0a/
215B                    	XTEXT	ESVAL
215B                    	SPACE	4,10
                        **	S.VAL - SYSTEM VALUE DEFINTIONS.
                        *
                        *	THESE VALUES ARE SET AND MAINTAINED BY THE SYSTEM.
                        *
                        *	THE DECK HOSEQU MUST BE MODIFIED WHEN THIS IS MODIFIED.

20BF                    	ORG	S.VAL

20BF   (0009)           S.DATE	DS	9			; SYSTEM DATE (IN ASCII)
20C8   (0002)           S.DATC	DS	2			; CODED DATE
20CA   (0003)           S.TIME	DS	3			; TIME (BCD HH MM SS)		/3.0a/
20CD   (0001)           S.CLKTR DS	1			; 0 if no clock task resident	/3.0a/
20CE   (0002)           S.HIMEM DS	2			; HARDWARE HIGH MEMORY ADRESS+1

20D0   (0002)           S.SYSM	DS	2			; FWA RESIDENT SYSTEM

20D2   (0002)           S.USRM	DS	2			; LWA USER MEMORY

20D4   (0002)           	DS	2			; obsolete (must be zero!!)	/3.0a/
20D6                    	SPACE	3,10
                        **	THE FOLLOWING CELLS SHOULD BE MODIFIED/READ ONLY VIA THE .CONSL SCALL

      = 0080            CSL.ECH EQU	10000000B		; SUPPRESS ECHO
      = 0004            CSL.RAW EQU	00000100B		; Raw Mode I/O
      = 0002            CSL.WRP EQU	00000010B		; WRAP LINES AT WIDTH
      = 0001            CSL.CHR EQU	00000001B		; OPERATE IN CHARACTER MODE

      = 0000            I.CSLMD EQU	0			; S.CSLMD IS FIRST BYTE
20D6   (0001)           S.CSLMD DS	1			; CONSOLE MODE


      = 0080            CTP.BKS EQU	10000000B		; TERMINAL PROCESSES BACKSPACES
      = 0040            CTP.FF	EQU	01000000B		; Terminal Processes Form-Feed
      = 0020            CTP.MLI EQU	00100000B		; MAP LOWER CASE TO UPPER ON INPUT
      = 0010            CTP.MLO EQU	00010000B		; MAP LOWER CASE TO UPPER ON OUTPUT
      = 0008            CTP.2SB EQU	00001000B		; TERMINAL NEEDS TWO STOP BITS
      = 0004            CTP.HHS EQU	00000100B		; Terminal uses hdwr handshake	/3.0a/
      = 0002            CTP.BKM EQU	00000010B		; MAP BKSP (UPON INPUT) TO RUBOUT
      = 0001            CTP.TAB EQU	00000001B		; TERMINAL SUPPORTS TAB CHARACTERS

      = 0001            I.CONTY EQU	1			; S.CONTY IS 2ND BYTE
                        	ERRNZ	*-S.CSLMD-I.CONTY
20D7   (0001)           S.CONTY DS	1			; CONSOLE TYPE FLAGS


      = 0002            I.CUSOR EQU	2			; S.CUSOR IS 3RD BYTE
                        	ERRNZ	*-S.CSLMD-I.CUSOR
20D8   (0001)           S.CUSOR DS	1			; CURRENT CURSOR POSITION


      = 0003            I.CONWI EQU	3			; S.CONWI IS 4TH BYTE
                        	ERRNZ	*-S.CSLMD-I.CONWI
20D9   (0001)           S.CONWI DS	1			; CONSOLE WIDTH


      = 0001            CO.FLG	EQU	00000001B		; CTL-O FLAG
      = 0080            CS.FLG	EQU	10000000B		; CTL-S FLAG

      = 0004            I.CONFL EQU	4			; S.CONFL IS 5TH BYTE
                        	ERRNZ	*-S.CSLMD-I.CONFL
20DA   (0001)           S.CONFL DS	1			; CONSOLE FLAGS


20DB   (0002)           S.CAADR DS	2			; ADDRESS FOR ABORT PROCESSING (>256 IF VALID)
20DD   (0006)           S.CCTAB DS	6			; ADDR FOR CTL-A, CTL-B, CTL-C PROCESSING
20E3                    	XTEXT	DDDEF
20E3                    	SPACE	3,10
                        **	DEVICE DRIVER COMMUNICATION FLAGS.
                        *

0000                    	ORG	0

0000   (0001)           DC.REA	DS	1			; READ
0001   (0001)           DC.WRI	DS	1			; WRITE
0002   (0001)           DC.RER	DS	1			; READ REGARDLESS
0003   (0001)           DC.OPR	DS	1			; OPEN FOR READ
0004   (0001)           DC.OPW	DS	1			; OPEN FOR WRITE
0005   (0001)           DC.OPU	DS	1			; OPEN FOR UPDATE
0006   (0001)           DC.CLO	DS	1			; CLOSE
0007   (0001)           DC.ABT	DS	1			; ABORT
0008   (0001)           DC.MOU	DS	1			; MOUNT DEVICE
0009   (0001)           DC.LOD	DS	1			; LOAD DEVICE DRIVER
000A   (0001)           DC.RDY	DS	1			; Device Ready
000B   (0001)           DC.SET	DS	1			; Update SET parameters 	/3.0a/
000C   (0001)           DC.UNL	DS	1			; Unload device driver		/3.0a/
000D   (0001)           DC.INT	DS	1			; Interrupt			/3.0a/
000E   (0001)           DC.DSF	DS	1			; Device-specific function	/3.0a/
000F   (0001)           DC.MAX	DS	1			; MAXIMUM ENTRY INDEX
0010                    	XTEXT	MTR
0010                    MTR	SPACE	4,10
                        **	MTR - PAM/8 EQUIVALENCES.
                        *
                        *	THIS DECK CONTAINS SYMBOLIC DEFINITIONS USED TO
                        *	MAKE USE OF THE PAM/8 CODE.
0010                    	SPACE	3,10
                        **	IO PORTS

      = 00F0            IP.PAD	EQU	360Q			; PAD INPUT PORT
      = 00F0            OP.CTL	EQU	360Q			; CONTROL OUTPUT PORT
      = 00F0            OP.DIG	EQU	360Q			; DIGIT SELECT OUTPUT PORT
      = 00F1            OP.SEG	EQU	361Q			; SEGMENT SELECT OUTPUT PORT
      = 00F2            IP.CON	EQU	362Q			; H-88/H-89/HA-8-8 Configuration
      = 00F2            OP2.CTL EQU	362Q			; H-88/H-89/HA-8-8 Control Port
0010                    	SPACE	3,10
                        **	MONITOR IDENTIFICATION FLAGS
                        *
                        *	THESE BYTES IDENTIFY THE ROM MONITOR.
                        *	THEY ARE THE VARIOUS VALUES OF LOCATION .IDENT

      = 0011            M.PAM8	EQU	021Q			; 'LXI' INSTRUCTION AT 0 IN PAM-8
      = 00C3            M.FOX	EQU	303Q			; 'JMP' INSTRUCTION AT 0 IN FOX ROM
0010                    	SPACE	4,10
                        **	Configuration Flags
                        *
                        *	These bits are read in IP.CON.
                        *

      = 0003            CN.174M EQU	00000011B		; Port 174Q Device-Type Mask
      = 000C            CN.170M EQU	00001100B		; Port 170Q Device-Type Mask
      = 0010            CN.PRI	EQU	00010000B		; Primary/Secondary:  1=>primary == 170Q
      = 0020            CN.MEM	EQU	00100000B		; Memory Test/Normal Switch:  0=>Test; 1=>Normal
      = 0040            CN.BAU	EQU	01000000B		; Baud Rate:  0=>9600; 1=>19,200
      = 0080            CN.ABO	EQU	10000000B		; Auto-Boot:  1=>Auto-Boot

      = 0000            CND.H17 EQU	00B			; H-17 Disk, Valid only in CN.174M
      = 0000            CND.NDI EQU	00B			; No Device Installed
      = 0001            CND.H47 EQU	01B			; H-47 Disk
0010                    	SPACE	4,10
                        **	ROUTINE ENTRY POINTS.
                        *

      = 002B            .DLY	EQU	000053A 		; DELAY

                        *	All following entry points are unavailable under HDOS 3.0

                        *.IDENT EQU	000000A 		; IDENTIFICATION LOCATION
                        *.LOAD	EQU	001267A 		; TAPE LOAD
                        *.DUMP	EQU	001374A 		; TAPE DUMP
                        *.ALARM	EQU	002136A 		; ALARM ROUTINE
                        *.HORN	EQU	002140A 		; HORN
                        *.CTC	EQU	002172A 		; CHECK TAPE CHECKSUM
                        *.TPERR	EQU	002205A 		; TAPE ERROR ROUTINE
                        *.PCHL	EQU	002264A 		; PCHL INSTRUCTION
                        *.SRS	EQU	002265A 		; SCAN RECORD START
                        *.RNP	EQU	002325A 		; READ NEXT PAIR
                        *.RNB	EQU	002331A 		; READ NEXT BYTE
                        *.CRC	EQU	002347A 		; CRC-16 CALCULATOR
                        *.WNP	EQU	003017A 		; WRITE NEXT PAIR
                        *.WNB	EQU	003024A 		; WRITE NEXT BYTE
                        *.DOD	EQU	003122A 		; DECODE FOR OCTAL DISPLAY
                        *.RCK	EQU	003260A 		; READ CONSOLE KEYSET
                        *.DODA	EQU	003356A 		; SEGMENT CODE TABLE
0010                    	XTEXT	DDFDEF
0010                    	SPACE	3,10
                        **	DIRECTORY DEVICE FORMAT DEFINITION.
                        *

0000                    	ORG	0

0000   (0009)           DDF.BOO DS	9			; 2K BOOT PROGRAM
      = 0009            DDF.BOL EQU	*			; LENGTH OF BOOT
0009   (0001)           DDF.LAB DS	1			; LABEL SECTOR
000A   (0000)           DDF.USR DS	0			; BEGINNING OF OPEN SPACE
000A                    	XTEXT	LABDEF
000A                    	SPACE	3,10
                        **	DISK LABEL SECTOR FORMATS.

0000                    	ORG	0

0000   (0001)           LAB.SER DS	1			; SERIAL NUMBER OF VOLUME
0001   (0002)           LAB.IND DS	2			; INITIALIZATION DATE
0003   (0002)           LAB.DIS DS	2			; SECTOR NUMBER OF 1ST DIRECTORY SECTOR
0005   (0002)           LAB.GRT DS	2			; INDEX OF GRT SECTOR
0007   (0001)           LAB.SPG DS	1			; SECTORS PER GROUP

      = 0000            LAB.DAT EQU	0			; DATA VOLUME ONLY
      = 0001            LAB.SYS EQU	1			; SYSTEM VOLUME
      = 0002            LAB.NOD EQU	2			; VOLUME HAS NO DIRECTORY

0008   (0001)           LAB.VLT DS	1			; VOLUME TYPE
0009   (0001)           LAB.VER DS	1			; VERSION OF INIT17 THAT INITED DISK

000A   (0002)           LAB.RGT DS	2			; RGT sector number

      = 000C            LAB.VPR EQU	*			; Volume dependant data
000C   (0002)           LAB.SIZ DS	2			;  Volume Size (Bytes/256)
000E   (0002)           LAB.PSS DS	2			;  Physical Sector Size
0010   (0001)           LAB.VFL DS	1			;  Volume dependant Flags
      = 0001            VFL.NSD EQU	00000001B		;   Number of Sides:  1 => 2
      = 0002            VFL.DTD EQU	00000010b		;   96 tracks per inch		/3.0a/
      = 0002            VFL.80T EQU	VFL.DTD 		;   (ditto)
      = 0004            VFL.FIX EQU	00000100b		;   Media is fixed		/3.0a/
      = 0005            LAB.VPL EQU	*-LAB.VPR		; Length of volume dependant data

                        	ERRMI	5-LAB.VPL
0011   (0000)           	DS	5-LAB.VPL		; Reserved

0011   (003C)           LAB.LAB DS	60			; LABEL
      = 003C            LAB.LBL EQU	*-LAB.LAB		; LABEL LENGTH
004D   (0002)           	DS	2			; Reserved for 0 bytes

      = 004F            LAB.AUX EQU	*			; Auxiliary Data
004F   (0001)           LAB.SPT DS	1			;  Sectors per Track
      = 0001            LAB.AXL EQU	*-LAB.AUX		; Length of Aux. Data

0050   (0002)           LAB.LVN DS	2			; Long volume number		/3.0a/
0052                    	XTEXT	FILDEF
0052                    	SPACE	4,10
                        **	FILDEF - FILE TYPE DEFINITIONS.
                        *
                        *	DB	377Q,FT.XXX

      = 0000            FT.ABS	EQU	0			; ABSOLUTE BINARY
      = 0001            FT.PIC	EQU	1			; POSITION INDEPENDANT CODE
      = 0002            FT.REL	EQU	2			; RELOCATABLE CODE
      = 0003            FT.BAC	EQU	3			; COMPILED BASIC CODE
0052                    	XTEXT	ABSDEF
0052                    ABSDEF	SPACE	3,10
                        **	ABS FORMAT EQUIVALENCES.

0000                    	ORG	0

0000   (0001)           ABS.ID	DS	1	;377Q = BINARY FILE FLAG
0001   (0001)           	DS	1	;FILE TYPE (FT.ABS)
0002   (0002)           ABS.LDA	DS	2	;LOAD ADDRESS
0004   (0002)           ABS.LEN	DS	2	;LENGTH OF ENTIRE RECORD
0006   (0002)           ABS.ENT	DS	2	;ENTRY POINT

0008   (0000)           ABS.COD	DS	0	;CODE STARTS HERE
0008                    	STL	'Structures'
0008                    	EJECT
                        **	Structure Definitions

0000                    	ORG	0

0000   (0006)           DEFAULT	DS	6	;Default device descriptor

0006   (0002)           DEVTAB	DS	2	;Device Table Address Pointer

0008   (0003)           DRIVER	DS	3	;Driver Entry Point

000B   (0001)           UNIT	DS	1	;Unit Number

000C   (0005)           DEVICE	DS	IOC.DIR-IOC.DEV+2;Device Specifier

      = 0011            DVCLEN	EQU	*
0011                    	STL	'MAIN ROUTINE'
0011                    	EJECT

2280                    	ORG	USERFWA

                        *	COMMAND INTERPRETATION COMES HERE

2280  31 8022           START	LXI	SP,STACK;CLEAN STACK

2283  AF                	XRA	A
2284  32 6B30           	STA	VOLFLAG ;Initialize Source Mounted
2287  CD C927           	CALL	MSD.	;Mount Source Diskette
228A  2A 2933           	LHLD	SRCLAB+LAB.SER
228D  26 00             	MVI	H,0
228F  3E 08             	MVI	A,DC.MOU
2291  CD A02E           	CALL	SRCDRVR ;Call source driver
2294  DA 3B2A           	JC	ERROR

2297  3A 6530           	LDA	DRIVES2
229A  A7                	ANA	A	;'NZ' => 2-Drive Sysgen
229B  C4 1227           	CNZ	MDD	;Mount Destination Diskette

                        *	CLEAR CHANNELS AND FILE BUFFER

229E  FF 2E             	SCALL	.CLEARA	;CLEAR CHANNELS

22A0  21 0000           	LXI	H,0
22A3  22 6230           	SHLD	BUFSIZ	;EMPTY BUFFER
22A6  22 B830           	SHLD	NAMTLEN	;CLEAR NAMTAB
22A9  22 BA30           	SHLD	NAMTMAX	;CLEAR NAMTAB AREA
22AC  21 5435           	LXI	H,BUFF
22AF  22 6030           	SHLD	BUFPTR	;SET BUFFER AGAINST END OF NAMTAB

                        *	Copy the files

22B2  3A 6930           	LDA	QUERY
22B5  F5                	PUSH	PSW	;Save Query Flag
22B6  AF                	XRA	A
22B7  32 6930           	STA	QUERY	;Force NO Query on required files
22BA  CD 0A23           	CALL	CRF	;Copy Required Files
22BD  CD 5923           	CALL	CSD	;Copy System Device Drivers
22C0  F1                	POP	PSW
22C1  32 6930           	STA	QUERY	;Restore Query Flag
22C4  CD 7329           	CALL	SSL	;Set the Sysgened flag in label
22C7  CD CE23           	CALL	COF	;Copy Optional Files

                        *	Type File Count

22CA  3A 9D24           	LDA	OCOPYC	;(A) = FILE COUNT
22CD  06 00             	MVI	B,0	;(BC) = COUNT OF FILES COPIED
22CF  4F                	MOV	C,A

22D0  3E 03             	MVI	A,3
22D2  21 DC22           	LXI	H,SYSA
22D5  CD CB2F           	CALL	$UDDN	;UNPACK COUNT INTO MESSAGE
22D8  CD 5E19           	CALL	$TYPTX
22DB  0A                	DB	NL
22DC  585858            SYSA	DB	'XXX'
22DF  2046696C 65732043 	DB	' Files Copied',ENL
22E7  6F706965 648A

                        *	Dismount all Disks

22ED  21 8730           	LXI	H,DEST+DEVICE
22F0  FF 83             	SCALL	.DMNMS
22F2  21 9830           	LXI	H,SOURCE+DEVICE;Ignore any possible errors
22F5  FF 83             	SCALL	.DMNMS

22F7  AF                	XRA	A
22F8  C3 0023           	JMP	EXIT.	;GRACEFUL EXIT

                        **	NO RESTARTING ALLOWED

      = 22FB            RESTART	EQU	*

22FB  C3 FE22           	JMP	EXIT	;EXIT

                        *	CTL-D HIT

22FE  3E 01             EXIT	MVI	A,1	;FLAG ABORT
2300  FF 00             EXIT.	SCALL	.EXIT	;EXIT TO  *HDOS*
2302                    CCHIT	SPACE	3,10
                        **	CCHIT - CTL-C HIT
                        *
                        *	ENTRY	FROM SYSTEM


2302  CD 5E19           CCHIT	CALL	$TYPTX
2305  5EC3              	DB	'^','C'+200Q
2307  C3 FE22           	JMP	EXIT	;BOOT IT
230A                    	STL	'SYSGEN - COPY FILES BETWEEN VOLUMES.'
230A                    	EJECT
230A                    CRF	SPACE	4,10
                        ***	CRF	- Copy Required Files
                        *
                        *	CRF copies the required HDOS files accross to the
                        *	destination device.  Once they are copied accross,
                        *	they must be flagged illegal for subsequent operations
                        *	since we want to use the *.SYS wild-card specification
                        *	later on.
                        *
                        *	NOTE:	The files listed in CRFA must also be
                        *		specified in CSFA.
                        *

230A  3A 7C2B           CRF	LDA	CSFB
230D  F5                	PUSH	PSW
230E  AF                	XRA	A
230F  32 7C2B           	STA	CSFB	;Flag these files valid for now

2312  3E 01             	MVI	A,1
2314  32 AF24           	STA	OCOPYF	;copy contiguous
2317  21 2C23           	LXI	H,CRFA
231A  CD 5324           	CALL	OCOPY	;Copy required files

231D  AF                	XRA	A
231E  32 AF24           	STA	OCOPYF	;not contiguous
2321  21 4223           	LXI	H,CRFB
2324  CD 5324           	CALL	OCOPY

2327  F1                	POP	PSW
2328  32 7C2B           	STA	CSFB	;Flag the files not valid
232B  C9                	RET

232C  2A2E2A3D 48444F53 CRFA	DB	'*.*=HDOS30.SYS,TT.DVD',0
2334  33302E53 59532C54
233C  542E4456 4400
2342  2A2E2A3D 53595343 CRFB	DB	'*.*=SYSCMD.SYS,PIP.ABS',0
234A  4D442E53 59532C50
2352  49502E41 425300
2359                    CSD	SPACE	4,10
                        ***	CSD	- Copy System Drivers
                        *
                        *	CSD copies the system device drivers across.  It
                        *	would be nice if this could be combined with the
                        *	previous required files, however, to avoid rename
                        *	difficulties, these files are handled individually.
                        *
                        *	IF destination device name == source device name
                        *	  THEN
                        *	    just copy SY.DVD
                        *	  ELSE
                        *	    DEST:SY.DVD=SOURCE:DEST.DVD
                        *	    DEST:DEST.DVD=SOURCE:SY.DVD
                        *

2359  3E 01             CSD	MVI	A,1
235B  32 AF24           	STA	OCOPYF	;copy contiguous

235E  2A 9830           	LHLD	SOURCE+DEVICE
2361  EB                	XCHG			DE;= Source Device
2362  2A 8730           	LHLD	DEST+DEVICE;HL = Destination Device
                        	ERRNZ	IOC.UNI-IOC.DEV-2
2365  CD 8E18           	CALL	$CDEHL
2368  C2 8123           	JNZ	CSD1	;DE != HL

                        *	Devices are equal

236B  3A A82B           	LDA	CSFC
236E  F5                	PUSH	PSW
236F  AF                	XRA	A
2370  32 A82B           	STA	CSFC	;Flag this device valid temporarily
2373  32 B32B           	STA	CSFD	;Only 1 driver copied

2376  21 A723           	LXI	H,CSDA
2379  CD 5324           	CALL	OCOPY

237C  F1                	POP	PSW
237D  32 A82B           	STA	CSFC	;Re-Flag SY: Illegal
2380  C9                	RET

                        *	Devices are not equal

2381  22 B923           CSD1	SHLD	CSDC	;Set Destination Device
2384  22 C023           	SHLD	CSDD
2387  22 B32B           	SHLD	CSFD	;Set Destination Driver Illegal for later
238A  3A A82B           	LDA	CSFC
238D  F5                	PUSH	PSW
238E  AF                	XRA	A
238F  32 A82B           	STA	CSFC	;Flag these valid for now

2392  21 B223           	LXI	H,CSDB
2395  CD 5324           	CALL	OCOPY

2398  AF                	XRA	A
2399  32 AF24           	STA	OCOPYF	;copy non-contiguous
239C  21 C023           	LXI	H,CSDD
239F  CD 5324           	CALL	OCOPY

23A2  F1                	POP	PSW
23A3  32 A82B           	STA	CSFC
23A6  C9                	RET

23A7  2A2E2A3D 53592E44 CSDA	DB	'*.*=SY.DVD',0
23AF  564400

23B2  53592E44 56443D   CSDB	DB	'SY.DVD='	;Copy System Device
23B9  78782E44 564400   CSDC	DB	'xx.DVD',0

23C0  78782E44 56443D53 CSDD	DB	'xx.DVD=SY.DVD',0;Copy destination device over
23C8  592E4456 4400
23CE                    COF	SPACE	4,10
                        ***	COF	- Copy Optional Files
                        *
                        *	COF copies the optional files accross to the
                        *	destination diskette.  If  *MINIMAL*  has been
                        *	specified, no additional files are copied.
                        *	Otherwise, the default command line is used unless
                        *	a command line was specified at run time.

23CE  3A 6830           COF	LDA	MINIMUM
23D1  A7                	ANA	A
23D2  C0                	RNZ			Minimum;switch is set

23D3  32 AF24           	STA	OCOPYF	;copy non-contiguous

23D6  3A 6430           	LDA	CMDLIN
23D9  A7                	ANA	A
23DA  C2 E323           	JNZ	COF1	;Command line specified

                        *	No command line specified

23DD  21 E923           	LXI	H,COFA
23E0  C3 5324           	JMP	OCOPY	;Normal extra files

                        *	Command Line specified

23E3  21 BE30           COF1	LXI	H,OFILES
23E6  C3 5324           	JMP	OCOPY	;All files with query

23E9  2A2E2A3D 2A2E5359 COFA	DB	'*.*=*.SYS,SET.ABS,*.DVD,SYSHELP.DOC,HELP.',0
23F1  532C5345 542E4142
23F9  532C2A2E 4456442C
2401  53595348 454C502E
2409  444F432C 48454C50
2411  2E00
2413  AAAAAAAA AAAAAAAA 	DC	64,#0AAH
241B  AAAAAAAA AAAAAAAA
2423  AAAAAAAA AAAAAAAA
242B  AAAAAAAA AAAAAAAA
2433  AAAAAAAA AAAAAAAA
243B  AAAAAAAA AAAAAAAA
2443  AAAAAAAA AAAAAAAA
244B  AAAAAAAA AAAAAAAA
2453                    	EJECT
2453                    SYSGEN	SPACE	4,10
                        ***	SYSGEN - COPY FILES BETWEEN TWO VOLUMES, WITH ONLY ONE
                        *	DRIVE.
                        *
                        *	(AND FOR MY NEXT TRICK...)
                        *
                        *	OCOPY COPIES FILES BETWEEN TWO VOLUMES BY ALTERNATING BETWEEN
                        *	TWO PHASES, THE READ PHASE AND THE WRITE PHASE.
                        *
                        *	READ PHASE:
                        *
                        *	DURING THE READ PHASE, THE SOURCE DISK IS MOUNTED. SOURCE FILES ARE
                        *	OPENED IN THE ORDER OF THEIR APPEARANCE. FOR EACH OPENED
                        *	FILE, A 'FILE DESCRIPTOR NODE' *FDN* IS ADDED  TO  THE ACTIVE
                        *	CHAIN. THEN, AS MUCH AS THE FILE AS POSSIBLE IS READ INTO MEMORY.
                        *
                        *	THE PROCESS CONTINUES UNTIL
                        *		1) THERE IS NO MORE FREE RAM
                        *		2) OR, THERE ARE NO MORE FILE DESCRIPTOR NODES IN THE FREE CHAIN
                        *		3) OR, THERE ARE NO MORE FILES IN NAMTAB (INPUT FILE LIST)
                        *
                        *
                        *	WRITE PHASE
                        *
                        *	DURING THE WRITE PHASE, THE DESTINATION DISK IS MOUNTED. THE NODES
                        *	ARE TAKEN FROM THE ACTIVE CHAIN, AND PROCESSED. IF THE FILE HAD
                        *	BEEN PARTIALLY WRITTEN THE LAST PASS, IT IS  RE-OPENED AND POSITIONED.
                        *	IF THERE IS NOT MORE DATA TO READ FOR A PROCESSED
                        *	NODE, IT IS REMOVED, AND THE CORRESPONDING ENTRY IN NAMTAB IS DELETED.
                        *
                        *	WRITE PHASE CONTINUES UNTIL
                        *
                        *		1) THERE ARE NO MORE FILE NODES IN THE ACTIVE LIST
                        *		2) OR, THE FIRST (AND ONLY) ENTRY IN THE LIST HAS NO
                        *		   MORE DATA IN MEMORY, BUT HAS NOT BEEN COMPLETELY READ.
                        *
                        *	OCOPY EXITS WITH THE DESTINATION DISK MOUNTED.
                        *
                        *	ENTRY:	HL	= Line Pointer
                        *
                        *	EXIT:	OCOPYC	= Number of files copied
                        *

      = 2453            OCOPY	EQU	*
2453  22 6630           	SHLD	LINEP	;Initialize Line Pointer
2456  CD CA26           	CALL	IFL	;INITIALIZE  FDN LISTS
2459  CD CD2B           	CALL	DDF	;DECODE DESTINATION FILE
245C  DA 3B2A           	JC	ERROR	;ERROR
245F  32 9C24           	STA	OCOPYA	;SAVE DESTINATION TYPE

2462  CD 9F27           	CALL	MSD	;Mount Source to build list

2465  AF                	XRA	A	;ALLOW *.*
2466  CD D82A           	CALL	BSL	;BUILD SOURCE FILE LIST
2469  DA 3B2A           	JC	ERROR
246C  CD 522F           	CALL	$MOVEL
246F  1100              	DW	OCOPYDL
2471  A730              	DW	DESTFB+FB.NAM
2473  9E24              	DW	OCOPYD	;SAVE WILDCARD DESTINATION
2475  CD E82C           	CALL	EBM	;EXPAND BUFFER TO MAX

                        *	START READ PHASE

2478  3A 6130           OCOPY1	LDA	BUFPTR+1;(A) = BUFFER FWA/256
247B  3C                	INR	A	;ROUND UP TO NEXT PAGE
247C  32 5F30           	STA	OBUFPTR	;SET SECTOR BUFFER  FWA/256

247F  CD 9F27           	CALL	MSD	;Mount Source Diskette
2482  CD B024           	CALL	RPH	;Read Data
2485  CD 1227           	CALL	MDD	;Mount Destination Diskette
2488  CD D325           	CALL	WPH	;Write Data

248B  2A FC2F           	LHLD	FDNHED
248E  7C                	MOV	A,H
248F  B5                	ORA	L
2490  C2 7824           	JNZ	OCOPY1	;Source files in List

2493  2A B830           	LHLD	NAMTLEN
2496  7C                	MOV	A,H
2497  B5                	ORA	L
2498  C2 7824           	JNZ	OCOPY1	;MORE NAMES IN LIST

                        *	ALL DONE

249B  C9                	RET

249C  00                OCOPYA	DB	0	;DESTINATION FILE WILDCARD FLAG (=0 IF WC)
249D  00                OCOPYC	DB	0	;FILES COPIED COUNT
249E  00000000 00000000 OCOPYD	DC	FB.NAML,#0;HOLD AREA FOR WILDCARD DESTINATION
24A6  00000000 00000000
24AE  00
      = 0011            OCOPYDL	EQU	*-OCOPYD

24AF  00                OCOPYF	DB	0	;NZ IF TO COPY CONTIGUOUS
24B0                    	STL	'SYSGEN SUBROUTINES'
24B0                    	EJECT
24B0                    RPH	SPACE	4,10
                        **	RPH - READ PHASE.
                        *
                        *	RPH  HANDLES THE READ PHASE OF THE COPY PROCESS.
                        *
                        *	IT IS ENTERED WITH THE NAMTAB AND FDN TABLE SETUP, AND
                        *	WITH THE SOURCE DISK MOUNTED.
                        *
                        *	READ PHASE:
                        *
                        *	DURING THE READ PHASE, THE SOURCE DISK IS MOUNTED. SOURCE FILES ARE
                        *	OPENED IN THE ORDER OF THEIR APPEARANCE. FOR EACH OPENED
                        *	FILE, A 'FILE DESCRIPTOR NODE' *FDN* IS ADDED  TO  THE ACTIVE
                        *	CHAIN. THEN, AS MUCH AS THE FILE AS POSSIBLE IS READ INTO MEMORY.
                        *
                        *	THE PROCESS CONTINUES UNTIL
                        *		1) THERE IS NO MORE FREE RAM
                        *		2) OR, THERE ARE NO MORE FILE DESCRIPTOR NODES IN THE FREE CHAIN
                        *		3) OR, THERE ARE NO MORE FILES IN NAMTAB (INPUT FILE LIST)
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL


      = 24B0            RPH	EQU	*


                        *	SEE IF ANY MEMORY TO HAVE

24B0  CD BB26           	CALL	CBR	;COMPUTE BUFFER ROOM
24B3  C8                	RZ			NONE

                        *	SEE IF WE NEED TO READ SOME MORE INTO A PART-COPIED FILE

24B4  2A FC2F           	LHLD	FDNHED	;HL = Head of LIST
24B7  7C                	MOV	A,H
24B8  B5                	ORA	L
24B9  CA C924           	JZ	RPH1	;LIST is empty

24BC  CD 072F           	CALL	$INDLB	;A  = status
24BF  0200              	DW	FDN.STA
24C1  E6 02             	ANI	ST.OPR
24C3  11 5435           	LXI	D,NAMTAB
24C6  C2 1925           	JNZ	RPH2.5	;FILE IS INCOMPLETELY READ

                        *	SEE IF ANY FREE FILE DESCRIPTOR NODES TO USE

24C9  2A FA2F           RPH1	LHLD	FDNFREE ;HL = Head of FREE list
24CC  7C                	MOV	A,H
24CD  B5                	ORA	L
24CE  C8                	RZ			free;list is empty

                        *	SEE IF THERE IS A FILE IN NAMTAB WITHOUT AN ENTRY IN FNDLIST.
                        *	SINCE THE FIRST ENTRY IN FDNLIST CORRESPONDS TO THE FIRST IN
                        *	NAMTAB, ETC., WE'LL JUST RUN DOWN FDNLIST UNTIL THE END, AND
                        *	THE NEXT NAMTAB FILE WILL BE THE ONE WE WANT...

24CF  01 1100           	LXI	B,FB.NAML;(BC) = ENTRY SIZE IN NAMTAB
24D2  11 0000           	LXI	D,0	;(DE) = POINTER INTO NAMTAB
24D5  21 FC2F           	LXI	H,FDNHED;HL = head of FILE list

24D8  E5                RPH2	PUSH	H
24D9  CD 8918           	CALL	$HLIHL	;HL = next node
                        	ERRNZ	FDN.LNK
24DC  7C                	MOV	A,H
24DD  B5                	ORA	L
24DE  E1                	POP	H
24DF  CA EB24           	JZ	RPH2.2	;At the end of the list

24E2  CD 8918           	CALL	$HLIHL	;HL = next node
                        	ERRNZ	FDN.LNK
24E5  EB                	XCHG
24E6  09                	DAD	B	;ADVANCE POINTER INTO NAMTAB
24E7  EB                	XCHG
24E8  C3 D824           	JMP	RPH2

24EB  E5                RPH2.2	PUSH	H	;(HL) = ADDRESS OF LAST NODE
24EC  2A B830           	LHLD	NAMTLEN
24EF  CD 8E18           	CALL	$CDEHL	;SEE IF HAVE ACCOUNTED FOR ALL NAMTAB ENTRYS
24F2  E1                	POP	H
24F3  C8                	RE			FILES;ALL USED UP

                        *	HAVE ROOM FOR DATA, HAVE A NODE FOR THE FILE COUNTS, AND
                        *	HAVE A FILE NAME. ALL SET FOR BUSINESS..
                        *
                        *	(DE) = INDEX INTO NAMTAB FOR FILE
                        *	(HL) = NODE ADDRESS OF LAST ENTRY IN LIST
                        *

                        *	CHAIN THE FIRST FREE NODE ONTO THE END OF THE LIST

24F4  D5                	PUSH	D
24F5  E5                	PUSH	H
24F6  2A FA2F           	LHLD	FDNFREE ;HL = FREE node

24F9  E5                	PUSH	H
24FA  CD 8918           	CALL	$HLIHL	;HL = address of next node
                        	ERRNZ	FDN.LNK
24FD  22 FA2F           	SHLD	FDNFREE ;Update FREE list head
2500  D1                	POP	D	;DE = address of new node

2501  E1                	POP	H	;HL = address of TAIL of list
2502  CD 182F           	CALL	$INDS	;tail points to the new node
2505  0000              	DW	FDN.LNK
2507  EB                	XCHG			HL;= address of new node
2508  D1                	POP	D	;DE = address in name table

2509  06 0C             	MVI	B,FDNELEN
250B  E5                	PUSH	H	;SAVE NODE ADDRESS
250C  CD 8A19           	CALL	$ZERO	;ZERO ENTIRE NODE, INCLUDING CHAIN (NOW AT END)
250F  01 5435           	LXI	B,NAMTAB
2512  EB                	XCHG
2513  09                	DAD	B	;(HL) = ADDRESS OF NAMTAB ENTRY
2514  22 BC30           	SHLD	NAMTPTR	;POINTER TO CURRENT NAMTAB ENTRY
2517  EB                	XCHG
2518  E1                	POP	H

                        *	READY TO OPEN FILE
                        *
                        *	(DE) = NAMTAB ENTRY ADDRESS
                        *	(HL) = #FDN.LNK OF ENTRY

2519  23                RPH2.5	INX	H
251A  23                	INX	H	;HL = &FDN.STA
                        	ERRNZ	FDN.STA-FDN.LNK-2
251B  E5                	PUSH	H	;SAVE ADDRESS
251C  EB                	XCHG
251D  AF                	XRA	A
                        	ERRNZ	CN.SOU	;(A) = SOURCE CHANNEL NUMBER
251E  FF 22             	SCALL	.OPENR	;OPEN
2520  DA 9F29           	JC	NAMERR	;ERROR
2523  D1                	POP	D
2524  1A                	LDAX	D	;(A) = FDN.STA
2525  E6 02             	ANI	ST.OPR
2527  D5                	PUSH	D	;SAVE ADDRESS
2528  C2 7C25           	JNZ	RPH3	;ALREADY OPENED IN PREVIOUS PASSES

                        *	FIRST TIME THIS FILE HAS BEEN OPENED. GET FLAGS.

252B  21 9D24           	LXI	H,OCOPYC
252E  34                	INR	M
252F  1A                	LDAX	D
2530  F6 02             	ORI	ST.OPR	;SET OPEN FOR READ
2532  12                	STAX	D
2533  D5                	PUSH	D	;SAVE #FDN.STA
2534  2A EA20           	LHLD	S.CFWA	;(HL) = CHANNEL 0 FWA
                        	ERRNZ	IOCCTD-1;MUST SKIP A CHANNEL FOR USER #0
2537  CD 8918           	CALL	$HLIHL	;(HL) = #USER CHANNEL 0
                        	ERRNZ	CN.SOU	;ASSUME WE WANT CHANNEL 0
253A  CD 9C18           	CALL	$INDL
253D  2100              	DW	IOC.DIR+DIR.FLG
253F  7B                	MOV	A,E	;(A) = DIR.FLG
2540  D1                	POP	D	;(DE) = #FDN.STA
                        	ERRNZ	FDN.FLG-FDN.STA-1
2541  13                	INX	D	;(DE) = FDN.FLG
2542  E6 EF             	ANI	~DIF.CNT;CLEAR 'C'
2544  12                	STAX	D	;SAVE FILE FLAGS

                        *	CHECK FOR CONTIGUOUS COPY. IF SO, GET FILE SIZE.

2545  3A AF24           	LDA	OCOPYF
2548  A7                	ANA	A	;COPY CONTIGUOUS?
2549  CA 7C25           	JZ	RPH3	;NO.

254C  CD 9C18           	CALL	$INDL
254F  0500              	DW	IOC.GRT
2551  D5                	PUSH	D	;SAVE GRT ADDRESS
2552  CD 072F           	CALL	$INDLB	;A  = Last Sector Index
2555  2500              	DW	IOC.DIR+DIR.LSI
2557  32 D225           	STA	RPHA	;Save Sector Index
255A  CD 072F           	CALL	$INDLB	;A  = DIR.FGN
255D  2300              	DW	IOC.DIR+DIR.FGN
255F  E1                	POP	H	;(HL) = GRT TABLE ADDRESS
2560  CD FB2A           	CALL	CFS.	;COMPUTE BLOCK SIZE
2563  1B                	DCX	D	;Don't count last block
2564  3A 6A30           	LDA	SRCSPG	;A  = source volume SPG
2567  CD 0719           	CALL	$MU86	;HL = DE * A
256A  3A D225           	LDA	RPHA	;A = Sector Index
256D  CD 3A18           	CALL	$DADA
2570  EB                	XCHG			DE;= number of sectors
2571  E1                	POP	H	;(HL) = ADDRESS OF FDN.STA
2572  E5                	PUSH	H

2573  7E                	MOV	A,M	;(A) = FDN.STA
2574  F6 10             	ORI	ST.CNT	;FLAG CONTIG
2576  77                	MOV	M,A
2577  CD 182F           	CALL	$INDS	;FDN.SIZ = number of sectors
257A  0200              	DW	FDN.SIZ-FDN.STA

                        *	READY TO READ DATA. POSITION FILE (IN CASE SOME WAS READ IN
                        *	PREVIOUS PASSES) AND COMPUTE THE MAX POSSIBLE READ COUNT
                        *
                        *	((SP)) = ADDRESS OF FDN.STA FOR NODE

257C  E1                RPH3	POP	H	;(HL) = ADDRESS OF FDN.STA
257D  E5                	PUSH	H
257E  CD 9C18           	CALL	$INDL
2581  0400              	DW	FDN.AMR-FDN.STA;(DE) = AMOUNT READ (IN SECTORS)
2583  42                	MOV	B,D
2584  4B                	MOV	C,E	;(BC) = AMOUNT READ
2585  3E 00             	MVI	A,CN.SOU
2587  FF 27             	SCALL	.POSIT	;POSIT
2589  DA B929           	JC	IERR3	;POSIT BLEW UP
258C  CD BB26           	CALL	CBR	;COMPUTE BUFFER ROOM
258F  EB                	XCHG			(D);= POINTER/256, (E) = LIMIT/256
2590  E1                	POP	H	;(HL) = #FDN.STA
2591  01 0800           	LXI	B,FDN.ADR-FDN.STA
2594  09                	DAD	B	;(HL) = #FDN.ADR
2595  72                	MOV	M,D	;SET ADDRESS/256
2596  E5                	PUSH	H	;SAVE #FDN.ADR
2597  1E 00             	MVI	E,0	;(DE) = ADDRESS
2599  47                	MOV	B,A	;(B) = SECTORS OF RAM AVAILABLE
259A  4B                	MOV	C,E	;(C) = 0
259B  C5                	PUSH	B	;SAVE TRY COUNT
259C  3E 00             	MVI	A,CN.SOU
259E  FF 04             	SCALL	.READ	;READ THE STUFF

                        *	COMPUTE THE AMOUNT READ (IN CASE OF EOF)

25A0  D1                	POP	D	;(DE) = TRY COUNT
25A1  D2 B625           	JNC	RPH4	;GOT ALL WE TRIED
25A4  FE 01             	CPI	EC.EOF
25A6  C2 9F29           	JNE	NAMERR	;NOT JUST EOF, GOT TROUBLES
25A9  7A                	MOV	A,D
25AA  90                	SUB	B	;REMOVE AMOUNT WE DIDNT GET
25AB  57                	MOV	D,A
25AC  E1                	POP	H	;(HL) = #FDN.ADR
25AD  E5                	PUSH	H
25AE  01 F8FF           	LXI	B,FDN.STA-FDN.ADR
25B1  09                	DAD	B
25B2  7E                	MOV	A,M	;(A) = FDN.STA
25B3  E6 FD             	ANI	377Q-ST.OPR;EOF, NOT OPEN FOR READ ANYMORE
25B5  77                	MOV	M,A	;POST READ COMPLETE FOR THIS GUY

                        *	STORE RESULTS OF READ IN NODE
                        *
                        *	(D) = SECTORS READ
                        *	((SP)) = #FDN.ADR

25B6  E1                RPH4	POP	H	;(HL) = #FDN.ADR
25B7  23                	INX	H
                        	ERRNZ	FDN.AIM-FDN.ADR-1;(HL) = ADDRESS IF AMOUNT IN MEMORY BYTE
25B8  72                	MOV	M,D	;STORE SECTORS IN MEMORY COUNT
25B9  01 FBFF           	LXI	B,FDN.AMR-FDN.AIM
25BC  09                	DAD	B	;(HL) = #FDN.AMR (AMOUNT READ)
25BD  7E                	MOV	A,M	;(A) = AMOUNT READ BEFORE
25BE  82                	ADD	D	;ADD NEW AMOUNT
25BF  77                	MOV	M,A
25C0  23                	INX	H
25C1  7E                	MOV	A,M
25C2  CE 00             	ACI	0	;PROPIGATE FOR VERY LARGE FILES
25C4  77                	MOV	M,A
25C5  21 5F30           	LXI	H,OBUFPTR
25C8  7E                	MOV	A,M
25C9  82                	ADD	D	;ADVANCE FREE RAM POINTER BY AMOUNT READ
25CA  77                	MOV	M,A
25CB  3E 00             	MVI	A,CN.SOU
25CD  FF 26             	SCALL	.CLOSE	;CLOSE FILE
25CF  C3 B024           	JMP	RPH	;SEE IF MORE TO READ

25D2  00                RPHA	DB	0	;Saved Last Sector Index
25D3                    WPH	SPACE	4,10
                        **	WPH - WRITE PHASE.
                        *
                        *	WPH HANDLES THE WRITE PHASE PROCESSING. IT IS ENTERED WITH
                        *	THE FDN CHAIN SETUP, THE NAMTAB SETUP, AND
                        *	THE DESTINATION DISK MOUNTED.
                        *
                        *
                        *	WRITE PHASE
                        *
                        *	DURING THE WRITE PHASE, THE DESTINATION DISK IS MOUNTED. THE NODES
                        *	ARE TAKEN FROM THE ACTIVE CHAIN, AND PROCESSED. IF THE FILE HAD
                        *	BEEN PARTIALLY WRITTEN THE LAST PASS, IT IS  RE-OPENED AND POSITIONED.
                        *	IF THERE IS NOT MORE DATA TO READ FOR A PROCESSED
                        *	NODE, IT IS REMOVED, AND THE CORRESPONDING ENTRY IN NAMTAB IS DELETED.
                        *
                        *	WRITE PHASE CONTINUES UNTIL
                        *
                        *		1) THERE ARE NO MORE FILE NODES IN THE ACTIVE LIST
                        *		2) OR, THE FIRST (AND ONLY) ENTRY IN THE LIST HAS NO
                        *		   MORE DATA IN MEMORY, BUT HAS NOT BEEN COMPLETELY READ.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL


      = 25D3            WPH	EQU	*

                        *	SEE IF MORE TO WRITE

25D3  2A FC2F           	LHLD	FDNHED	;HL = FILE list head
25D6  7C                	MOV	A,H
25D7  B5                	ORA	L
25D8  C8                	RZ			FILE;list is empty

25D9  CD 072F           	CALL	$INDLB	;A  = amount in memory for file
25DC  0B00              	DW	FDN.AIM
25DE  A7                	ANA	A
25DF  C2 EE25           	JNZ	WPH0	;GOT DATA

                        *	NO DATA IN NODE. IF STILL READING, RETURN FOR MORE

25E2  CD 072F           	CALL	$INDLB	;A  = FDN.STA
25E5  0200              	DW	FDN.STA
25E7  E6 02             	ANI	ST.OPR
25E9  C0                	RNZ			STILL;READING, GET MORE

25EA  EB                	XCHG			(DE);= ADDRESS
25EB  C3 8326           	JMP	WPH4	;REMOVE NODE, AM DONE WITH FILE

                        *	HAVE DATA TO WRITE. SEE IF WE HAVE OPENED THIS FILE BEFORE,
                        *	OR IF THIS IS THE FIRST TIME

25EE  E5                WPH0	PUSH	H	;SAVE NODE POINTER
25EF  23                	INX	H
25F0  23                	INX	H
                        	ERRNZ	FDN.STA-FDN.LNK-2
25F1  7E                	MOV	A,M	;(A) = FDN.STA
25F2  E6 01             	ANI	ST.OPW
25F4  C2 3E26           	JNZ	WPH2	;OPENED BEFORE
                        	ERRNZ	ST.OPW-1
25F7  34                	INR	M	;SET '1' BIT

                        *	BUILD NAME INTO DESTFB

25F8  E5                	PUSH	H	;SAVE NODE ADDRESS
25F9  01 9E24           	LXI	B,OCOPYD
25FC  11 5435           	LXI	D,NAMTAB
25FF  21 A730           	LXI	H,DESTFB+FB.NAM
2602  CD 292E           	CALL	MWN	;MERGE WILDCARD NAME
2605  E1                	POP	H

                        *	IS 1ST TIME FOR THIS FILE. IF CONTIGUOUS FLAG, OPEN THE FILE
                        *	FOR CONTIGUOUS

2606  7E                	MOV	A,M	;(A) = FLAG BYTE
2607  E6 10             	ANI	ST.CNT
2609  C2 1926           	JNZ	WPH1	;IS CONTIG
260C  21 A730           	LXI	H,DESTFB+FB.NAM
260F  3E 01             	MVI	A,CN.DES
2611  FF 23             	SCALL	.OPENW	;JUST OPEN FOR WRITE
2613  DA A929           	JC	DESTERR	;ERROR
2616  C3 5826           	JMP	WPH3	;WRITE THE DATA

                        *	IS CONTIG FILE. OPEN IN CONTIG MODE

2619  CD 9C18           WPH1	CALL	$INDL
261C  0200              	DW	FDN.SIZ-FDN.STA
261E  42                	MOV	B,D
261F  4B                	MOV	C,E	;BC = Number of sectors required
2620  21 A730           	LXI	H,DESTFB+FB.NAM
2623  3E 01             	MVI	A,CN.DES
2625  C5                	PUSH	B	;SAVE COUNT
2626  FF 28             	SCALL	.DELET	;DELETE OLD ONE
2628  D2 3026           	JNC	WPH1.5	;DELETED
262B  FE 0C             	CPI	EC.FNF
262D  C2 3B2A           	JNE	ERROR	;MUST BE WRITE PROTECTED, OR  SOMETHING...
2630  C1                WPH1.5	POP	B	;(BC) = COUNT
2631  21 A730           	LXI	H,DESTFB+FB.NAM
2634  3E 01             	MVI	A,CN.DES
2636  FF 25             	SCALL	.OPENC	;OPEN CONTIG
2638  DA A929           	JC	DESTERR
263B  C3 5826           	JMP	WPH3

                        *	THIS FILE HAS ALREADY BEEN PARTIALLY WRITTEN. OPEN IN UPDATE MODE
                        *	SO WE CAN EXTEND IT.

263E  21 A730           WPH2	LXI	H,DESTFB+FB.NAM
2641  3E 01             	MVI	A,CN.DES
2643  FF 24             	SCALL	.OPENU	;OPEN FOR UPDATE
2645  DA A929           	JC	DESTERR	;PROBLEMS
2648  E1                	POP	H
2649  E5                	PUSH	H	;(HL) = #FDN.STA
264A  CD 9C18           	CALL	$INDL
264D  0800              	DW	FDN.AMW	;(DE) = AMOUNT WRITTEN
264F  42                	MOV	B,D
2650  4B                	MOV	C,E	;(BC) = SECTORS WRITTEN
2651  3E 01             	MVI	A,CN.DES
2653  FF 27             	SCALL	.POSIT	;POSITION FOR EXTEND
2655  DA AF29           	JC	IERR1	;COULDNT GET THERE!

                        *	FILE OPEN AND POSITIONED. WRITE DATA

2658  E1                WPH3	POP	H
2659  E5                	PUSH	H	;(HL) = #FDN.LNK
265A  CD 9C18           	CALL	$INDL
265D  0A00              	DW	FDN.ADR	;(E) = ADDR/256, (D) = CNT/256
265F  42                	MOV	B,D
2660  53                	MOV	D,E
2661  1E 00             	MVI	E,0	;(DE) = ADDRESS
2663  4B                	MOV	C,E	;(BC) = COUNT
2664  3E 01             	MVI	A,CN.DES
2666  C5                	PUSH	B	;SAVE WRITE COUNT
2667  FF 05             	SCALL	.WRITE	;WRITE IT
2669  DA A929           	JC	DESTERR	;PROBABLY OUT OF ROOM
266C  3E 01             	MVI	A,CN.DES
266E  FF 26             	SCALL	.CLOSE	;CLOSE IT
2670  DA A929           	JC	DESTERR
2673  C1                	POP	B	;(B) = SECTORS WRITTEN
2674  E1                	POP	H
2675  E5                	PUSH	H	;(HL) = #FDN.LNK
2676  11 0800           	LXI	D,FDN.AMW-FDN.LNK
2679  19                	DAD	D	;(HL) = FDN.AMW
267A  7E                	MOV	A,M
267B  80                	ADD	B
267C  77                	MOV	M,A
267D  23                	INX	H
267E  7E                	MOV	A,M
267F  CE 00             	ACI	0	;INCREMENT AMOUNT WRITTEN
2681  77                	MOV	M,A

                        *	CLEAR 'IN MEMORY' COUNT IN NODE. IF THE FILE HAS NO MORE TO
                        *	READ, REMOVE IT FROM THE CHAIN AND NAMTAB

2682  D1                	POP	D	;(DE) = FDN.LNK
2683  21 0B00           WPH4	LXI	H,FDN.AIM
2686  19                	DAD	D
2687  36 00             	MVI	M,0	;CLEAR AMOUNT IN MEMORY
2689  EB                	XCHG			(HL);= FDN.LNK
268A  23                	INX	H
268B  23                	INX	H
                        	ERRNZ	FDN.STA-FDN.LNK-2
268C  7E                	MOV	A,M	;(A) = FDN.STA
268D  E6 02             	ANI	ST.OPR
268F  C0                	RNZ			STILL;READING, AM DONE FOR THIS PHASE
                        	ERRNZ	FDN.FLG-FDN.STA-1
2690  23                	INX	H	;(HL) = #FDN.FLG
2691  46                	MOV	B,M	;(B) = FILE FLAGS
2692  C5                	PUSH	B	;SAVE

                        *	UNLINK NODE FROM LIST

2693  2B                	DCX	H
2694  2B                	DCX	H
2695  2B                	DCX	H
                        	ERRNZ	FDN.LNK-FDN.FLG+3;(HL) = #FDN.LNK
2696  E5                	PUSH	H
2697  CD 8918           	CALL	$HLIHL	;HL = & next node
                        	ERRNZ	FDN.LNK
269A  22 FC2F           	SHLD	FDNHED	;New FILE list head
269D  2A FA2F           	LHLD	FDNFREE
26A0  EB                	XCHG			DE;= current FREE list head
26A1  E1                	POP	H	;HL = current node
26A2  CD 182F           	CALL	$INDS	;point to rest of free list
26A5  0000              	DW	FDN.LNK
26A7  22 FA2F           	SHLD	FDNFREE ;Link new at head of FREE list

26AA  CD 552E           	CALL	REN	;REMOVE ENTRY FROM NAMTAB

                        *	FILE IS COMPLETED. NOW WE CAN
                        *	SET SPECIAL FLAGS: SWL

26AD  C1                	POP	B	;(B) = FLAGS
26AE  0E FF             	MVI	C,377Q	;SET AS MANY AS ALLOWED
26B0  21 A730           	LXI	H,DESTFB+FB.NAM
26B3  FF 30             	SCALL	.CHFLG	;CHANGE FLAGS
26B5  DA A929           	JC	DESTERR
26B8  C3 D325           	JMP	WPH	;TRY TO WRITE THE NEXT GUY
26BB                    CBR	SPACE	4,10
                        **	CBR - COMPUTE BUFFER ROOM.
                        *
                        *	CBR COMPUTES THE NUMBER OF SECTORS WORTH OF RAM
                        *	STILL FREE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(A) = SECTORS OF RAM FREE
                        *		'Z' SET IFF (A)  = 0
                        *		(H) = BUFPTR/256
                        *		(L) = OBUFLIM/256
                        *	USES	A,F

26BB  2A 5E30           CBR	LHLD	OBUFLIM
                        	ERRNZ	OBUFPTR-OBUFLIM-1
26BE  7D                	MOV	A,L
26BF  94                	SUB	H
26C0  C9                	RET
26C1                    DMD	SPACE	4,10
                        **	DMD	- Dismount Disk
                        *
                        *	DMD dismounts the source diskette
                        *
                        *	ENTRY:	NONE
                        *
                        *	EXIT:	To ERROR if problems
                        *
                        *	USES:	ALL

26C1  21 9830           DMD	LXI	H,SOURCE+DEVICE

26C4  FF 83             DMD.	SCALL	.DMNMS	;Dismount without a message
26C6  DA 3B2A           	JC	ERROR

26C9  C9                	RET
26CA                    IFL	SPACE	4,10
                        **	IFL - INITIALIZE FDN LIST.
                        *
                        *	IFL CHAINS ALL THE FDN NODES TO THE FREE LIST. THIS
                        *	CLEANUP IS NECESSARY IN CASE A CTL-C OR SOMETHING
                        *	LEFT THE LIST GARBAGED.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

26CA  21 FE2F           IFL	LXI	H,FDN.1
26CD  22 FA2F           	SHLD	FDNFREE

26D0  06 07             	MVI	B,FDNCNT-1
26D2  11 0A30           	LXI	D,FDN.1+FDNELEN

26D5  CD 182F           IFL1	CALL	$INDS	;set link to next node
26D8  0000              	DW	FDN.LNK
26DA  C5                	PUSH	B
26DB  62                	MOV	H,D
26DC  6B                	MOV	L,E	;HL = DE
26DD  01 0C00           	LXI	B,FDNELEN
26E0  09                	DAD	B	;Advance Next node pointer
26E1  EB                	XCHG			HL;= current ; DE = next
26E2  C1                	POP	B
26E3  05                	DCR	B	;Count node
26E4  C2 D526           	JNZ	IFL1

26E7  11 0000           	LXI	D,0
26EA  CD 182F           	CALL	$INDS	;last element links to NIL
26ED  0000              	DW	FDN.LNK

26EF  EB                	XCHG
26F0  22 FC2F           	SHLD	FDNHED	;FILE list is empty
26F3  C9                	RET
26F4                    MAD	SPACE	4,10
                        **	MAD - MOUNT ALTERNATE DISK.
                        *
                        *	MAD DISMOUNTES THE CURRENT DISK, HAS THE USER INSERT THE
                        *	OTHER DISK, AND MOUNTS IT.
                        *
                        *
                        *	ENTRY	(DE) = PROMPT PATTERNS FOR PANEL AND CONSOLE
                        *
                        *	EXIT	PSW	= 'C' set   if    ERROR	
                        *			= 'C' clear if NO ERROR
                        *
                        *	USES	ALL

      = 26F4            MAD	EQU	*

                        *	DISMOUNT CURRENT DISK

26F4  D5                	PUSH	D

26F5  CD C126           	CALL	DMD	;Dismount Source Diskette

26F8  E1                	POP	H
26F9  FF 03             	SCALL	.PRINT	;CONSOLE PROMPT

26FB  3E 0A             MAD2	MVI	A,DC.RDY
26FD  CD A02E           	CALL	SRCDRVR
2700  D2 FB26           	JNC	MAD2	;Wait for device NOT ready

2703  3E 0A             MAD3	MVI	A,DC.RDY
2705  CD A02E           	CALL	SRCDRVR
2708  DA 0327           	JC	MAD3	;Wait for device ready

270B  CD AB2E           	CALL	$CRLF	;Output Newline to Console

270E  CD 9627           	CALL	MND	;MOUNT NEW DISK
2711  C9                	RET
2712                    MDD	SPACE	4,10
                        **	MDD	- Mount Destination Diskette
                        *
                        *	MDD insures that the destination diskette is mounted.
                        *
                        *	Since MSD requires a sysgened label, if the disk passes
                        *	the RDD test, we know that it is not the same diskette
                        *	as the source since the volume types must be differant.
                        *
                        *	ENTRY:	Source Label in SRCLAB
                        *
                        *	EXIT:	Destination Diskette mounted
                        *
                        *	USES:	ALL

2712  3A 6B30           MDD	LDA	VOLFLAG
2715  A7                	ANA	A
2716  C0                	RNZ			Destination;is mounted

2717  CD 2F27           	CALL	MDD1

271A  2A 2932           	LHLD	DSTLAB+LAB.SER
271D  26 00             	MVI	H,0
271F  3E 08             	MVI	A,DC.MOU
2721  CD E42B           	CALL	DSTDRVR	;Insure Good volume number of label stuff
2724  DA 3B2A           	JC	ERROR

2727  3A 6B30           	LDA	VOLFLAG
272A  2F                	CMA
272B  32 6B30           	STA	VOLFLAG	;Flag Destination mounted

272E  C9                	RET
272F                    MDD1	SPACE	4,10
                        **	MDD1
                        *

272F  3A 6530           MDD1	LDA	DRIVES2
2732  A7                	ANA	A
2733  C2 3C27           	JNZ	MDD3	;2-drive sysgen

                        *	Mount the Diskette

2736  11 8027           MDD2	LXI	D,MDDA
2739  CD F426           	CALL	MAD	;Mount alternate disk

273C  3A 9527           MDD3	LDA	MDDB
273F  A7                	ANA	A
2740  CA 5A27           	JZ	MDD4	;Label not saved in DSTLAB

2743  3A 6530           	LDA	DRIVES2
2746  A7                	ANA	A
2747  C0                	RNZ			2-drive;sysgen means no change

2748  CD 0328           	CALL	GETDLB	;LABEL = Destination Label
274B  0E 00             	MVI	C,0	;256-Byte Compare
274D  11 2934           	LXI	D,LABEL
2750  21 2932           	LXI	H,DSTLAB
2753  CD 3018           	CALL	$COMP
2756  C2 3627           	JNZ	MDD2	;Destination Label does not match Original

2759  C9                	RET

                        *	Verify Diskette type and Save Label

275A  11 2932           MDD4	LXI	D,DSTLAB;DE = destination Label buffer
275D  CD 0628           	CALL	GETDLB.	;Read the label

2760  3A 6530           	LDA	DRIVES2
2763  A7                	ANA	A
2764  C2 7527           	JNZ	MDD5	;2-drive sysgen don't care if labels match

2767  0E 00             	MVI	C,0
2769  11 2932           	LXI	D,DSTLAB
276C  21 2933           	LXI	H,SRCLAB
276F  CD 3018           	CALL	$COMP	;Compare Source Label to Destination Label
2772  CA 3627           	JZ	MDD2	;Source and Destination Labels Match

2775  CD 4128           MDD5	CALL	RDD	;Require Destination Data Diskette

2778  3A 9527           	LDA	MDDB
277B  2F                	CMA
277C  32 9527           	STA	MDDB	;Flag label saved and verified

277F  C9                	RET

2780  0A496E73 65727420 MDDA	DB	NL,'Insert Destination:',BELL+200Q
2788  44657374 696E6174
2790  696F6E3A 87

2795  00                MDDB	DB	0	;!= 0  If label saved and type verified
2796                    MND	SPACE	4,10
                        **	MND - MOUNT SYSTEM DISK.
                        *
                        *	MND MOUNTS A NEW DISK INTO 'SY' UNIT 'UNIT'
                        *
                        *
                        *	THE LABEL MUST ALREADY HAVE BEEN READ INTO 'LABEL'
                        *
                        *	ENTRY	NONE
                        *
                        *	EXIT	To ERROR if bad problems
                        *
                        *	USES	ALL

2796  21 9830           MND	LXI	H,SOURCE+DEVICE

2799  FF 82             MND.	SCALL	.MONMS	;Mount without message
279B  DA 3B2A           	JC	ERROR	;IF ERROR

279E  C9                	RET
279F                    MSD	SPACE	4,10
                        **	MSD	- Mount System Diskette
                        *
                        *	MSD insures that the system diskette is mounted
                        *
                        *	ENTRY:	NONE
                        *
                        *	EXIT:	System diskette mounted
                        *
                        *	USES:	ALL

279F  3A 6B30           MSD	LDA	VOLFLAG
27A2  A7                	ANA	A
27A3  C8                	RZ			System;Diskette Mounted

27A4  CD BC27           	CALL	MSD1

27A7  2A 2933           	LHLD	SRCLAB+LAB.SER
27AA  26 00             	MVI	H,0
27AC  3E 08             	MVI	A,DC.MOU
27AE  CD A02E           	CALL	SRCDRVR	;Insure good volume number after label stuff
27B1  DA 3B2A           	JC	ERROR

27B4  3A 6B30           	LDA	VOLFLAG
27B7  2F                	CMA	A
27B8  32 6B30           	STA	VOLFLAG	;Flag System Diskette Mounted

27BB  C9                	RET
27BC                    MSD1	SPACE	4,10
                        **	MSD1
                        *

27BC  3A 6530           MSD1	LDA	DRIVES2
27BF  A7                	ANA	A
27C0  C2 C927           	JNZ	MSD3	;2-drive sysgen

                        *	Mount the Diskette

27C3  11 F227           MSD2	LXI	D,MSDA
27C6  CD F426           	CALL	MAD	;Mount the other diskette

      = 27C9            MSD.	EQU	*	;Used for Initial Mount

27C9  3A 0228           MSD3	LDA	MSDB
27CC  A7                	ANA	A
27CD  CA E727           	JZ	MSD4	;Source Label is not saved yet

27D0  3A 6530           	LDA	DRIVES2
27D3  A7                	ANA	A
27D4  C0                	RNZ			2-drive;sysgen => no change

27D5  CD 2228           	CALL	GETSLB	;LABEL = Source Label
27D8  0E 00             	MVI	C,0	;256-Byte compare
27DA  11 2934           	LXI	D,LABEL
27DD  21 2933           	LXI	H,SRCLAB
27E0  CD 3018           	CALL	$COMP
27E3  C2 C327           	JNZ	MSD2	;This Source Label does not match original

27E6  C9                	RET

                        *	Verify Diskette type and Save Label

27E7  CD 0E29           MSD4	CALL	RSD	;Require Sysgened Source Diskette

27EA  3A 0228           	LDA	MSDB
27ED  2F                	CMA
27EE  32 0228           	STA	MSDB	;Flag label saved and verified

27F1  C9                	RET

27F2  0A496E73 65727420 MSDA	DB	NL,'Insert Source:',BELL+200Q
27FA  536F7572 63653A87

2802  00                MSDB	DB	0	;!= 0 If label saved and type verified
2803                    GETXLB	SPACE	4,10
                        **	GETXLB	- GET LABEL
                        *
                        *	GETXLB GETS THE LABEL FROM THE DISK
                        *
                        *	ENTRY	NONE
                        *
                        *	EXIT	(PSW)	= 'C' CLEAR IF NO ERROR
                        *			= 'C' SET   IF    ERROR
                        *
                        *	USES	ALL

2803  11 2934           GETDLB	LXI	D,LABEL	;DE = buffer address

2806  D5                GETDLB.	PUSH	D
2807  21 0000           	LXI	H,0
280A  3E 08             	MVI	A,DC.MOU
280C  CD E42B           	CALL	DSTDRVR	;Mount as volume 0
280F  D1                	POP	D
2810  DA 3B2A           	JC	ERROR

2813  21 0900           	LXI	H,DDF.LAB
2816  01 0001           	LXI	B,256
2819  3E 02             	MVI	A,DC.RER;READ REGARDLESS
281B  CD E42B           	CALL	DSTDRVR
281E  DA 3B2A           	JC	ERROR	;Bad Error

2821  C9                	RET


2822  11 2934           GETSLB	LXI	D,LABEL	;DE = buffer address

2825  D5                GETSLB.	PUSH	D
2826  21 0000           	LXI	H,0
2829  3E 08             	MVI	A,DC.MOU
282B  CD A02E           	CALL	SRCDRVR	;Mount as volume 0
282E  D1                	POP	D
282F  DA 3B2A           	JC	ERROR

2832  21 0900           	LXI	H,DDF.LAB
2835  01 0001           	LXI	B,256
2838  3E 02             	MVI	A,DC.RER
283A  CD A02E           	CALL	SRCDRVR	;Read Source Label
283D  DA 3B2A           	JC	ERROR	;Bad Error

2840  C9                	RET
2841                    RDD	SPACE	4,10
                        **	RDD - REQUIRE Destination DATA DISK.
                        *
                        *	RDD CHECKS THE VOLUME TYPE TO MAKE SURE THAT IT IS A VALID
                        *	DATA DISK.
                        *
                        *	ENTRY	DSTLAB	= Destination Label
                        *
                        *	EXIT	TO CALLER IF OK
                        *		TO EXIT IF BAD
                        *
                        *	USES	ALL

2841  3A 3232           RDD	LDA	DSTLAB+LAB.VER;A = Version of INIT to initialize disk
2844  FE 30             	CPI	VERS	;Compare to SYSGEN Version
2846  C2 C328           	JNZ	RDD2	;Not Equal

2849  3A 3132           	LDA	DSTLAB+LAB.VLT;(A) = VOLUME TYPE
                        	ERRNZ	LAB.DAT
284C  A7                	ANA	A
284D  C8                	RZ			IS;DATA DISK, OK

                        	ERRNZ	LAB.SYS-1
284E  3D                	DCR	A	;SEE IF SYSTEM DISK
284F  C2 7F28           	JNZ	RDD1	;DISK NOT EVEN INITIALIZED
2852  CD 5E19           	CALL	$TYPTX
2855  0A075468 69732044 	DB	NL,BELL,'This Disk Has Already Been SYSGENed.',ENL
285D  69736B20 48617320
2865  416C7265 61647920
286D  4265656E 20535953
2875  47454E65 642E8A
287C  C3 FE22           	JMP	EXIT

                        *	DISK IS NOT PROPERLY INITIALIZED.
                        *	(THIS CODE MAY BE ENTERED FROM OTHER ROUTINES)

287F  CD 5E19           RDD1	CALL	$TYPTX
2882  0A075468 69732044 	DB	NL,BELL,'This Disk Must be Re-Initialized Before It Can Be '
288A  69736B20 4D757374
2892  20626520 52652D49
289A  6E697469 616C697A
28A2  65642042 65666F72
28AA  65204974 2043616E
28B2  20426520
28B6  53595347 454E6564 	DB	'SYSGENed.',ENL
28BE  2E8A
28C0  C3 FE22           	JMP	EXIT

                        *	Not Initialized by the correct version of HDOS

28C3  CD 5E19           RDD2	CALL	$TYPTX
28C6  0A075468 69732064 	DB	NL,BELL,'This disk has not been initialized by the correct '
28CE  69736B20 68617320
28D6  6E6F7420 6265656E
28DE  20696E69 7469616C
28E6  697A6564 20627920
28EE  74686520 636F7272
28F6  65637420
28FA  76657273 696F6E20 	DB	'version of INIT.',ENL
2902  6F662049 4E49542E
290A  8A
290B  C3 7F28           	JMP	RDD1
290E                    RSD	SPACE	4,10
                        **	RSD - REQUIRE SYSGENED Source DISK.
                        *
                        *	RSD CHECKS TO SEE IF THE MOUNTED VOLUME HAS BEEN SYSGENED.
                        *
                        *	ENTRY	NONE
                        *	EXIT	TO CALLER IF OK
                        *		TO EXIT IF ERROR
                        *	USES	ALL

290E  11 2933           RSD	LXI	D,SRCLAB;HL = Source Label Save Area
2911  CD 2528           	CALL	GETSLB.

2914  3A 3133           	LDA	SRCLAB+LAB.VLT;(A) = VOLUME TYPE
                        	ERRNZ	LAB.SYS-1
2917  D6 01             	SUI	1
2919  C8                	RZ			IS;OK

291A  D2 7F28           	JNC	RDD1	;MUST BE INITIALIZED

291D  CD 5E19           	CALL	$TYPTX
2920  0A075468 69732044 	DB	NL,BELL,'This Disk Must be SYSGENed Before It Can be Used'
2928  69736B20 4D757374
2930  20626520 53595347
2938  454E6564 20426566
2940  6F726520 49742043
2948  616E2062 65205573
2950  6564
2952  0A417320 496E7075 	DB	NL,'As Input For Another SYSGEN.',ENL
295A  7420466F 7220416E
2962  6F746865 72205359
296A  5347454E 2E8A
2970  C3 FE22           	JMP	EXIT
2973                    SSL	SPACE	4,10
                        **	SSL	- Set Sysgened Flag in Label
                        *
                        *	SSL sets the sysgened flag in the label
                        *
                        *	ENTRY:	Destination Diskette dismounted
                        *
                        *	EXIT:	To ERROR  if problems

2973  CD 1227           SSL	CALL	MDD	;Mount Destination Diskette
2976  21 8730           	LXI	H,DEST+DEVICE
2979  CD C426           	CALL	DMD.	;Dismount Destination Diskette

297C  2E 00             	MVI	L,0
297E  3E 08             	MVI	A,DC.MOU
2980  CD E42B           	CALL	DSTDRVR	;Mount Diskette as volume 0

2983  3E 01             	MVI	A,LAB.SYS
2985  32 3132           	STA	DSTLAB+LAB.VLT;SET VOLUME TYPE

2988  11 2932           	LXI	D,DSTLAB
298B  21 0900           	LXI	H,DDF.LAB
298E  01 0001           	LXI	B,256
2991  3E 01             	MVI	A,DC.WRI
2993  CD E42B           	CALL	DSTDRVR	;Write Label Back
2996  DA 3B2A           	JC	ERROR	;BAD TROUBLE

2999  21 8730           	LXI	H,DEST+DEVICE
299C  C3 9927           	JMP	MND.	;Re-Mount the diskette
299F                    	STL	'ERROR PROCESSING'
299F                    	EJECT
                        **	ERROR PROCESSING ROUTINES
                        *
299F                    	SPACE	3,10
                        ***	NAMERR - FILE TYPE ERROR, OCCOURED ON FILE WHOSE NAME
                        *	IS NEXT UP IN NAMTAB.
                        *
                        *	PROCESS VIA $FERROR

299F  2A BC30           NAMERR	LHLD	NAMTPTR
29A2  01 F6FF           	LXI	B,-FB.NAM
29A5  09                	DAD	B
29A6  C3 D22E           	JMP	$FERROR
29A9                    DESTERR	SPACE	4,10
                        **	ERROR ON FILE IN DESTFB

29A9  21 9D30           DESTERR	LXI	H,DESTFB
29AC  C3 D22E           	JMP	$FERROR
29AF                    INTERR	SPACE	4,10
                        **	INTERNAL ERRORS. SHOULD NOT OCCOUR.

29AF  3E 31             IERR1	MVI	A,'1'
29B1  C3 BB29           	JMP	INTERR

29B4  3E 32             IERR2	MVI	A,'2'
29B6  C3 BB29           	JMP	INTERR

29B9  3E 33             IERR3	MVI	A,'3'
                        *	JMP	INTERR
                        	ERRNZ	*-INTERR

29BB  32 DA29           INTERR	STA	INTERRA ;SAVE CODE
29BE  CD 5E19           	CALL	$TYPTX
29C1  070A5359 5347454E 	DB	BELL,NL,'SYSGEN Internal Error #'
29C9  20496E74 65726E61
29D1  6C204572 726F7220
29D9  23
29DA  3F0A              INTERRA DB	'?',NL
29DC  0A                	DB	NL
29DD  54686973 20457272 	DB	'This Error Should not Occur. Don''t contact HEATH Technical',NL
29E5  6F722053 686F756C
29ED  64206E6F 74204F63
29F5  6375722E 20446F6E
29FD  27742063 6F6E7461
2A05  63742048 45415448
2A0D  20546563 686E6963
2A15  616C0A
2A18  436F7272 6573706F 	DB	'Correspondence for Assistance.',ENL
2A20  6E64656E 63652066
2A28  6F722041 73736973
2A30  74616E63 652E8A
2A37  3E 01             	MVI	A,1
2A39  FF 00             	SCALL	.EXIT	;ABORT
2A3B                    ERROR	SPACE	4,10
                        **	ERROR - GENERAL AND SYNTAX ERRORS NOT DIRECTLY ASSOCIATED
                        *	WITH A VALID FILE NAME.

2A3B  F5                ERROR	PUSH	PSW	;SAVE CODE
2A3C  CD 5E19           	CALL	$TYPTX
2A3F  07457272 6F72202D 	DB	BELL,'Error -',' '+200Q
2A47  A0
2A48  F1                	POP	PSW
2A49  A7                	ANA	A
2A4A  FA 542A           	JM	ERROR1	;IS PRODUCT ERROR
2A4D  26 0A             	MVI	H,NL	;USE NL AS MESSAGE TRAIL CHAR
2A4F  FF 2F             	SCALL	.ERROR	;LOOK UP SYSTEM ERROR
2A51  C3 FB22           	JMP	RESTART

                        *	IS PRODUCT ERROR

2A54  21 742A           ERROR1	LXI	H,ERRORA
2A57  BE                ERROR2	CMP	M
2A58  23                	INX	H
2A59  C2 572A           	JNE	ERROR2	;FIND ERROR MESSAGE
2A5C  CD 5E19           	CALL	$TYPTX
2A5F  07535953 47454E20 	DB	BELL,'SYSGEN Error #',' '+200Q
2A67  4572726F 722023A0
2A6F  FF 03             	SCALL	.PRINT	;PRINT MESSAGE
2A71  C3 FB22           	JMP	RESTART

2A74   (0000)           ERRORA	DS	0	;ERROR MESSAGES
2A74  8030318A          	DB	PEC.DF,'01',ENL
2A78  8130328A          	DB	PEC.DNC,'02',ENL
2A7C  8230338A          	DB	PEC.RSE,'03',ENL
2A80  8330348A          	DB	PEC.TFI,'04',ENL
2A84  8430358A          	DB	PEC.CS,'05',ENL
2A88  8530368A          	DB	PEC.IUW,'06',ENL
2A8C  8630378A          	DB	PEC.IDF,'07',ENL
2A90  8730388A          	DB	PEC.CO,'08',ENL
2A94                    	STL	'SUBROUTINES'
2A94                    	EJECT
2A94                    AEN	SPACE	4,10
                        **	AEN - ADD ENTRY TO 'NAMTAB'
                        *
                        *	AEN EXPANDS THE FILE INFO IN PIO.XXX INTO A FILE DESCRIPTOR
                        *	AND ENTERS IT IN THE NAMTAB TABLE.
                        *
                        *	If the QUERY flag is set, the user is interrogated
                        *	before the file is actually copied.  If a yes response
                        *	is given, then the file is actually added, otherwise,
                        *	the file is skipped.
                        *
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' SET IF WILDCARD
                        *	USES	ALL

2A94  21 C72A           AEN	LXI	H,AENA
2A97  CD FC2C           	CALL	CDA	;CONVERT DIRECTORY FORMAT TO ASCII FORMAT
2A9A  D6 01             	SUI	1	;'C' SET IF WILDCARD
2A9C  F5                	PUSH	PSW	;SAVE FLAG

2A9D  DA A62A           	JC	AEN1	;Ignore query for wild-carded files
2AA0  CD 062B           	CALL	CQF	;Check Query Flag
2AA3  C2 C52A           	JNZ	AEN2	;Don't Copy this file

2AA6  2A B830           AEN1	LHLD	NAMTLEN
2AA9  01 1100           	LXI	B,FB.NAML
2AAC  09                	DAD	B	;INCREASE SIZE
2AAD  22 B830           	SHLD	NAMTLEN
2AB0  EB                	XCHG			(DE);= NEW LENGTH
2AB1  2A BA30           	LHLD	NAMTMAX
2AB4  7D                	MOV	A,L	;SEE IF WILL OVERFLOW
2AB5  93                	SUB	E
2AB6  7C                	MOV	A,H
2AB7  9A                	SBB	D
2AB8  DC FF2D           	CC	INA	;INCREASE NAMTAB ALLOCATION
2ABB  21 4335           	LXI	H,NAMTAB-FB.NAML
2ABE  19                	DAD	D	;(HL) = *TO* ADDRESS
2ABF  11 C72A           	LXI	D,AENA	;(DE) = *FROM* ADDRESS
2AC2  CD AA18           	CALL	$MOVE	;MOVE ENTRY IN

2AC5  F1                AEN2	POP	PSW	;(PSW) = WILDCARD FLAG
2AC6  C9                	RET

2AC7   (0011)           AENA	DS	FB.NAML
2AD8                    BSL	SPACE	4,10
                        **	BSL - BUILD SOURCE FILE LIST.
                        *
                        *	BSL CRACKS THE LIST OF THE SOURCE FILES FROM THE COMMAND LINE AND
                        *	BUILDS THEM INTO THE NAMTAB MANAGED TABLE.
                        *	WILD CARDS ENCOUNTERED ARE EXPANDED.
                        *
                        *	ENTRY	(A) <> 0 IF TO ASK ABOUT '*.*' USE
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *		 (A) = CODE
                        *	USES	ALL

2AD8  32 FA2A           BSL	STA	BSLA	;SAVE ASK FLAG
2ADB  CD 192E           	CALL	LSN	;LOCATE SOURCE NAME

                        *	GO THROUGH SOURCE LIST CRACKING NAMES

2ADE  7E                BSL1	MOV	A,M
2ADF  A7                	ANA	A
2AE0  C8                	RZ			ALL;DONE
2AE1  11 8C30           	LXI	D,SOURCE+DEFAULT;Source default definition
2AE4  CD EF2B           	CALL	CAD	;CONVERT ASCII NAME TO DIRECTORY FORMAT
2AE7  D8                	RC			ERROR
2AE8  CD 882E           	CALL	SND	;SET NEW DEFAULTS
2AEB  E5                	PUSH	H	;SAVE LINE ADDRESS
2AEC  CD 352D           	CALL	EWS	;EXPAND WILDCARD SPECIFICATION
2AEF  DA F22A           	JC	BSL2	;IF ERROR
2AF2  E1                BSL2	POP	H	;RESTORE LINE ADDRESS
2AF3  D8                	RC			USER;REFUSED *.*
2AF4  CD 7B2E           	CALL	SFS	;SKIP FILE SEPERATOR (BLANKS AND/OR COMMA)
2AF7  C3 DE2A           	JMP	BSL1	;DO MORE

2AFA  00                BSLA	DB	0	;<>0 IF TO CHECK FOR *.*
2AFB                    CFS	SPACE	4,10
                        **	CFS - COMPUTE FILE SIZE
                        *
                        *	CFS COMPUTES THE SIZE OF A FILE. THE DEVICE'S GRT MUST BE IN
                        *	THE 'GRT' BUFFER.
                        *
                        *	ENTRY	(A) = FIRST GROUP NUMBER
                        *	EXIT	(DE) = SIZE
                        *	USES	ALL

2AFB  11 0000           CFS.	LXI	D,0
2AFE  A7                CFS1	ANA	A
2AFF  C8                	RZ			ALL;DONE
2B00  6F                	MOV	L,A
2B01  7E                	MOV	A,M	;(A) = NEXT GRT
2B02  13                	INX	D
2B03  C3 FE2A           	JMP	CFS1	;TRY AGAIN
2B06                    CQF	SPACE	4,10
                        **	CQF	- Check Query Flag
                        *
                        *	CQF checks the query flag, and if it is set, asks
                        *	the user if the file is to be transfered by typing
                        *	the filename followed by a question mark.  If the
                        *	response begins with a 'Y' the file is transfered,
                        *	else, it is to be ignored.
                        *
                        *	ENTRY:	PIO.xxx	= File specification
                        *
                        *	EXIT:	PSW	= 'Z'  if     to Copy
                        *			  'NZ' if NOT to Copy
                        *
                        *	USES:	ALL

2B06  3A 6930           CQF	LDA	QUERY
2B09  A7                	ANA	A
2B0A  C8                	RZ			NO;Query, so transfer file

2B0B  CD 142B           	CALL	CQF.
2B0E  F5                	PUSH	PSW
2B0F  CD AB2E           	CALL	$CRLF
2B12  F1                	POP	PSW
2B13  C9                	RET

2B14  21 3D35           CQF.	LXI	H,PIO.DIR+DIR.NAM
2B17  CD 7F2F           	CALL	$TFN.	;Type the File Name
2B1A  CD 5E19           	CALL	$TYPTX
2B1D  3FA0              	DB	'?',' '+200Q

2B1F  FF 07             	SCALL	.CLRCO	;Clear the console
2B21  CD 652F           	CALL	$RCHAR
2B24  CD 492F           	CALL	$MCU
2B27  FE 59             	CPI	'Y'
2B29  C8                	RZ			Copy;the file

2B2A  FE 4E             	CPI	'N'
2B2C  C2 322B           	JNZ	CQF1	;Illegal
2B2F  F6 01             	ORI	1	;'NZ' => DON'T copy the file
2B31  C9                	RET

2B32  CD 5E19           CQF1	CALL	$TYPTX
2B35  0A87              	DB	NL,BELL+200Q;Bell user for illegal character
2B37  C3 142B           	JMP	CQF.
2B3A                    CSF	SPACE	4,10
                        **	CSF - CHECK FOR SPECIAL FILE.
                        *
                        *	CSF CHECKS TO SEE IF THE FILE NAME (IN DIRECTORY FORMAT)
                        *	SUPPLIED MATCHES ONE OF A LIST OF 'NOT-TO-BE-PROCESSED'
                        *	FILES. THE LIST IS:
                        *
                        *	Since the table is terminated by a zero byte,
                        *	the files to be copied may be modified by
                        *	zeroing appropriately:
                        *
                        *		CSFB		No GRT.SYS, RGT.SYS, DIRECT.SYS
                        *		CSFC		or HDOS30.SYS, SYSCMD.SYS, PIP.ABS, TT.DVD
                        *		CSFD		or SY.DVD
                        *				or xx.DVD
                        *
                        *	ENTRY	(DE) = ADDRESS OF DIRECTORY BLOCK
                        *		CSFB	= 0 If not to search extra files
                        *			= CSFC if to search extra files
                        *
                        *	EXIT	'Z' SET IF MATCH
                        *		'Z' CLEAR OTHERSIZE
                        *
                        *	USES	A,F
                        *

2B3A  C5                CSF	PUSH	B
2B3B  D5                	PUSH	D
2B3C  E5                	PUSH	H	;SAVE POINTERS

2B3D  21 5B2B           	LXI	H,CSFA	;(A) = START OF LIST
2B40  D5                CSF1	PUSH	D	;SAVE NAME
2B41  E5                	PUSH	H	;SAVE LIST ADDRESS
2B42  0E 0B             	MVI	C,DIRIDL
2B44  CD 3018           	CALL	$COMP	;SEE IF MATCH
2B47  E1                	POP	H
2B48  D1                	POP	D
2B49  CA 572B           	JE	CSF2	;GOT MATCH
2B4C  3E 0B             	MVI	A,DIRIDL
2B4E  CD 4118           	CALL	$DADA.	;POINT TO NEXT ENTRY
2B51  7E                	MOV	A,M
2B52  A7                	ANA	A
2B53  C2 402B           	JNZ	CSF1	;MORE TO CHECK

                        *	NO MATCH

2B56  3C                	INR	A	;CLEAR 'Z'
2B57  E1                CSF2	POP	H
2B58  D1                	POP	D	;RESTORE REGS
2B59  C1                	POP	B
2B5A  C9                	RET

2B5B  47525400 00000000 CSFA	DB	'GRT',0,0,0,0,0,'SYS'	;GRT.SYS
2B63  535953
                        	ERRNZ	*-CSFA-DIRIDL
2B66  52475400 00000000 	DB	'RGT',0,0,0,0,0,'SYS'	;RGT.SYS
2B6E  535953
                        	ERRNZ	*-CSFA%DIRIDL
2B71  44495245 43540000 	DB	'DIRECT',0,0,'SYS'	;DIRECT.SYS
2B79  535953
                        	ERRNZ	*-CSFA%DIRIDL

2B7C  48444F53 33300000 CSFB	DB	'HDOS30',0,0,'SYS'	;HDOS30.SYS
2B84  535953
                        	ERRNZ	*-CSFA%DIRIDL
2B87  53595343 4D440000 	DB	'SYSCMD',0,0,'SYS'	;SYSCMD.SYS
2B8F  535953
                        	ERRNZ	*-CSFA%DIRIDL
2B92  50495000 00000000 	DB	'PIP',0,0,0,0,0,'ABS'	;PIP.ABS
2B9A  414253
                        	ERRNZ	*-CSFA%DIRIDL
2B9D  54540000 00000000 	DB	'TT',0,0,0,0,0,0,'DVD'	;TT.DVD
2BA5  445644
                        	ERRNZ	*-CSFA%DIRIDL

2BA8  53590000 00000000 CSFC	DB	'SY',0,0,0,0,0,0,'DVD'	;SY.DVD
2BB0  445644
                        	ERRNZ	*-CSFA%DIRIDL

2BB3  78780000 00000000 CSFD	DB	'xx',0,0,0,0,0,0,'DVD'	;xx.DVD
2BBB  445644
                        	ERRNZ	*-CSFA%DIRIDL

2BBE  00                	DB	0	;New end of table
2BBF                    CWM	SPACE	4,10
                        **	CWM - CHECK WILDCARD MATCH.
                        *
                        *	CWM CHECKS TO SEE IF A WILDCARDED FIELD MATCHES A NON-WILDCARDED
                        *	FIELD.
                        *
                        *	ENTRY	(DE) = ADDRESS OF WC NAME
                        *		(HL) = ADDRESS OF NON/WC NAME
                        *		(B) = NUMBER OF CHARACTERS TO CHECK
                        *	EXIT	'Z' SET IF MATCH
                        *		 (HL) = (HL)+(B)
                        *		 (DE) = (DE) = (B)
                        *		'Z' CLEAR IF NO MATCH
                        *	USES	A,F,B,D,E,H,L

2BBF  1A                CWM	LDAX	D
2BC0  A7                	ANA	A
2BC1  FA C62B           	JM	CWM1	;IS MATCH
2BC4  BE                	CMP	M
2BC5  C0                	RNE			NO;MATCH
2BC6  13                CWM1	INX	D
2BC7  23                	INX	H	;ADVANCE ADDRESSES
2BC8  05                	DCR	B
2BC9  C2 BF2B           	JNZ	CWM	;GO FOR MORE
2BCC  C9                	RET			GOT;MATCH
2BCD                    DDF	SPACE	4,10
                        **	DDF - DECODE DESTINATION FILE.
                        *
                        *	DDF DECODES THE DESTINATION FILE NAME FROM THE COMMAND LINE.
                        *
                        *	Must have default specification.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' CLEAR IF OK
                        *		 (A) = 0 IF NAME HAS WILDCARDS
                        *		 (A) = 1 IF NO WILDCARD USED
                        *		 DESTFB+FB.NAM CONTAINS A COMPLETE DESTINATION FILE NAME
                        *		 (HL) = COMMAND LINE POINTER UDPATED
                        *		'C' SET IF ERROR
                        *		 (A) = CODE
                        *	USES	ALL

2BCD  2A 6630           DDF	LHLD	LINEP

                        *	(HL) = ADDRESS FOR NAME

2BD0  11 7B30           DDF2	LXI	D,DEST+DEFAULT
2BD3  CD EF2B           	CALL	CAD	;CONVERT ASCII NAME TO DIRECTORY FORMAT
2BD6  D8                	RC			ERROR

2BD7  7E                	MOV	A,M
2BD8  FE 3D             	CPI	'='
2BDA  3E 86             	MVI	A,PEC.IDF;ASSUME ILLEGAL DESTINATION FORMAT
2BDC  37                	STC
2BDD  C0                	RNE			MUST;HAVE '='

                        *	HAVE NAME DECODED. EXPAND INTO DESTFB+FB.NAM

2BDE  21 A730           	LXI	H,DESTFB+FB.NAM
2BE1  C3 FC2C           	JMP	CDA	;CONVERT DIRECTORY FORMAT TO ASCII
2BE4                    DSTDRVR	SPACE	4,10
                        **	DSTDRVR	- Destination Driver
                        *
                        *	DSTDRVR invokes the DESTination device driver.
                        *
                        *	ENTRY:	NONE
                        *
                        *	EXIT:	NONE
                        *
                        *	USES:	NONE
                        *

2BE4  F5                DSTDRVR	PUSH	PSW
2BE5  3A 8630           	LDA	DEST+UNIT
2BE8  32 3121           	STA	AIO.UNI
2BEB  F1                	POP	PSW
2BEC  C3 8330           	JMP	DEST+DRIVER
2BEF                    CAD	SPACE	4,10
                        **	CAD - CONVERT ASCII FILE NAME INTO DIRECTORY FORMAT.
                        *
                        *	CAD CRACKS AN ALPHANUMERIC FILE DESCRIPTION, OF THE FORM
                        *
                        *	DEV:NAME.EXT
                        *
                        *	INTO THE PIO.XXX FIELDS.
                        *
                        *	THE DEFAULT BLOCK DETERMINES THE VALUES FOR THE DEVICE AND EXTENSION
                        *	FIELDS, IF THEY ARE UNSPECIFIED. IF *CAD* IS ENTERED
                        *	AT *CAD*, AN UNSPECIFIED NAME FIELD IS RETURNED AS ZERO BYTES.
                        *	IF ENTERED AT *CAD.*, AN UNSPECIFIED NAME FIELD IS
                        *	RETURNED AS 200Q (MATCH-ONE) BYTES.
                        *
                        *	ENTRY	(DE) = POINT TO DEFAULT BLOCK
                        *		(HL) = POINTER TO TEXT
                        *	EXIT	'C' SET IF ERROR
                        *		 (A) = ERROR CODE
                        *		'C' CLEAR IF OK
                        *		 (HL) = POINTS PAST FILE NAME
                        *		 'Z' SET IF NULL NAME
                        *		 'Z' CLEAR IF NON-NULL
                        *		  PIO.DIR.NAM = NAME
                        *		  PIO.DIR.EXT = EXTENSION
                        *		  PIO.DEV = DEVICE CODE
                        *		  PIO.UNI = UNIT NUMBER (ASCII DIGIT)
                        *	USES	ALL

2BEF  AF                CAD	XRA	A	;SET TO NULLS
2BF0  C3 F52B           	JMP	CAD0

2BF3  3E 80             CAD.	MVI	A,200Q
2BF5  E5                CAD0	PUSH	H
2BF6  32 942C           	STA	CADA	;SAVE DEFAULT VALUE

                        *	SET DEFAULTS IN PIO.xxx

2BF9  21 3A35           	LXI	H,PIO.DEV
2BFC  01 0300           	LXI	B,3
2BFF  CD AA18           	CALL	$MOVE	;SET DEFALUT DEVICE
2C02  01 0300           	LXI	B,3
2C05  21 4535           	LXI	H,PIO.DIR+DIR.EXT
2C08  CD AA18           	CALL	$MOVE	;SET DEFAULT EXTENSION
2C0B  E1                	POP	H
2C0C  CD 6E2F           	CALL	$SOB	;SKIP BLANKS
2C0F  06 00             	MVI	B,0
2C11  FE 3F             	CPI	'?'
2C13  CA 2A2C           	JE	CAD1	;IS '?'
2C16  FE 2A             	CPI	'*'
2C18  CA 2A2C           	JE	CAD1	;IS '*'
2C1B  FE 2E             	CPI	'.'
2C1D  CA 2A2C           	JE	CAD1	;IS '.'
2C20  FE 41             	CPI	'A'
2C22  DA 8A2C           	JC	CAD4	;NOT NAME
2C25  FE 5B             	CPI	'Z'+1
2C27  D2 8A2C           	JNC	CAD4	;NOT NAME

                        *	HAVE ALPHA STRING. CRACK IT

2C2A  CD 952C           CAD1	CALL	DNT	;DECODE NEXT TOKEN
2C2D  DA 902C           	JC	CAD5	;ERROR
2C30  FE 3A             	CPI	':'
2C32  C2 4D2C           	JNE	CAD2	;NOT DEVICE

                        *	HAVE EXPLICIT DEVICE

2C35  23                	INX	H	;SKIP ':'
2C36  3E 03             	MVI	A,3
2C38  B9                	CMP	C
2C39  DA 902C           	JC	CAD5	;TOO MANY CHARACTERS
2C3C  01 0300           	LXI	B,3
2C3F  E5                	PUSH	H	;SAVE (HL)
2C40  21 3A35           	LXI	H,PIO.DEV
2C43  CD AA18           	CALL	$MOVE	;SET EXPLICIT DEVICE
2C46  E1                	POP	H
2C47  CD 952C           	CALL	DNT	;DECODE NEXT TOKEN
2C4A  DA 902C           	JC	CAD5	;ERROR

                        *	DECODE NAME

2C4D  01 0800           CAD2	LXI	B,8	;(BC) = COUNT
2C50  E5                	PUSH	H	;SAVE TEXT ADDR

                        *	SEE IF NAME IS  UNSPECIFIED

2C51  21 3D35           	LXI	H,PIO.DIR+DIR.NAM
2C54  E5                	PUSH	H	;SAVE ADDRESS OF DIR.NAM
2C55  CD AA18           	CALL	$MOVE	;MOVE IN NAME
2C58  E1                	POP	H	;(HL) = #PIO.DIR+DIR.NAM
2C59  7E                	MOV	A,M
2C5A  A7                	ANA	A
2C5B  C2 692C           	JNZ	CAD2.6	;IS SPECIFIED
2C5E  3A 942C           	LDA	CADA	;(A) = FILL CHARACTER
2C61  0E 08             	MVI	C,8	;(C) = COUNT
2C63  77                CAD2.4	MOV	M,A
2C64  23                	INX	H
2C65  0D                	DCR	C
2C66  C2 632C           	JNZ	CAD2.4
2C69  E1                CAD2.6	POP	H
2C6A  7E                	MOV	A,M	;(A) = DELIMITER
2C6B  FE 2E             	CPI	'.'
2C6D  C2 882C           	JNE	CAD3	;NOT EXTENSION

                        *	HAVE EXPLICIT EXTENSION

2C70  23                	INX	H
2C71  CD 952C           	CALL	DNT
2C74  DA 902C           	JC	CAD5	;ERROR
2C77  3E 03             	MVI	A,3
2C79  B9                	CMP	C
2C7A  DA 902C           	JC	CAD5	;TOO LONG
2C7D  01 0300           	LXI	B,3
2C80  E5                	PUSH	H	;SAVE TEXT POINTER
2C81  21 4535           	LXI	H,PIO.DIR+DIR.EXT
2C84  CD AA18           	CALL	$MOVE	;MOVE EXTENSION
2C87  E1                	POP	H

                        *	DONE WITH NAME. MUST HAVE LEGIT DELIMITER

2C88  06 01             CAD3	MVI	B,1	;(B) = NAME PRESENT FLAG

                        *	END OF NAME. EXIT
                        *	(B) = 0 IF NULL, (B) <> 0 IF NON-NULL

2C8A  CD 6E2F           CAD4	CALL	$SOB	;SKIP BLANKS
2C8D  78                	MOV	A,B
2C8E  A7                	ANA	A	;SET 'Z' IF NULL
2C8F  C9                	RET

                        *	ERROR

2C90  3E 07             CAD5	MVI	A,EC.IFN;ILLEGAL FILE NAME
2C92  37                	STC
2C93  C9                	RET

2C94  00                CADA	DB	0	;FILL CHARACTER FOR OMITTED NAME FIELD
2C95                    DNT	SPACE	4,10
                        **	DNT - DECODE NEXT TOKEN.
                        *
                        *	DNT COPIES THE NEXT ALPHANUMERIC FIELD INTO A ZERO-FILLED WORK AREA.
                        *
                        *	ENTRY	(HL) = TEXT POINTER
                        *	EXIT	'C' SET IF ERROR
                        *		'C' CLEAR IF OK
                        *		(A) = DELIMTER CHARACTER
                        *		(HL) UPDATED TO DELIMITER CHARACTER
                        *		(DNTA) = STRING
                        *		(C) = LENGTH
                        *		(DE) = #DNTA
                        *	USES	ALL

2C95  11 DF2C           DNT	LXI	D,DNTA
2C98  0E 09             	MVI	C,9	;(C) = SIZE OF DNTA
2C9A  41                	MOV	B,C	;(B) = MAX ALLOWED +1
2C9B  AF                	XRA	A
2C9C  12                DNT1	STAX	D	;ZERO BUFFER
2C9D  13                	INX	D
2C9E  0D                	DCR	C
2C9F  C2 9C2C           	JNZ	DNT1
2CA2  11 DF2C           	LXI	D,DNTA

                        *	COPY CHARACTERS

2CA5  7E                DNT2	MOV	A,M
2CA6  FE 3F             	CPI	'?'
2CA8  3E 80             	MVI	A,200Q
2CAA  CA C72C           	JE	DNT3	;IS MATCHONE
2CAD  7E                	MOV	A,M
2CAE  FE 2A             	CPI	'*'
2CB0  CA D12C           	JE	DNT5	;IS WILDCARD
2CB3  FE 30             	CPI	'0'
2CB5  DA DA2C           	JC	DNT4	;NOT ALPHANUMERIC
2CB8  FE 3A             	CPI	'9'+1
2CBA  DA C72C           	JC	DNT3	;NUMERIC
2CBD  FE 41             	CPI	'A'
2CBF  DA DA2C           	JC	DNT4	;DELIMITER
2CC2  FE 5B             	CPI	'Z'+1
2CC4  D2 DA2C           	JNC	DNT4	;DELIMITER

                        *	HAVE GOOD CHARACTER

2CC7  12                DNT3	STAX	D	;STORE CHAR
2CC8  13                	INX	D
2CC9  23                	INX	H
2CCA  0C                	INR	C	;COUNT
2CCB  05                	DCR	B	;LIMIT DECREMENT
2CCC  C2 A52C           	JNZ	DNT2	;NOT OVERFLOW

                        *	OVERFLOW

2CCF  37                	STC			FLAG;ERR
2CD0  C9                	RET

                        *	IS '*' WILDCARD

2CD1  3E 80             DNT5	MVI	A,200Q
2CD3  12                	STAX	D
2CD4  13                	INX	D
2CD5  05                	DCR	B
2CD6  C2 D12C           	JNZ	DNT5	;FILL WITH MATCH ONE
2CD9  23                	INX	H	;SKIP '*'

                        *	END OF STRING

2CDA  A7                DNT4	ANA	A	;CLEAR 'C'
2CDB  11 DF2C           	LXI	D,DNTA	;SET POINTER
2CDE  C9                	RET

2CDF   (0009)           DNTA	DS	9	;WORK AREA
2CE8                    EBM	SPACE	4,10
                        **	EBM - EXPAND BUFFER TO MAXIMUM.
                        *
                        *	EBM IS CALLED TO EXPAND THE BUFFER 'BUF' TO THE MAXIMUM SIZE.
                        *	WHICH DOES NOT REQUIRE THE OVERLAYING OF THE SYSTEM.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(BUFSIZ) = BUFFER SIZE (MULTIPLE OF 256)
                        *	USES	ALL

2CE8  2A D020           EBM	LHLD	S.SYSM
2CEB  11 F6FF           	LXI	D,-10
2CEE  19                	DAD	D	;THROW IN SOME SLOP
2CEF  FF 2A             	SCALL	.SETTP
2CF1  DA AF29           	JC	IERR1	;NOT ENOUGH MEMORY
2CF4  2A D220           	LHLD	S.USRM

2CF7  7C                	MOV	A,H	;(A) = LIMIT/256
2CF8  32 5E30           	STA	OBUFLIM	;SET LIMIT
2CFB  C9                	RET
2CFC                    CDA	SPACE	4,10
                        **	CDA - CONVERT DIRECTORY FORMAT TO ASCII.
                        *
                        *	CDA COPIES A DIRECTORY ENTRY FROM PIO.XXX TO A TARGET FIELD.
                        *	THE DEVICE SPECIFICATION (IN PIO.DEV AND PIO.UNI) IS ALSO ENCODED.
                        *	THE TARGET FIELD IS LEFT IN THE FORM:
                        *
                        *	DEV:NAME.XXX <00>
                        *
                        *	ENTRY	(HL) = FWA NAME FIELD
                        *	EXIT	(A) = 0, HAVE WILDCARD
                        *		    = 1, NO WILDCARDS USED
                        *		'C' CLEAR
                        *	USES	ALL

2CFC  01 0003           CDA	LXI	B,3*256	;(B) = CHARACTER COUNT, (C) = WILDCARD FLAG
2CFF  11 3A35           	LXI	D,PIO.DEV
2D02  CD 202D           	CALL	CDA5	;COPY IT
2D05  36 3A             	MVI	M,':'
2D07  23                	INX	H
2D08  06 08             	MVI	B,8
2D0A  11 3D35           	LXI	D,PIO.DIR+DIR.NAM
2D0D  CD 202D           	CALL	CDA5	;COPY IT
2D10  36 2E             	MVI	M,'.'
2D12  23                	INX	H
2D13  06 03             	MVI	B,3
                        	ERRNZ	DIR.EXT-DIR.NAM-8
2D15  CD 202D           	CALL	CDA5	;COPY IT
2D18  36 00             	MVI	M,0	;FLAG END OF NAME
2D1A  79                	MOV	A,C	;(A) (BIT 7) = 1 IF WILDCARDS
2D1B  07                	RLC
2D1C  2F                	CMA
2D1D  E6 01             	ANI	1	;=0 IF WILDCARD
2D1F  C9                	RET
2D20                    CDA5	SPACE	2,10
                        **	CDA5 - CONVERT DIRECTORY FIELD TO ASCII.
                        *
                        *	ZEROS ARE IGNORED, 200Q WILDCARDS ARE MAPPED TO '?'
                        *
                        *	ENTRY	(DE) = FROM
                        *		(HL) = T0
                        *		(B) = COUNT
                        *		(C) = ORA ACCUMULATOR
                        *	EXIT	(DE) ADVANCED
                        * 		(HL) = (HL)+(B)
                        *		(C) = (C) .OR. (FROM CHARACTERS PROCESSED)
                        *	USES	ALL

2D20  1A                CDA5	LDAX	D	;(A) = CHARACTER
2D21  B1                	ORA	C
2D22  4F                	MOV	C,A
2D23  1A                	LDAX	D
2D24  13                	INX	D
2D25  A7                	ANA	A
2D26  CA 302D           	JZ	CDA7	;IS 00
2D29  F2 2E2D           	JP	CDA6	;NOT 200Q
2D2C  3E 3F             	MVI	A,'?'
2D2E  77                CDA6	MOV	M,A
2D2F  23                	INX	H	;INCREMENT TO
2D30  05                CDA7	DCR	B
2D31  C2 202D           	JNZ	CDA5	;IF MORE TO GO
2D34  C9                	RET
2D35                    EWS	SPACE	4,10
                        **	EWS - EXPAND WILDCARD SPECIFICATION.
                        *
                        *	DWS ENTERS THE FILE NAME IN PIO.XXX INTO THE MANAGED TABLE
                        *	NAMTAB. IF THE FILE NAME CONTAINS WILDCARDS, THE DIRECTORY
                        *	IS READ FOR ELIGIBLE FILES.
                        *
                        *	ENTRY	PIO.XXX = FILE NAME
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *	USES	ALL

2D35  CD 942A           EWS	CALL	AEN	;TRY TO ENTER IT
2D38  D0                	RNC			NO;WILDCARDS, AM DONE

                        *	IS WILDCARD. LOOK UP DEVICE TYPE

2D39  2A B830           	LHLD	NAMTLEN
2D3C  11 4335           	LXI	D,NAMTAB-FB.NAML
2D3F  19                	DAD	D	;(HL) = ADDRESS OF LAST ENTRY
2D40  CD EF2B           	CALL	CAD	;CONVERT ASCII NAME TO DIRECTORY FORMAT
2D43  2A B830           	LHLD	NAMTLEN
2D46  11 EFFF           	LXI	D,-FB.NAML
2D49  19                	DAD	D
2D4A  22 B830           	SHLD	NAMTLEN	;REMOVE WILDCARD FROM TABLE
2D4D  CD 522F           	CALL	$MOVEL
2D50  03003A35 6C30     	DW	3,PIO.DEV,DIRNAM;SET DIRECTORY NAME IN XXX:DIRECT.SYS
2D56  CD 522F           	CALL	$MOVEL
2D59  0B003D35 F42D     	DW	8+3,PIO.DIR+DIR.NAM,EWSC;SAVE WILDCARD PATTERN
2D5F  01 D62D           	LXI	B,EWSB
2D62  21 6C30           	LXI	H,DIRNAM
2D65  FF 2B             	SCALL	.DECODE ;GET INFORMATION ABOUT DEVICE
2D67  D8                	RC			ERROR
2D68  3A D62D           	LDA	EWSB	;SEE IF A DIRECTORY DEVICE
2D6B  E6 01             	ANI	DT.DD
2D6D  3E 05             	MVI	A,EC.DNS	;ASSUME DEVICE NOT SUITABLE
2D6F  37                	STC
2D70  C8                	RZ			ERROR

                        *	IS DIRECTORY DEVICE. OPEN DIRECTORY

2D71  21 6C30           	LXI	H,DIRNAM
2D74  3E 02             	MVI	A,CN.DIR
2D76  FF 22             	SCALL	.OPENR
2D78  3E 80             	MVI	A,PEC.DF
2D7A  D8                	RC			DEVICE;FORMAT FAILURE

                        *	READ DIRECTORY ENTRYS FOR MATCH

2D7B  2A 5121           EWS1	LHLD	DIRWRKP
2D7E  EB                	XCHG			DE;= POINTER TO THE SCRATCH
2D7F  01 0002           	LXI	B,512
2D82  3E 02             	MVI	A,CN.DIR
2D84  D5                	PUSH	D	;SAVE ADDRESS
2D85  FF 04             	SCALL	.READ	;READ BLOCK
2D87  E1                	POP	H	;(HL) = DIRECTORY ADDRESS
2D88  DA CB2D           	JC	EWS7	;ALL DONE

                        *	LOOK AT DIRECTORY BLOCK FOR MATCHES

2D8B  E5                	PUSH	H
2D8C  2A 5121           	LHLD	DIRWRKP
2D8F  11 FB01           	LXI	D,DIS.ENL
2D92  19                	DAD	D
2D93  4E                	MOV	C,M	;C  = LENGTH
2D94  E1                	POP	H

                        *	CHECK NEXT ENTRY

2D95  7E                EWS3	MOV	A,M	;(A) = 1ST CHAR THIS ENTRY
2D96  A7                	ANA	A
2D97  CA 7B2D           	JZ	EWS1	;END OF BLOCK
                        	ERRNZ	DF.EMP-377Q
2D9A  3C                	INR	A
2D9B  CA C52D           	JZ	EWS6	;ENTRY EMPTY
                        	ERRNZ	DF.CLR-376Q
2D9E  3C                	INR	A
2D9F  CA CB2D           	JZ	EWS7	;END OF LIST
2DA2  E5                	PUSH	H
2DA3  11 F42D           	LXI	D,EWSC
2DA6  06 0B             	MVI	B,8+3
2DA8  CD BF2B           	CALL	CWM	;CHECK WILDCARD MATCH
2DAB  C2 C42D           	JNZ	EWS4	;NO MATCH

                        *	HAVE MATCH. ADD TO LSIT

2DAE  D1                	POP	D	;(DE) = FROM
2DAF  D5                	PUSH	D
2DB0  CD 3A2B           	CALL	CSF	;CHECK FOR SPECIAL FILE
2DB3  CA C42D           	JZ	EWS4	;IS SPECIAL FILE, DONT ENTER
2DB6  C5                	PUSH	B	;SAVE (C)
2DB7  01 0B00           	LXI	B,8+3
2DBA  21 3D35           	LXI	H,PIO.DIR+DIR.NAM
2DBD  CD AA18           	CALL	$MOVE
2DC0  CD 942A           	CALL	AEN	;ADD TO TABLE
2DC3  C1                	POP	B	;RESTORE (C)

                        *	LOOKUP NEXT ENTRY

2DC4  E1                EWS4	POP	H
2DC5  06 00             EWS6	MVI	B,0
2DC7  09                	DAD	B	;POINT TO NEXT
2DC8  C3 952D           	JMP	EWS3

                        *	ALL DONE. CLOSE DIRECTORY FILE

2DCB  3E 02             EWS7	MVI	A,CN.DIR
2DCD  FF 26             	SCALL	.CLOSE
2DCF  C9                	RET

2DD0  53593080 8080     EWSA	DB	'SY0',200Q,200Q,200Q

2DD6   (001E)           EWSB	DS	30

2DF4   (000B)           EWSC	DS	8+3	;WILDCARD PATTERN FOR DIRECTORY SEARCH
2DFF                    INA	SPACE	4,10
                        **	INA - INCREASE NAMTAB ALLOCATION.
                        *
                        *	INA IS CALLED TO INCREASE THE NAMTAB ALLOCATION. THE
                        *	BUFFER AREA IS MOVED UP TO MAKE ROOM.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,H,L

2DFF  21 BB30           INA	LXI	H,NAMTMAX+1
2E02  34                	INR	M	;INCREMENT LENGTH
2E03  21 6130           	LXI	H,BUFPTR+1
2E06  34                	INR	M	;MOVE BUFFER
2E07  2A 6230           	LHLD	BUFSIZ
2E0A  7C                	MOV	A,H
2E0B  B5                	ORA	L
2E0C  3E 11             	MVI	A,EC.NEM;FLAG OUT OF MEMORY IF BUFFER NOT EMPTY
2E0E  C2 3B2A           	JNZ	ERROR
2E11  C5                	PUSH	B
2E12  D5                	PUSH	D
2E13  CD 6A2E           	CALL	SBE	;NOTIFY SYSTEM
2E16  D1                	POP	D
2E17  C1                	POP	B
2E18  C9                	RET
2E19                    LSN	SPACE	4,10
                        **	LSN - LOCATE SOURCE NAME
                        *
                        *	LSN SCANS THE COMMAND LINE FOR THE FIRST SOURCE FILE NAME.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(HL) = 1ST FILE NAME FWA
                        *	USES	A,F,H,L

2E19  2A 6630           LSN	LHLD	LINEP	;HL = Line Pointer

2E1C  7E                LSN1	MOV	A,M
2E1D  23                	INX	H
2E1E  FE 3D             	CPI	'='
2E20  C8                	RE			GOT;IT

2E21  A7                	ANA	A
2E22  C2 1C2E           	JNZ	LSN1	;MORE LINE

2E25  2A 6630           	LHLD	LINEP	;Is no '='
2E28  C9                	RET
2E29                    MWN	SPACE	4,10
                        **	MWN - MERGE WILDCARD NAMES.
                        *
                        *	MWN MERGES A COMPLETELY SPECIFIED FILENAME WITH A WILDCARDED COMPLETELY
                        *	SPECIFIED FILE NAME.
                        *
                        *	BOTH FILE NAMES SHOULD HAVE THE SAME DEVICE SPECIFICATION.
                        *
                        *	FILE NAME FORMAT:
                        *
                        *	DEV:NAMEXXXX.EXT 00
                        *
                        *	ENTRY	(BC) = ADDRESS OF WILDCARDED ASCII NAME
                        *		(DE) = ADDRESS OF NON-WC ASCII NAME
                        *		(HL) = ADDRESS FOR RESULTANT ASCII NAME
                        *	EXIT	NONE
                        *	USES	ALL

2E29  E5                MWN	PUSH	H	;SAVE TARGET ADDRESS
2E2A  C5                	PUSH	B	;SAVE WC PATTERN
2E2B  EB                	XCHG			(HL);= MASTER NAME
2E2C  CD EF2B           	CALL	CAD	;CONVERT TO DIRECTORY FORMAT
2E2F  CD 522F           	CALL	$MOVEL
2E32  0B003D35 2935     	DW	8+3,PIO.DIR,MWNA;(MWNA) = DECODED MASTER
2E38  E1                	POP	H	;(HL) = WC PATTERN
2E39  CD EF2B           	CALL	CAD	;(PIO.DIR) = WC PATTERN
2E3C  11 2935           	LXI	D,MWNA	;(DE) = MASTER PATTERN
2E3F  21 3D35           	LXI	H,PIO.DIR;(DE) = WC PATTERN ADDRESS
2E42  0E 0B             	MVI	C,8+3	;MERGE NAME AND EXTENSION

                        *	MERGE NAMES

2E44  7E                MWN1	MOV	A,M	;(A) = WC PATTERN
2E45  A7                	ANA	A
2E46  F2 4A2E           	JP	MWN2	;USE THIS
2E49  1A                	LDAX	D	;IS MATCH CHARACTER, USE MASTER INSTEAD
2E4A  77                MWN2	MOV	M,A	;STORE CHARACTER
2E4B  13                	INX	D
2E4C  23                	INX	H
2E4D  0D                	DCR	C
2E4E  C2 442E           	JNZ	MWN1	;MERGE TILL DONE
2E51  E1                	POP	H	;(HL) = TARGET ADDRESS
2E52  C3 FC2C           	JMP	CDA	;CONVERT DIRECTORY FORMAT TO ASCII
2E55                    REN	SPACE	4,10
                        **	REN - REMOVE ENTRY FROM *NAMTAB*
                        *
                        *	REN REMOVES THE FIRST 'FB.NAML' BYTES FROM NAMTAB.
                        *
                        *	THE AMOUNT (FB.NAML) IS REMOVED FROM THE SIZE OF THE TABLE. THE
                        *	TABLE IS NOT CHECKED FOR UNDERFLOW, THE CALLER MUST GUARANTEE THE
                        *	PRESENSE OF AT LEAST FB.NAML BYTES IN NAMTAB.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

2E55  2A B830           REN	LHLD	NAMTLEN
2E58  11 EFFF           	LXI	D,-FB.NAML
2E5B  19                	DAD	D	;REMOVE COUNT FROM LEN
2E5C  22 B830           	SHLD	NAMTLEN
2E5F  44                	MOV	B,H
2E60  4D                	MOV	C,L	;(BC) = REMAINING LENGTH
2E61  11 6535           	LXI	D,NAMTAB+FB.NAML;(DE) = START OF 2ND ENTRY
2E64  21 5435           	LXI	H,NAMTAB
2E67  C3 AA18           	JMP	$MOVE	;MOVE DOWN AND RETURN
2E6A                    SBE	SPACE	4,10
                        **	SBE - SET BUFFER EMPTY.
                        *
                        *	THE SYSTEM IS NOTIFIED.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

2E6A  21 0000           SBE	LXI	H,0
2E6D  22 6230           	SHLD	BUFSIZ
2E70  2A 6030           	LHLD	BUFPTR	;(HL) = BUFFER FWA (AND LWA!)
2E73  23                	INX	H
2E74  23                	INX	H
2E75  FF 2A             	SCALL	.SETTP
2E77  D0                	RNC			OK
2E78  C3 3B2A           	JMP	ERROR	;NOT ENOUGH ROOM
2E7B                    SFS	SPACE	4,10
                        **	SFS - SKIP FILE SEPERATOR.
                        *
                        *	SFS IS CALLED TO SKIP OVER THE CHARACTERS SEPERATING ONE
                        *	FILE NAME FROM ANOTHER ON THE LINE. THE FILES MAY BE SEPERATED
                        *	BY BLANKS OR A COMMA ALONE, OR BY BLANKS WITH A COMMA. THE
                        *	SYNTAX IS
                        *
                        *	<BLANKS> <,> <BLANKS>
                        *
                        *	ONE, TWO OR ALL THREE FIELDS MAY BE PRESENT.
                        *
                        *	ENTRY	(HL) = POINT TO START OF SEP FIELD
                        *	EXIT	(HL) ADVANCED PAST SEPERATOR FIELD
                        *	USES	A,F,H,L

2E7B  CD 6E2F           SFS	CALL	$SOB	;SKIP BLANKS
2E7E  7E                	MOV	A,M
2E7F  FE 2C             	CPI	','
2E81  C2 852E           	JNE	SFS1	;NOT ,
2E84  23                	INX	H	;SKIP ,
2E85  C3 6E2F           SFS1	JMP	$SOB	;GET ANY MORE BLANKS AND EXIT
2E88                    SND	SPACE	4,10
                        **	SND - SET NEW DEFAULTS.
                        *
                        *	SND IS CALLED TO SET A NEW DEFAULT DEVICE AND EXTENSION
                        *	IN THE 'DEFALT' AREA.
                        *
                        *	ENTRY	PIO.DEV = DEVICE CODE
                        *		PIO.UNI = UNIT #
                        *		PIO.DIR+DIR.EXT = EXTENSION
                        *	EXIT	NONE
                        *	USES	NONE

2E88  CD 2C19           SND	CALL	$SAVALL	;SAVE REGS
                        	ERRNZ	PIO.UNI-PIO.DEV-2
2E8B  CD 522F           	CALL	$MOVEL
2E8E  0300              	DW	3
2E90  3A35              	DW	PIO.DEV
2E92  8C30              	DW	SOURCE+DEFAULT

2E94  CD 522F           	CALL	$MOVEL
2E97  0300              	DW	3
2E99  4535              	DW	PIO.DIR+DIR.EXT
2E9B  8F30              	DW	SOURCE+DEFAULT+3
2E9D  C3 2719           	JMP	$RSTALL	;RETURN
2EA0                    SRCDRVR	SPACE	4,10
                        **	SRCDRVR	- Source Device Driver
                        *
                        *	SRCDRVR invokes the Source device Driver
                        *
                        *	ENTRY:	NONE
                        *
                        *	EXIT:	NONE
                        *
                        *	USES:	NONE

2EA0  F5                SRCDRVR	PUSH	PSW
2EA1  3A 9730           	LDA	SOURCE+UNIT
2EA4  32 3121           	STA	AIO.UNI
2EA7  F1                	POP	PSW
2EA8  C3 9430           	JMP	SOURCE+DRIVER
2EAB                    	STL	'COMMON DECKS'
2EAB                    	EJECT
2EAB                    	XTEXT	CDEHL
2EAB                    CDEHL	SPACE	4,10
                        **	$CDEHL - COMPARE (DE) TO (HL)
                        *
                        *	$CDEHL COMPARES (DE) TO (HL) FOR EQUALITY.
                        *
                        *	ENTRY	NONE
                        *	EXIT	'Z' SET IF (DE) = (HL)
                        *	USES	A,F

      = 188E            $CDEHL	EQU	030216A 		; IN H17 ROM
2EAB                    	XTEXT	CHL
2EAB                    CHL	SPACE	4,10
                        **	$CHL - COMPLEMENT (HL).
                        *
                        *	(HL) = -(HL)		TWO'S COMPLEMENT
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,H,L

      = 1894            $CHL	EQU	030224A 		; IN H17 ROM
2EAB                    	XTEXT	COMP
2EAB                    COMP	SPACE	4,10
                        **	$COMP - COMPARE TWO CHARACTER STRINGS.
                        *
                        *	$COMP COMPARES TWO BYTE STRINGS.
                        *
                        *	ENTRY	(C) = COMPARE COUNT
                        *		(DE) = FWA OF STRING #1
                        *		(HL) = FWA OF STRING #2
                        *	EXIT	'Z' CLEAR, IS MIS-MATCH
                        *		 (C) = LENGTH REMAINING
                        *		 (DE) = ADDRESS OF MISMATCH IN STRING#1
                        *		 (HL) = ADDRESS OF MISMATCH IN STRING #2
                        *		'C' SET, HAVE MATCH
                        *		 (C) = 0
                        *		 (DE) = (DE) + (0C)
                        *		 (HL) = (HL) + (0C)
                        *	USES	A,F,C,D,E,H,L

      = 1830            $COMP	EQU	030060A 		; IN H17 ROM
2EAB                    	XTEXT	CRLF
2EAB                    CRLF	SPACE	4,10
                        **	$CRLF - TYPE CARRIAGE RETURN/ LINE FEED
                        *
                        *	$CRLF IS USED TO GENERATE PADDED CRLF'S.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(A) = 0
                        *	USES	A,F

2EAB  3E 0A             $CRLF	MVI	A,NL
2EAD  FF 02             	SCALL	.SCOUT
2EAF  AF                	XRA	A
2EB0  C9                	RET
2EB1                    	XTEXT	DADA
2EB1                    DADA	SPACE	4,10
                        **	$DADA - PERFORM (H,L) = (H,L) + (0,A)
                        *
                        *	ENTRY	(H,L) = BEFORE VALUE
                        *		(A) = BEFORE VALUE
                        *	EXIT	(H,L) = (H,L) + (0,A)
                        *		'C' SET IF OVERFLOW
                        *	USES	F,H,L

      = 183A            $DADA	EQU	030072A 		; IN H17 ROM
2EB1                    	XTEXT	DADA2
2EB1                    DADA2	SPACE	4,10
                        **	$DADA. - ADD (0,A) TO (H,L)
                        *
                        *	ENTRY	NONE
                        *	EXIT	(HL) = (HL) + (0A)
                        *	USES	A,F,H,L

      = 1841            $DADA.	EQU	030101A 		; IN H17 ROM
2EB1                    	XTEXT	DTB
2EB1                    	SPACE	4,10
                        **	$DTB - DELETE TRAILING BLANKS.
                        *
                        *	$DTB DELETES THE TRAILING BLANKS FROM A CODED LINE.
                        *
                        *	ENTRY	(HL) = LINE FWA
                        *	EXIT	(A) = LENGTH OF RESULT (ENCLUDING 00 TERMINATOR BYTE)
                        *	USES	A,F

2EB1  D5                $DTB	PUSH	D			; SAVE (DE)
2EB2  54                	MOV	D,H
2EB3  5D                	MOV	E,L			; (DE) = FWA
2EB4  1B                	DCX	D			; (DE) = FWA-1
2EB5  7E                $DTB1	MOV	A,M
2EB6  23                	INX	H
2EB7  A7                	ANA	A			; FIND END OF LINE
2EB8  C2 B52E           	JNZ	$DTB1
2EBB  2B                	DCX	H			; (HL) = ADDRESS OF TERMINATING BYTE

                        *	GOT END OF LINE. DELETE TRAILING BLANKS

2EBC  2B                $DTB2	DCX	H			; BACKUP ONE CHARACTER
2EBD  CD 8E18           	CALL	$CDEHL
2EC0  CA C92E           	JE	$DTB3			; GONE PAST FRONT OF LINE, IS ALL BLANKS
2EC3  7E                	MOV	A,M
2EC4  FE 20             	CPI	' '
2EC6  CA BC2E           	JE	$DTB2			; GOT BLANK

                        *	HAVE TRIMED LINE. COMPUTE LENGTH

2EC9  23                $DTB3	INX	H
2ECA  36 00             	MVI	M,0			; TERMINATE LINE
2ECC  7D                	MOV	A,L
2ECD  93                	SUB	E			; (A) = LENGTH +1 (FOR 00 BYTE)
2ECE  EB                	XCHG
2ECF  23                	INX	H			; (HL) = LINE FWA
2ED0  D1                	POP	D			; RESTORE (DE)
2ED1  C9                	RET
2ED2                    	XTEXT	DU66
2ED2                    DU66	SPACE	4,10
                        **	$DU66 - UNSIGNED 16 / 16 DIVIDE.
                        *
                        *	(HL) = (BC)/(DE)
                        *
                        *	ENTRY	(BC), (DE) PRESET
                        *	EXIT	(HL) = RESULT
                        *		(DE) = REMAINDER
                        *	USES	ALL

      = 1846            $DU66	EQU	030106A 		; IN H17 ROM
2ED2                    	XTEXT	FERROR
2ED2                    	SPACE	4,10
                        **	$FERROR - PROCESS FILE ERRORS.
                        *
                        *	$FERROR IS CALLED TO COMPLAIN ABOUT AN ERROR ENCOUNTERED
                        *	WHEN PROCESSING FILES.
                        *
                        *	ENTRY	(A) = ERROR CODE
                        *		(HL) = ADDRESS OF FILE NAME - FB.NAM
                        *	EXIT	TO RESTART
                        *	USES	ALL

2ED2  F5                $FERROR PUSH	PSW			; SAVE CODE
2ED3  CD 5E19           	CALL	$TYPTX
2ED6  0A457272 6F72206F 	DB	NL,'Error on file',' '+200Q
2EDE  6E206669 6C65A0
2EE5  11 0A00           	LXI	D,FB.NAM
2EE8  19                	DAD	D

                        *	PRINT FILE NAME

2EE9  7E                $FERR1	MOV	A,M
2EEA  23                	INX	H			; ADVANCE MESSAGE
2EEB  A7                	ANA	A
2EEC  CA F42E           	JZ	$FERR2
2EEF  FF 02             	SCALL	.SCOUT
2EF1  C3 E92E           	JMP	$FERR1

                        *	TYPE ERROR MESSAGE

2EF4  CD 5E19           $FERR2	CALL	$TYPTX
2EF7  202DA0            	DB	' -',' '+200Q
2EFA  26 0A             	MVI	H,NL
2EFC  F1                	POP	PSW			; (A) = CODE
2EFD  FF 2F             	SCALL	.ERROR
2EFF  C3 FB22           	JMP	RESTART 		; EXIT
2F02                    	XTEXT	HLIHL
2F02                    HLIHL	SPACE	4,10
                        **	$HLIHL - LOAD HL INDIRECT THROUGH HL.
                        *
                        *	(HL) = ((HL))
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,H,L

      = 1889            $HLIHL	EQU	030211A 		; IN H17 ROM
2F02                    	XTEXT	ILDEHL
2F02                    	SPACE	4,10
                        ***	ILDEHL - INDEXED LOAD OF (DE) FROM (HL).
                        *
                        *	LOAD (DE) WITH THE FULL WORD VALUE POINTED TO BY (HL).
                        *
                        *	ENTRY:	(HL) = ADDRESS OF VALUE
                        *	EXIT:	(DE) = ((HL))
                        *		(HL) = (HL) + 2
                        *	USES:	D,E

2F02  5E                ILDEHL	MOV	E,M
2F03  23                	INX	H
2F04  56                	MOV	D,M
2F05  23                	INX	H
2F06  C9                	RET
2F07                    	XTEXT	INDL
2F07                    INDL	SPACE	4,10
                        **	$INDL - INDEXED LOAD.
                        *
                        *	$INDL LOADS DE WITH THE TWO BYTES AT (HL)+DISPLACMENT
                        *
                        *	THIS ACTS AS AN INDEXED FULL WORD LOAD.
                        *
                        *	(DE) = ( (HL) + DSPLACEMENT )
                        *
                        *	ENTRY	((RET)) = DISPLACMENT (FULL WORD)
                        *		(HL) = TABLE ADDRESS
                        *	EXIT	TO (RET+2)
                        *	USES	A,F,D,E

      = 189C            $INDL	EQU	030234A 		; IN H17 ROM
2F07                    	XTEXT	INDXX
2F07                    	SPACE	4,10
                        **	$INDLB	-  INDEXED LOAD BYTE
                        *
                        *	BYTE INDEXED LOAD PRIMITIVE
                        *
                        *	ENTRY:	HL = BASE ADDRESS
                        *		(RET) = FULL WORD RELOCATION
                        *	EXIT:	A = ( HL + (RET) )
                        *	USES:	A

2F07  EB                $INDLB	XCHG				; DE = BASE
2F08  E3                	XTHL				; SAVE	.DE.
2F09  D5                	PUSH	D			; SAVE	BASE
2F0A  C5                	PUSH	B			; SAVE	.BC.

2F0B  4E                	MOV	C,M
2F0C  23                	INX	H
2F0D  46                	MOV	B,M			; BC = OFFSET
2F0E  23                	INX	H			; HL =	.RET.

2F0F  EB                	XCHG				; HL = BASE
2F10  09                	DAD	B			; HL = BASE + OFFSET
2F11  7E                	MOV	A,M			; A  = ( BASE + OFFSET )
2F12  EB                	XCHG				; HL =	.RET.

2F13  C1                	POP	B			; RESTORE  .BC.
2F14  D1                	POP	D			; RESTORE  BASE
2F15  E3                	XTHL				; HL = .DE. ; (SP) = .RET.
2F16  EB                	XCHG				; DE = .DE. ; HL = BASE
2F17  C9                	RET
2F18                    	SPACE	4,10
                        **	$INDS	-  INDEXED STORE
                        *
                        *	INDEXED STORE PRIMITIVE.
                        *
                        *	ENTRY:	HL = BASE ADDRESS
                        *		DE = VALUE TO STORE
                        *	EXIT:	( HL + (RET) ) = DE
                        *	USES:	NONE

2F18  CD F62F           $INDS	CALL	XCHGBC
2F1B  E3                	XTHL				; SAVE	.BC.
2F1C  D5                	PUSH	D
2F1D  CD 022F           	CALL	ILDEHL			; DE = OFFSET
2F20  CD F62F           	CALL	XCHGBC			; BC = .RET.
2F23  EB                	XCHG				; DE = BASE ; HL = OFFSET
2F24  19                	DAD	D			; HL = BASE + OFFSET
2F25  EB                	XCHG
2F26  E3                	XTHL				; SAVE	BASE
2F27  EB                	XCHG				; DE = VALUE
2F28  CD 442F           	CALL	ISDEHL
2F2B  E1                	POP	H			; HL = BASE
2F2C  CD F62F           	CALL	XCHGBC
2F2F  E3                	XTHL				; RESTORE  .BC.
2F30  C3 F62F           	JMP	XCHGBC
2F33                    	SPACE	4,10
                        **	$INDSB	-  INDEXED BYTE STORE
                        *
                        *	INDEXED BYTE STORE.
                        *
                        *	ENTRY:	A = VALUE TO STORE
                        *		HL = BASE ADDRESS
                        *		(RET) = OFFSET
                        *	EXIT:	NONE
                        *	USES:	PSW

2F33  EB                $INDSB	XCHG				; DE = BASE
2F34  E3                	XTHL				; SAVE	.DE.
2F35  D5                	PUSH	D			; SAVE	BASE
2F36  C5                	PUSH	B			; SAVE	.BC.

2F37  4E                	MOV	C,M
2F38  23                	INX	H
2F39  46                	MOV	B,M			; BC = OFFSET
2F3A  23                	INX	H			; HL =	.RET.

2F3B  EB                	XCHG				; HL = BASE
2F3C  09                	DAD	B			; HL = BASE + OFFSET
2F3D  77                	MOV	M,A			; ( BASE + OFFSET ) = A
2F3E  EB                	XCHG

2F3F  C1                	POP	B			; RESTORE  .BC.
2F40  D1                	POP	D			; RESTORE  BASE
2F41  E3                	XTHL				; HL = .DE. ; (SP) = .RET.
2F42  EB                	XCHG				; DE = .DE. ; HL = BASE
2F43  C9                	RET
2F44                    	XTEXT	ISDEHL
2F44                    	SPACE	4,10
                        **	ISDEHL	-  INDEXED STORE OF DE AT HL
                        *
                        *	STORE 'DE' AT THE ADDRESS POINTED TO BY 'HL', AND INCREMENT 'HL'
                        *	BY 2.
                        *
                        *	ENTRY:	DE = VALUE
                        *		HL = ADDRESS OF VALUE
                        *	EXIT:	(HL) = DE
                        *		HL = HL + 2
                        *	USES:	HL

2F44  73                ISDEHL	MOV	M,E
2F45  23                	INX	H
2F46  72                	MOV	M,D
2F47  23                	INX	H
2F48  C9                	RET
2F49                    	XTEXT	MCU
2F49                    	SPACE	4,10
                        **	MCU - MAP LOWER CASE TO UPPER CASE.
                        *
                        *	MCU MAPS A LOWER CASE ALPHABETIC TO UPPER
                        *	CASE.
                        *
                        *	ENTRY	(A) = CHARACTER
                        *	EXIT	(A) = CHARACTER RESULT
                        *	USES	A,F

2F49  FE 61             $MCU	CPI	'a'
2F4B  D8                	RC				; NOT LOWER CASE
2F4C  FE 7B             	CPI	'z'+1
2F4E  D0                	RNC				; NOT LOWER CASE
2F4F  D6 20             	SUI	'a'-'A'
2F51  C9                	RET
2F52                    	XTEXT	MOVE
2F52                    MOVE	SPACE	4,10
                        **	$MOVE - MOVE DATA
                        *
                        *	$MOVE MOVES A BLOCK OF BYTES TO A NEW MEMORY ADDRESS.
                        *	IF THE MOVE IS TO A LOWER ADDRESS, THE BYTES ARE MOVED FROM
                        *	FIRST TO LAST.
                        *
                        *	IF THE MOVE IS TO A HIGHER ADDRESS, THE BYTES ARE MOVED FROM
                        *	LAST TO FIRST.
                        *
                        *	THIS IS DONE SO THAT AN OVERLAPED MOVE WILL NOT 'RIPPLE'.
                        *
                        *	ENTRY	(BC) = COUNT
                        *		(DE) = FROM
                        *		(HL) = TO
                        *	EXIT	MOVED
                        *		(DE) = ADDRESS OF NEXT FROM BYTE
                        *		(HL) = ADDRESS OF NEXT *TO* BYTE
                        *		'C' CLEAR
                        *	USES	ALL

      = 18AA            $MOVE	EQU	030252A 		; IN H17 ROM
2F52                    	XTEXT	MOVEL
2F52                    	SPACE	4,10
                        **	$MOVEL - MOVE DATA
                        *
                        *	$MOVEL MOVES A BLOCK OF BYTES TO A NEW MEMORY ADDRESS.
                        *	IF THE MOVE IS TO A LOWER ADDRESS, THE BYTES ARE MOVED FROM
                        *	FIRST TO LAST.
                        *
                        *	IF THE MOVE IS TO A HIGHER ADDRESS, THE BYTES ARE MOVED FROM
                        *	LAST TO FIRST.
                        *
                        *	THIS IS DONE SO THAT AN OVERLAPED MOVE WILL NOT 'RIPPLE'.
                        *
                        *	CALL	$MOVEL
                        *	DW	COUNT
                        *	DW	FROM
                        *	DW	TO
                        *
                        *	ENTRY	((SP)) = RET
                        *		(RET+0) = COUNT (WORD VALUE)
                        *		(RET+2) = FROM
                        *		(RET+4) = TO
                        *	EXIT	TO (RET+6)
                        *		(DE) = ADDRESS OF NEXT FROM BYTE
                        *		(HL) = ADDRESS OF NEXT *TO* BYTE
                        *		'C' CLEAR
                        *	USES	ALL

2F52  E1                $MOVEL	POP	H			; (HL) = RET
2F53  4E                	MOV	C,M
2F54  23                	INX	H
2F55  46                	MOV	B,M			; (BC) = COUNT
2F56  23                	INX	H
2F57  5E                	MOV	E,M
2F58  23                	INX	H
2F59  56                	MOV	D,M			; (DE) = FROM
2F5A  23                	INX	H
2F5B  D5                	PUSH	D			; ((SP)) = FROM
2F5C  5E                	MOV	E,M
2F5D  23                	INX	H
2F5E  56                	MOV	D,M			; (DE) = TO
2F5F  23                	INX	H
2F60  E3                	XTHL				; ((SP)) = RET, (HL) = FROM
2F61  EB                	XCHG				; (DE) = FROM , (HL) = TO
2F62  C3 AA18           	JMP	$MOVE			; MOVE IT
2F65                    	XTEXT	MU86
2F65                    MU86	SPACE	4,10
                        **	$MU86 - MULTIPLY 8X16 UNSIGNED.
                        *
                        *	$MU86 MULTIPLIES A 16 BIT VALUE BY A 8
                        *	BIT VALUE.
                        *
                        *	ENTRY	(A) = MULTIPLIER
                        *		(DE) = MULTIPLICAND
                        *	EXIT	(HL) = RESULT
                        *		'Z' SET IF NOT OVERFLOW
                        *	USES	A,F,H,L

      = 1907            $MU86	EQU	031007A 		; IN H17 ROM
2F65                    	XTEXT	RCHAR
2F65                    RCHAR	SPACE	4,10
                        **	$RCHAR - READ SINGLE CHARACTER FROM CONSOLE.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(A) = CHARACTER
                        *	USES	A,F

2F65  FF 01             $RCHAR	SCALL	.SCIN
2F67  DA 652F           	JC	$RCHAR	;NOT READY
2F6A  C9                	RET

2F6B  FF 02             $WCHAR	SCALL	.SCOUT
2F6D  C9                	RET
2F6E                    	XTEXT	SAVALL
2F6E                    SAVALL	SPACE	3,10
                        **	$RSTALL - RESTORE ALL REGISTERS.
                        *
                        *	$RSTALL RESTORES ALL THE REGISTERS OFF THE STACK, AND
                        *	RETURNS TO THE PREVIOUS CALLER.
                        *
                        *	ENTRY	(SP) = PSW
                        *		(SP+2) = BC
                        *		(SP+4) = DE
                        *		(SP+6) = HL
                        *		(SP+8) = RET
                        *	EXIT	TO *RET*, REGISTERS RESTORED
                        *	USES	ALL

      = 1927            $RSTALL EQU	031047A 		; IN H17 ROM
2F6E                    	SPACE	3,10
                        **	$SAVALL - SAVE ALL REGISTERS ON STACK.
                        *
                        *	$SAVALL SAVES ALL THE REGISTERS ON THE STACK.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(SP) = PSW
                        *		(SP+2) = BC
                        *		(SP+4) = DE
                        *		(SP+6) = HL
                        *	USES	H,L

      = 192C            $SAVALL EQU	031054A 		; IN H17 ROM
2F6E                    	XTEXT	SOB
2F6E                    	SPACE	4,10
                        **	$SOB - SKIP OVER BLANKS.
                        *
                        *	$SOB IS CALLED TO SKIP AN ARBITRARILY LONG STRING OF BLANKS AND TABS.
                        *
                        *	ENTRY	(HL) = FWA OF (POSSIBLE) BLANK STRING
                        *	EXIT	(HL) = LWA+1 OF BLANK STRING (UNCHANGED IF NO BLANKS)
                        *		(A) = FIRST NON-BLANK, NON-TAB CHARACTER EEN
                        *	USES	A,F,H,L

2F6E  2B                $SOB	DCX	H			; PRE-DECREMENT
2F6F  23                $SOB1	INX	H
2F70  7E                	MOV	A,M
2F71  FE 20             	CPI	' '
2F73  CA 6F2F           	JE	$SOB1			; GOT BLANK
2F76  FE 09             	CPI	TAB
2F78  CA 6F2F           	JE	$SOB1			; GOT TAB
2F7B  C9                	RET
2F7C                    	XTEXT	TFN
2F7C                    TFN	SPACE	4,10
                        **	$TFN - TYPE FILE NAME.
                        *
                        *	$TFN TYPES THE FILE WHOSE NAME APPEARS IN AIO.XXX
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	A,F,B,H,L

2F7C  21 3221           $TFN	LXI	H,AIO.DIR+DIR.NAM
2F7F  06 08             $TFN.	MVI	B,8
2F81  CD 8A2F           	CALL	$TFN1			; TYPE NAME
2F84  CD 5E19           	CALL	$TYPTX
2F87  AE                	DB	'.'+200Q
2F88  06 03             	MVI	B,3

2F8A  7E                $TFN1	MOV	A,M
2F8B  A7                	ANA	A
2F8C  C4 952F           	CNZ	$TFN2
2F8F  23                	INX	H
2F90  05                	DCR	B
2F91  C2 8A2F           	JNZ	$TFN1
2F94  C9                	RET

2F95  FF 02             $TFN2	SCALL	.SCOUT
2F97  C9                	RET
2F98                    	XTEXT	TJMP
2F98                    TJMP   SPACE	 4,10
                        **     $TJMP - TABLE JUMP.
                        *
                        *      USAGE
                        *
                        *      CALL	 $TJMP		  (A) = INDEX
                        *      DW	 ADDR1
                        *      .	   .
                        *      .	   .
                        *      .	   .
                        *      DW	 ADDRN
                        *
                        *      ENTRY	(A) = INDEX
                        *      EXIT	TO PROCESSOR
                        *		 (A) = INDEX*2
                        *      USES	NONE

      = 1931            $TJMP	EQU	031061A 		; IN H17 ROM, (A) = INDEX*2

      = 1932            $TJMP.	EQU	031062A 		; IN H17 ROM
2F98                    	XTEXT	TYPCC
2F98                    	SPACE	4,10
                        **	$TYPCC - TYPE A CHARACTER STRING BY COUNT.
                        *
                        *	$TYPCC TYPES A STRING OF CHARACTERS. THE CALLER SUPPLIES
                        *	THE CHARACTER ADDRESS AND COUNT.
                        *
                        *	ENTRY	(HL) = ADDRESS
                        *		(A) = COUNT
                        *	EXIT	(HL) = LAST CHARACTER ADDRESS+1
                        *	USES	A,F,H,L

      = 2F98            $TYPCC	EQU	*

2F98  A7                	ANA	A
2F99  C8                	RZ				; NOTHING TO TYPE
2F9A  F5                	PUSH	PSW			; SAVE COUNT
2F9B  7E                	MOV	A,M			; (A) = CHARACTER
2F9C  23                	INX	H
2F9D  FF 02             	SCALL	.SCOUT
2F9F  F1                	POP	PSW
2FA0  3D                	DCR	A
2FA1  C3 982F           	JMP	$TYPCC
2FA4                    	XTEXT	TYPCH
2FA4                    TYPCH	SPACE	4,10
                        **	$TYPCH - TYPE SINGLE CHARACTER.
                        *
                        *	ENTRY	(RET) = CHARACTER
                        *	EXIT	TO (RET)+1
                        *		(A) = CHARACTER TYPED

2FA4  E3                $TYPCH	XTHL				; (HL) = RETURN ADDRESS
2FA5  7E                	MOV	A,M			; (A) = CHARACTER
2FA6  23                	INX	H
2FA7  E3                	XTHL				; RESTORE ADVANCED EXIT ADDRESS
                        *	JMP	$TYPC.
                                ERRNZ   *-$TYPC.
2FA8                            SPACE   4,10
                        **	$TYPC. - TYPE SINGLE CHARACTER.
                        *
                        *	ENTRY	(A) = CHARACTER
                        *	EXIT	TO (RET)

2FA8  FF 02             $TYPC.	SCALL	.SCOUT
2FAA  C9                	RET
      = 0001            $CMP$	EQU	1
2FAB                    	XTEXT	TYPLN
2FAB                    TYPLN	SPACE	4,10
                        **	$TYPLN - TYPE LINE.
                        *
                        *	$TYPLN IS CALLED TO TYPE A LINE OF TEXT. ZERO BYTES ARE
                        *	TAKEN AS CRLF (WITH THE PROPER PADDING)
                        *
                        *	CALL	$TYPLN
                        *	DB	N		BYTE COUNT OF FOLLOWING MESSAGE
                        *	DB	'N-CHARACTER MESSAGE'
                        *
                        *	ENTRY	(RET) = TEXT COUNT
                        *		(RET)+1 - (RET)+N = TEXT
                        *	EXIT	TO (RET)+N+1
                        *	USES	A,F
                        *

2FAB  E3                $TYPLN. XTHL				; (H,L) = COUNT ADDRESS
2FAC  7E                	MOV	A,M			; (A) = COUNT
2FAD  23                	INX	H			; (H,L)  = TEXT ADDRESS
2FAE  E5                	PUSH	H			; SAVE TEXT FWA
2FAF  CD 3A18           	CALL	$DADA			; CALCULATE RETURN ADDRESS
2FB2  E3                	XTHL				; (HL) = TEXT ADDRE
2FB3  CD B92F           	CALL	$TYPL.			; OUTPUT LINE
2FB6  E1                	POP	H			; (HL) = RETURN ADDRESS
2FB7  E3                	XTHL				; RESTORE (HL), SET RETURN ADDRESS
2FB8  C9                	RET
2FB9                    	SPACE	4,10
                        **	$TYPL. - TYPE LINE.
                        *
                        *	ENTRY	(HL) = ADDRESS
                        *		(A) = COUNT
                        *	EXIT	NONE
                        *	USES	A,F,H,L

      = 2FB9            $TYPL.	EQU	*

2FB9  A7                	ANA	A
2FBA  C8                	RZ				; NOTHING TO TYPE
2FBB  F5                	PUSH	PSW			; SAVE COUNT
2FBC  7E                	MOV	A,M			; (A) = CHARACTER
2FBD  23                	INX	H
2FBE  A7                	ANA	A
                        	IF	$CMP$			; IF HAVE COMPRESSED SPACES
                        	ENDIF
2FBF  CC AB2E           	CZ	$CRLF
2FC2  CD A82F           	CALL	$TYPC.			; TYPE CHARACTER
2FC5  F1                TPL1	POP	PSW
2FC6  3D                	DCR	A
2FC7  C2 B92F           	JNZ	$TYPL.
2FCA  C9                	RET

                        	IF	$CMP$			; IF COMPRESSED TEXT
                        	ENDIF
2FCB                    	XTEXT	TYPT2
2FCB                    TYPT2	SPACE	4,10
                        **	$TYPTX - TYPE TEXT.
                        *
                        *	$TYPTX IS CALLED TO TYPE A BLOCK OF TEXT ON THE SYSTEM CONSOLE.
                        *
                        *	IMBEDDED ZER0 BYTES INDICATE A CARRIAGE RETURN LINE FEED,
                        *	A BYTE WITH THE 200Q BIT SET IS THE LAST BYTE IN THE MESSAGE.
                        *
                        *	ENTRY	(RET) = TEXT
                        *	EXIT	TO (RET+LENGTH)
                        *	USES	A,F

      = 195E            $TYPTX	EQU	031136A 		; IN H17 ROM

      = 1964            $TYPTX. EQU	031144A 		; IN H17 ROM
2FCB                    	XTEXT	UDD
2FCB                    UDD	SPACE	4,10
                        **	$UDD - UNPACK DECIMAL DIGITS.
                        *
                        *	UDD CONVERTS A 16 BIT VALUE INTO A SPECIFIED NUMBER OF
                        *	DECIMAL DIGITS. THE RESULT IS ZERO FILLED.
                        *
                        *	ENTRY	(B,C) = ADDRESS VALUE
                        *		(A) = DIGIT COUNT
                        *		(H,L) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + (A)
                        *	USES	ALL

      = 196F            $UDD	EQU	031157A 		; IN H17 ROM
2FCB                    	XTEXT	UDDN
2FCB                    UDDN	SPACE	4,10
                        **	$UDDN - UNPACK DECIMAL DIGITS.
                        *
                        *	UDDN CONVERTS A 16 BIT VALUE INTO A SPECIFIED NUMBER OF
                        *	DECIMAL DIGITS. THE RESULT IS NULL FILLED TO THE LEFT.
                        *
                        *	ENTRY	(BC) = ADDRESS VALUE
                        *		(A) = DIGIT COUNT
                        *		(HL) = MEMORY ADDRESS
                        *	EXIT	(HL) = (HL) + (A)
                        *	USES	ALL

      = 2FCB            $UDDN	EQU	*

2FCB  CD 3A18           	CALL	$DADA
2FCE  E5                	PUSH	H			; SAVE FINAL (HL) VALUE

2FCF  F5                UDDN1	PUSH	PSW
2FD0  E5                	PUSH	H
2FD1  11 0A00           	LXI	D,10
2FD4  CD 4618           	CALL	$DU66			; (HL) = VALUE/10
2FD7  44                	MOV	B,H
2FD8  4D                	MOV	C,L			; (BC) = QUOTIENT
2FD9  E1                	POP	H
2FDA  3E 30             	MVI	A,'0'
2FDC  83                	ADD	E			; ADD REMAINDER
2FDD  2B                	DCX	H
2FDE  77                	MOV	M,A			; STORE DIGIT
2FDF  78                	MOV	A,B
2FE0  B1                	ORA	C
2FE1  CA EB2F           	JZ	UDDN2			; ALL ZEROS
2FE4  F1                	POP	PSW
2FE5  3D                	DCR	A
2FE6  C2 CF2F           	JNZ	UDDN1			; IF MORE TO GO

                        *	ALL DONE. EXIT

2FE9  E1                UDDN1.5 POP	H			; RESTORE H
2FEA  C9                	RET

                        *	DIGITS LEADING THIS ONE ARE ZERO. STORE NULLS INSTEAD.

2FEB  F1                UDDN2	POP	PSW
2FEC  3D                UDDN3	DCR	A
2FED  CA E92F           	JE	UDDN1.5 		; ALL DONE
2FF0  2B                	DCX	H
2FF1  36 00             	MVI	M,0
2FF3  C3 EC2F           	JMP	UDDN3
2FF6                    	XTEXT	XCHGBC
2FF6                    	SPACE	4,10
                        ***	XCHGBC - Exchange (HL) with (BC).
                        *
                        *	Entry:	NONE
                        *	Exit:	(HL) = (BC)
                        *		(BC) = (HL)
                        *	Uses:	B,C,H,L
                        *
                        *	Note:	Whoever wrote the original version of this routine
                        *		(that distributed by Heath), really ought to be shot.

2FF6  C5                XCHGBC	PUSH	B			; Put (BC) on stack
2FF7  E3                	XTHL				; Swap it with (HL)
2FF8  C1                	POP	B			; Pop new (BC)
2FF9  C9                	RET
2FFA                    	XTEXT	ZERO
2FFA                    ZERO	SPACE	4,10
                        **	$ZERO - ZERO MEMORY
                        *
                        *	$ZERO ZEROS A BLOCK OF MEMORY.
                        *
                        *	ENTRY	(HL) = ADDRESS
                        *		(B) = COUNT
                        *	EXIT	(A) = 0
                        *	USES	A,B,F,H,L

      = 198A            $ZERO	EQU	031212A 		; IN H17 ROM
2FFA                    	STL	'SYSGEN SPECIAL DATA STRUCTURES'
2FFA                    	EJECT
                        **	FDN - FILE DESCRIPTOR NODES.
                        *
                        *	THESE NODES ARE USED TO KEEP TRACK OF FILES WHICH ARE BEING
                        *	HELD IN MEMORY WHILE TRANSFERING.

2FFA   (0000)           FDN	DS	0	;START OF TYPICAL NODE

      = 0000            FDN.LNK	EQU	*-FDN	;LINK TO NEXT NODE IN CHAIN
2FFA   (0002)           	DS	2	;Full word link

      = 0002            FDN.STA	EQU	*-FDN	;STATUS BYTE
      = 0010            ST.CNT	EQU	DIF.CNT	;IS CONTIGUOUS
      = 0002            ST.OPR	EQU	00000010B;IS BEING READ
      = 0001            ST.OPW	EQU	00000001B;OPEN FOR WRITE
2FFC   (0001)           	DS	1

      = 0003            FDN.FLG	EQU	*-FDN	;FLAG BITS SET ON SOURCE FILE
2FFD   (0001)           	DS	1

      = 0004            FDN.SIZ	EQU	*-FDN	;TOTAL SIZE OF FILE (IF ST.CNT SET)
2FFE   (0002)           	DS	2		 ;In Sectors

      = 0006            FDN.AMR	EQU	*-FDN	;AMOUNT ALREADY READ
3000   (0002)           	DS	2		;IN SECTORS

      = 0008            FDN.AMW	EQU	*-FDN	;AMOUNT ALREADY WRITTEN
3002   (0002)           	DS	2		;IN SECTORS

      = 000A            FDN.ADR	EQU	*-FDN	;ADDRESS IN BUFFER
3004   (0001)           	DS	1		;ADDRESS/256 (MUST BE EVEN PAGE)

      = 000B            FDN.AIM	EQU	*-FDN	;AMOUNT IN MEMORY
3005   (0001)           	DS	1		 ;IN SECTORS

      = 000C            FDNELEN	EQU	*-FDN	;ENTRY  LENGTH

2FFA                    	ORG	FDN	;ORG BACK OVER DEFINITION AREA
2FFA                    	SPACE	4,10
                        **	TABLE. A LINK OF 0 IS A NULL LINK.
                        *

2FFA  0000              FDNFREE DW	0	;HEAD of FREE List
2FFC  0000              FDNHED	DW	0	;HEAD of FILE List

2FFE   (0000)           FDN.1	DS	0
2FFE  AAAAAAAA AAAAAAAA 	DC	FDNCNT*FDNELEN,#0AAH;Reserve space for nodes
3006  AAAAAAAA AAAAAAAA
300E  AAAAAAAA AAAAAAAA
3016  AAAAAAAA AAAAAAAA
301E  AAAAAAAA AAAAAAAA
3026  AAAAAAAA AAAAAAAA
302E  AAAAAAAA AAAAAAAA
3036  AAAAAAAA AAAAAAAA
303E  AAAAAAAA AAAAAAAA
3046  AAAAAAAA AAAAAAAA
304E  AAAAAAAA AAAAAAAA
3056  AAAAAAAA AAAAAAAA

305E  00                OBUFLIM	DB	0	;BUFFER LIMIT/256
305F  00                OBUFPTR	DB	0	;NEXT FREE PAGE IN BUFFER/256
3060                    	STL	'DATA AND FILE BUFFERS'
3060                    	EJECT
3060  5435              BUFPTR	DW	BUFF	;POINTER TO START  OF BUFFER
3062  0000              BUFSIZ	DW	0	;BUFFER LENGTH
3064  00                CMDLIN	DB	0	;!= 0  =>  Command Line specified
3065  00                DRIVES2 DB	0	;!= 0  =>  Two-Drive system
3066  0000              LINEP	DW	0	;Line Pointer
3068  00                MINIMUM DB	0	;!= 0  =>  Minimal Sysgen
3069  00                QUERY	DB	0	;!= 0  =>  Query extra files
306A  00                SRCSPG	DB	0	;Source volume Sectors per Group
306B  00                VOLFLAG DB	0	;== 0  =>  System Vol. Mounted
                        *				== 377Q => Dest. Vol. Mounted

306C  5858583A 44495245 DIRNAM	DB	'XXX:DIRECT.SYS',0;DIRECTORY FILE NAME
3074  43542E53 595300


      = 307B            DEST	EQU	*

                        	ERRNZ	*-DEFAULT-DEST
307B  53593100 0000     	DB	'SY1',0,0,0

                        	ERRNZ	*-DEVTAB-DEST
3081  0000              	DW	0

                        	ERRNZ	*-DRIVER-DEST
3083  C3 0000           	JMP	0

                        	ERRNZ	*-UNIT-DEST
3086  01                	DB	1

                        	ERRNZ	*-DEVICE-DEST
3087  5359313A 00       	DB	'SY1:',0

                        	ERRNZ	*-DVCLEN-DEST


      = 308C            SOURCE	EQU	*

                        	ERRNZ	*-DEFAULT-SOURCE
308C  53593000 0000     	DB	'SY0',0,0,0

                        	ERRNZ	*-DEVTAB-SOURCE
3092  0000              	DW	0

                        	ERRNZ	*-DRIVER-SOURCE
3094  C3 0000           	JMP	0

                        	ERRNZ	*-UNIT-SOURCE
3097  00                	DB	0

                        	ERRNZ	*-DEVICE-SOURCE
3098  5359303A 00       	DB	'SY0:',0

                        	ERRNZ	*-DVCLEN-SOURCE
309D                    	SPACE	3,10
                        **	FILE BLOCKS

309D   (0000)           DESTFB	DS	0	;DUMMY BUFFER
309D  C8                	DB	200	;ILLEGAL CHANNEL NUMBER
309E  00                	DB	0	;FLAGS
309F  0000              	DW	0
30A1  0000              	DW	0
30A3  0000              	DW	0
30A5  0000              	DW	0	;END OF BLOCK
30A7   (0011)           	DS	FB.NAML	;NAME AREA
30B8                    	SPACE	3,10
30B8  0000              NAMTLEN	DW	0	;NAME TABLE POINTER
30BA  0000              NAMTMAX	DW	0	;MAXIMUM SIZE OF NAME TABLE
30BC  0000              NAMTPTR	DW	0	;POINTER TO ACTIVE ELEMENT IN NAMTAB

30BE  2A2E2A3D          OFILES	DB	'*.*='
30C2  AAAAAAAA AAAAAAAA OFILESA DC	80,#0AAH;Optional File List
30CA  AAAAAAAA AAAAAAAA
30D2  AAAAAAAA AAAAAAAA
30DA  AAAAAAAA AAAAAAAA
30E2  AAAAAAAA AAAAAAAA
30EA  AAAAAAAA AAAAAAAA
30F2  AAAAAAAA AAAAAAAA
30FA  AAAAAAAA AAAAAAAA
3102  AAAAAAAA AAAAAAAA
310A  AAAAAAAA AAAAAAAA
      = 0054            OFILESL EQU	*-OFILES
3112  00                	DB	0
3113                    	SPACE	3,5
3113  AAAAAAAA AAAAAAAA PATCH	DC	32,#0AAH
311B  AAAAAAAA AAAAAAAA
3123  AAAAAAAA AAAAAAAA
312B  AAAAAAAA AAAAAAAA
3133                    	STL	'PRS - PRESET PROGRAM (OVERLAID BY BUFFERS).'
3133                    	EJECT
3133                    PCL	SPACE	4,10
                        **	PCL	- Parse Command Line
                        *
                        *	PCL parses the command line.  Valid switches are:
                        *
                        *		M[INIMUM]	Minimal Sysgen
                        *		Q[UERY]		Query user for optional files
                        *		File list specifying files other than internal default
                        *
                        *	ENTRY:	Command line pushed on the stack, followed by return address
                        *
                        *	EXIT:	Command line parsed
                        *
                        *	USES:	ALL
                        *

3133  21 0200           PCL	LXI	H,2
3136  39                	DAD	SP	;PRS must directly call this routine
3137  11 8022           	LXI	D,STACK
313A  CD 8E18           	CALL	$CDEHL
313D  C8                	RZ			Nothing;on Stack other than RET address

313E  E5                	PUSH	H
313F  11 4335           	LXI	D,SWTFWA
3142  CD 7934           	CALL	$DRS
3145  E1                	POP	H	;Restore pointer
3146  DA 3B2A           	JC	ERROR	;Bad error

3149  3A 6830           	LDA	MINIMUM
314C  47                	MOV	B,A
314D  3A 6930           	LDA	QUERY
3150  A0                	ANA	B	;/min and /query together are illegal
3151  3E 84             	MVI	A,PEC.CS
3153  C2 3B2A           	JNZ	ERROR

3156  CD 6E2F           	CALL	$SOB
3159  7E                	MOV	A,M
315A  A7                	ANA	A
315B  C8                	RZ

                        *	Process File List

315C  32 6430           	STA	CMDLIN	;Flag Command Line specified

315F  3A 6830           	LDA	MINIMUM
3162  A7                	ANA	A
3163  3E 84             	MVI	A,PEC.CS
3165  C2 3B2A           	JNZ	ERROR	;/min and command list together are illegal

3168  0E 54             	MVI	C,OFILESL
316A  11 C230           	LXI	D,OFILESA
316D  7E                PCL1	MOV	A,M	;Copy the file list to the optional table
316E  12                	STAX	D
316F  13                	INX	D
3170  23                	INX	H
3171  A7                	ANA	A
3172  C8                	RZ			End;of List

3173  0D                	DCR	C
3174  C2 6D31           	JNZ	PCL1

3177  3E 87             	MVI	A,PEC.CO
3179  C3 3B2A           	JMP	ERROR	;COMMAND OVERFLOW
317C                    PDN	SPACE	4,10
                        **	PDN	- Parse Device Name
                        *
                        *	PDN parses a device name, assuming a default of SY0:.
                        *
                        *	ENTRY:	NONE
                        *
                        *	EXIT:	To EXIT if CTL-D was hit
                        *		DEST and SOURCE initialized
                        *		DRIVES2	= 0 iff 1-drive sysgen
                        *			= 1 iff 2-drive sysgen
                        *
                        *	USES:	ALL

317C  CD BF33           PDN	CALL	$CCO
317F  CD 5E19           	CALL	$TYPTX
3182  0A                	DB	NL
3183  44657374 696E6174 	DB	'Destination Device <SY0:>?',' '+200Q
318B  696F6E20 44657669
3193  6365203C 5359303A
319B  3E3FA0

319E  CD 0035           	CALL	$ITL.
31A1  DA FE22           	JC	EXIT	;Exit if CTL-D is hit

31A4  21 5635           	LXI	H,ITLA	;HL = Address of device specification
31A7  01 1D32           PDN.	LXI	B,PDNA	;Decode Area
31AA  11 2032           	LXI	D,PDNC	;Default Device
31AD  CD CC33           	CALL	DDS
31B0  D2 D731           	JNC	PDN1	;No Problems with Device Specification

                        *	Illegal Device Specification

31B3  CD 5E19           	CALL	$TYPTX
31B6  0A                	DB	NL
31B7  496C6C65 67616C20 	DB	'Illegal Device Specification',ENL
31BF  44657669 63652053
31C7  70656369 66696361
31CF  74696F6E 8A

31D4  C3 7C31           	JMP	PDN

                        *	Set up Flags and Pointers

31D7  AF                PDN1	XRA	A
31D8  32 6530           	STA	DRIVES2	;Default to 1-Drive Sysgen
31DB  0E 03             	MVI	C,PDNAL
31DD  11 1D32           	LXI	D,PDNA
31E0  21 2632           	LXI	H,PDND
31E3  CD 3018           	CALL	$COMP	;Compare Destination to Source
31E6  CA 0532           	JZ	PDN2	;Source == Destination

                        *	Source != Destination, Initialize Source

31E9  3E 01             	MVI	A,1
31EB  32 6530           	STA	DRIVES2	;Flag 2-drive sysgen

31EE  2A 1D32           	LHLD	PDNA
31F1  22 7B30           	SHLD	DEST+DEFAULT;Initialize Name
31F4  22 8730           	SHLD	DEST+DEVICE
31F7  3A 1F32           	LDA	PDNB
31FA  32 8630           	STA	DEST+UNIT;Initialize Binary Unit
31FD  C6 30             	ADI	'0'	;Convert to ASCII
31FF  32 7D30           	STA	DEST+DEFAULT+IOC.UNI-IOC.DEV
3202  32 8930           	STA	DEST+DEVICE+IOC.UNI-IOC.DEV

                        *	Initialize Source

3205  2A 2632           PDN2	LHLD	PDND
3208  22 8C30           	SHLD	SOURCE+DEFAULT;Initialize Device Name
320B  22 9830           	SHLD	SOURCE+DEVICE
320E  3A 2832           	LDA	PDND+IOC.UNI-IOC.DEV
3211  32 9730           	STA	SOURCE+UNIT
3214  C6 30             	ADI	'0'	;Convert to ASCII
3216  32 8E30           	STA	SOURCE+DEFAULT+IOC.UNI-IOC.DEV
3219  32 9A30           	STA	SOURCE+DEVICE+IOC.UNI-IOC.DEV

321C  C9                	RET

321D  7878              PDNA	DB	'xx'
321F  00                PDNB	DB	0
      = 0003            PDNAL	EQU	*-PDNA

                        	ERRNZ	IOC.UNI-IOC.DEV-2;2-Byte Device
                        	ERRNZ	IOC.DIR-IOC.UNI-1;1-Byte Unit

3220  53593000 0000     PDNC	DB	'SY0',0,0,0	;Default Destination Device

3226  5359              PDND	DB	'SY'		;Source Device Specification
3228  00                	DB	0
3229                    PRS	SPACE	4,10
                        ***	PRS - PRESET PROGRAM.
                        *
                        *	PRS IS CALLED TO PERFORM ONE-TIME-ONLY PRESETTING OF
                        *	THE PROGRAM ENVIRONMENT.
                        *
                        *	THE CODE IS OVERLAID BY BUFFERS AND WORK AREAS.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	ALL

      = 3229            ENTRY	EQU	*	;INITIAL ENTRY POINT

3229  FF 09             PRS	SCALL	.VERS
322B  DA AB33           	JC	PRSERR	;NO .VERS SYSTEM CALL
322E  FE 30             	CPI	VERS
3230  C2 AB33           	JNZ	PRSERR

3233  3E FF             	MVI	A,377Q
3235  FF 26             	SCALL	.CLOSE	;CLOSE THE CHANNEL THAT WE CAME IN ON
3237  21 5435           	LXI	H,RMEML	;(HL) = RUN-TIME HIGH MEMORY
323A  FF 2A             	SCALL	.SETTP	;SET HI MEMORY
323C  DA 3B2A           	JC	ERROR

323F  AF                	XRA	A
3240  32 6430           	STA	CMDLIN	;Initialize to NO command line
3243  32 6830           	STA	MINIMUM ;Initialize to Normal Sysgen
3246  32 6930           	STA	QUERY	;Initialize to no query

3249  21 0223           	LXI	H,CCHIT
324C  3E 03             	MVI	A,CTLC
324E  FF 21             	SCALL	.CTLC	;SET CTL/C PROCESSING

3250  CD 5E19           	CALL	$TYPTX
3253  0A090909 20202053 	DB	NL,TAB,TAB,TAB,'   ','SYSGEN'
325B  59534745 4E
3260  0A090909 56657273 	DB	NL,TAB,TAB,TAB,'Version:  ',VERS/16+'0','.',VERS&0FH+'0'
3268  696F6E3A 2020332E
3270  30
3271  0A090920 20202020 	DB	NL,TAB,TAB,'      ','Issue:  #50.07.00'
3279  20497373 75653A20
3281  20233530 2E30372E
3289  3030
328B  0A                	DB	NL
328C  8A                	DB	ENL

328D  CD 3331           	CALL	PCL	;Parse Command Line
3290  CD 7C31           	CALL	PDN	;Parse Device Name

3293  21 9830           	LXI	H,SOURCE+DEVICE
3296  FF 32             	SCALL	.LOADD	;Load Source Device Driver
3298  DA 3B2A           	JC	ERROR
329B  22 9230           	SHLD	SOURCE+DEVTAB;Save Table Address
329E  11 0300           	LXI	D,DEV.JMP
32A1  19                	DAD	D	;HL = driver jump address
32A2  22 9530           	SHLD	SOURCE+DRIVER+1

32A5  3A 6530           	LDA	DRIVES2
32A8  A7                	ANA	A
32A9  CA BE32           	JZ	PRS1	;1-Drive Sysgen

32AC  21 8730           	LXI	H,DEST+DEVICE
32AF  FF 32             	SCALL	.LOADD	;Load Device Driver for Destination
32B1  DA 3B2A           	JC	ERROR
32B4  22 8130           	SHLD	DEST+DEVTAB;Save Device Table Address
32B7  11 0300           	LXI	D,DEV.JMP
32BA  19                	DAD	D	;HL = Device Jump Address
32BB  22 8430           	SHLD	DEST+DRIVER+1

32BE  CD 1C34           PRS1	CALL	$DOS	;DISMOUNT OPERATING SYSTEM
32C1  DA 3B2A           	JC	ERROR

                        *	Mount the Source Diskette

32C4  CD 522F           	CALL	$MOVEL	;Stuff Source specification
                        	ERRNZ	IOC.DIR-IOC.DEV-3
32C7  0300              	DW	3
32C9  9830              	DW	SOURCE+DEVICE
32CB  EF32              	DW	PRSA

32CD  CD 5E19           	CALL	$TYPTX
32D0  0A                	DB	NL
32D1  496E7365 72742074 	DB	'Insert the Source Diskette in '
32D9  68652053 6F757263
32E1  65204469 736B6574
32E9  74652069 6E20
32EF  78786E3A 2E202048 PRSA	DB	'xxn:.  Hit Return when Ready:',' '+200Q
32F7  69742052 65747572
32FF  6E207768 656E2052
3307  65616479 3AA0

330D  CD 652F           PRS2	CALL	$RCHAR
3310  FE 0A             	CPI	NL
3312  C2 0D33           	JNZ	PRS2	;Wait for Newline

3315  21 9830           	LXI	H,SOURCE+DEVICE
3318  CD 9927           	CALL	MND.

331B  2A 9230           	LHLD	SOURCE+DEVTAB
331E  11 0900           	LXI	D,DEV.UNT
3321  19                	DAD	D	;HL = Address of Unit Pointer
3322  AF                	XRA	A	;Use unit 0
3323  CD 1721           	CALL	S.GUP	;HL = Base address of SY0: Unit Table
3326  CD 072F           	CALL	$INDLB	;A  = Sectors Per Group
3329  0100              	DW	UNT.SPG
332B  32 6A30           	STA	SRCSPG	;Save Source SPG for later

332E  3A 6530           	LDA	DRIVES2
3331  A7                	ANA	A
3332  C2 4133           	JNZ	PRS3	;2-Drive Sysgen

                        *	1-Drive Sysgen

3335  CD 522F           	CALL	$MOVEL
3338  1100              	DW	DVCLEN	;Count
333A  8C30              	DW	SOURCE	;From
333C  7B30              	DW	DEST	;To

333E  C3 9D33           	JMP	PRS5

                        *	2-Drive Sysgen, Mount Destination

3341  CD 522F           PRS3	CALL	$MOVEL	;Stuff Device Specification into message
                        	ERRNZ	IOC.DIR-IOC.DEV-3
3344  0300              	DW	3
3346  8730              	DW	DEST+DEVICE
3348  7133              	DW	PRSB

334A  CD 5E19           	CALL	$TYPTX
334D  0A                	DB	NL
334E  496E7365 72742074 	DB	'Insert the Destination Diskette in '
3356  68652044 65737469
335E  6E617469 6F6E2044
3366  69736B65 74746520
336E  696E20
3371  78786E3A 2E202048 PRSB	DB	'xxn:.  Hit Return when Ready:',' '+200Q
3379  69742052 65747572
3381  6E207768 656E2052
3389  65616479 3AA0

338F  CD 652F           PRS4	CALL	$RCHAR
3392  FE 0A             	CPI	NL
3394  C2 8F33           	JNZ	PRS4	;Wait for NL

3397  21 8730           	LXI	H,DEST+DEVICE
339A  CD 9927           	CALL	MND.	;Mount a new Diskette

                        	ERRNZ	*-PRS5

339D  3E 00             PRS5	MVI	A,I.CSLMD
339F  06 01             	MVI	B,CSL.CHR
33A1  0E 01             	MVI	C,CSL.CHR;Character Mode
33A3  FF 06             	SCALL	.CONSL
33A5  DA 3B2A           	JC	ERROR

33A8  C3 8022           	JMP	START

33AB  3E 28             PRSERR	MVI	A,EC.NCV;NOT CORRECT VERSION
33AD  37                	STC
33AE  C3 3B2A           	JMP	ERROR
33B1                    	STL	'Switch Processors'
33B1                    	EJECT
33B1                    P.MIN	SPACE	4,10
                        **	P.MIN	- Process Minimum
                        *
                        *	P.MIN processes the minimum switch
                        *
                        *	This switch will transfer the minimal set
                        *	of HDOS working files.
                        *

33B1  3E 01             P.MIN	MVI	A,1
33B3  32 6830           	STA	MINIMUM
33B6  A7                	ANA	A	;Clear 'C'
33B7  C9                	RET
33B8                    P.QUE	SPACE	4,10
                        **	P.QUE	- Process Query
                        *
                        *	P.QUE processes the query switch
                        *
                        *	This switch will query the user as to whether
                        *	each non-essential file is to be transfered.
                        *

33B8  3E 01             P.QUE	MVI	A,1
33BA  32 6930           	STA	QUERY
33BD  A7                	ANA	A	;Clear 'C'
33BE  C9                	RET
33BF                    	STL	'Overlaid Common Decks'
33BF                    	EJECT
33BF                    	XTEXT	CCO
33BF                    CCO	SPACE	4,10
                        **	$CCO - CLEAR CONTROL-O
                        *
                        *	$CCO IS CALLED TO CLEAR THE EFFECT OF THE CTL-O CHARACTER.
                        *
                        *	ENTRY	NONE
                        *	EXIT	NONE
                        *	USES	NONE


33BF  CD 2C19           $CCO	CALL	$SAVALL 		; SAVE REGISTERS
33C2  3E 04             	MVI	A,I.CONFL
33C4  01 0100           	LXI	B,CO.FLG		; CLEAR CO.FLG
33C7  FF 06             	SCALL	.CONSL
33C9  C3 2719           	JMP	$RSTALL 		; RESTORE REGISTERS AND RETURN
33CC                    	XTEXT	DDS
33CC                    	SPACE	4,10
                        **	DDS	-  Decode Device Specification
                        *
                        *	DDS decodes the device specification, returning a two character
                        *	device name, and one byte unit number.
                        *
                        *
                        *	ENTRY:	BC	= Address of destination fields
                        *		DE	= Address of default
                        *		HL	= Address of string specifier
                        *
                        *	EXIT:	PSW	= 'C' SET   if ERROR
                        *			  'C' CLEAR if NO ERROR
                        *
                        *	USES:	ALL
                        *

      = 33CC            DDS	EQU	*

                        *	Initialize the fields to the defaults

33CC  C5                	PUSH	B
33CD  CD 1434           	CALL	DDS3
33D0  CD 1434           	CALL	DDS3
33D3  1A                	LDAX	D
33D4  D6 30             	SUI	'0'
33D6  02                	STAX	B
33D7  C1                	POP	B

33D8  7E                	MOV	A,M
33D9  A7                	ANA	A
33DA  C8                	RZ				; took the default

                        *	Check the supplied name

33DB  CD 6E2F           	CALL	$SOB			; skip the whitespace
33DE  CD 0534           	CALL	DDS2
33E1  D8                	RC				; Not alpha
33E2  CD 0534           	CALL	DDS2
33E5  D8                	RC				; Not alpha

33E6  7E                	MOV	A,M
33E7  FE 3A             	CPI	':'
33E9  3E 00             	MVI	A,0			; assume unit 0
33EB  CA F733           	JZ	DDS1			; default to unit 0

                        *	Check for a valid digit

33EE  7E                	MOV	A,M
33EF  D6 30             	SUI	'0'
33F1  D8                	RC				; Not digit
33F2  FE 08             	CPI	7+1
33F4  3F                	CMC
33F5  D8                	RC				; digit too large
33F6  23                	INX	H

33F7  02                DDS1	STAX	B
33F8  03                	INX	B
33F9  7E                	MOV	A,M
33FA  23                	INX	H
33FB  FE 3A             	CPI	':'
33FD  37                	STC
33FE  C0                	RNZ				; requires ':'

33FF  7E                	MOV	A,M
3400  A7                	ANA	A
3401  37                	STC
3402  C0                	RNZ				; require 'NULL'

3403  A7                	ANA	A			; Clear ERROR flag
3404  C9                	RET

3405  7E                DDS2	MOV	A,M
3406  23                	INX	H
3407  CD 492F           	CALL	$MCU
340A  FE 41             	CPI	'A'
340C  D8                	RC				; Not alpha

340D  FE 5B             	CPI	'Z'+1
340F  3F                	CMC
3410  D8                	RC				; Not alpha

3411  02                	STAX	B
3412  03                	INX	B			; replace the default char
3413  C9                	RET

3414  1A                DDS3	LDAX	D
3415  13                	INX	D
3416  CD 492F           	CALL	$MCU			; Map to upper case
3419  02                	STAX	B
341A  03                	INX	B
341B  C9                	RET
                        	ERRNZ	IOC.UNI-IOC.DEV-2	; 2 byte device
                        	ERRNZ	IOC.DIR-IOC.UNI-1	; 1 byte unit
341C                    	XTEXT	DOS
341C                    	SPACE	4,10
                        **	$DOS - DISMOUNT OPERATING SYSTEM.
                        *
                        *	$DOS dismounts all units of all directory devices.
                        *
                        *	THE USER IS MESSAGED ABOUT THE DISKS, AND THE OPERATING
                        *	SYSTEM IS NOTIFIED.
                        *
                        *
                        *	ENTRY	NONE
                        *	EXIT	'C' CLEAR IF NO ERROR
                        *		'C' SET   IF	ERROR
                        *		 (A)  = ERROR CODE
                        *	USES	ALL
                        *

341C  CD 5E19           $DOS	CALL	$TYPTX
341F  0A074469 736D6F75 	DB	NL,BELL,'Dismounting All Disks:',NL,ENL
3427  6E74696E 6720416C
342F  6C204469 736B733A
3437  0A8A

3439  CD 7634           	CALL	$DOS.
343C  D8                	RC

343D  CD 5E19           	CALL	$TYPTX
3440  0A52656D 6F766520 	DB	NL,'Remove the Disk(s). Hit RETURN when ready:',' '+200Q
3448  74686520 4469736B
3450  2873292E 20486974
3458  20524554 55524E20
3460  7768656E 20726561
3468  64793AA0

346C  CD 652F           DOS1	CALL	$RCHAR			; READ CHARACTER
346F  FE 0A             	CPI	NL
3471  C2 6C34           	JNE	DOS1

3474  A7                	ANA	A			; CLEAR CARRY
3475  C9                	RET
3476                    	SPACE	4,10
3476  FF 86             $DOS.	SCALL	.DAD			; Dismount all Disks
3478  C9                	RET
3479                    	XTEXT	DRS
3479                    	SPACE	4,10
                        **	$DRS - DECODE AND REMOVE SWITCHES.
                        *
                        *	$DRS IS CALLED TO DECODE COMMAND SWITCHES FROM A LINE
                        *	OF TEXT. SWITCHES TAKE THE FORM:
                        *
                        *	/XXXXX
                        *
                        *	AFTER A SWITCH HAS BEEN LOCATED, IT (AND THE PRECEDING '/')
                        *	ARE REPLACED WITH BLANKS.
                        *
                        *	VALID SWITCH DESCRIPTIONS ARE ENCODED INTO A TABLE
                        *	SUPPLIED BY THE CALLER, IN THE FORMAT:
                        *
                        *	DB	'X...X'		REQUIRED SWITCH CHARACTERS
                        *	DB	'C'+200Q,...,'C'+200Q	OPTIONAL CHARACTERS
                        *	DB	200Q		END OF CHARACTERS
                        *	DW	ADDR		PROCESSOR ADDRESS (CALLED WHEN SWITCH DETECTED)
                        *
                        *	DB	'Y...Y'		NEXT SWITCH
                        *	.	 .
                        *	.	 .
                        *	.	 .
                        *
                        *	DB	0		FLAGS END OF TABLE
                        *
                        *	SWITCHES MUST BE FOLLOWED BY A ':', A '/' (ANOTHER SWITCH)
                        *	A ',', OR A 00 BYTE.
                        *
                        *	UPON DETECTION OF A VALID SWITCH, $DRS CALLS THE USER PROCESS
                        *	ROUTINE. UPON ENTRY,
                        *	(HL) = ADDRESS OF THE FIRST BYTE FOLLOWING THE SWTICH
                        *	'Z' CLEAR IF CHARACTER = '/', ',', OR 00
                        *	'Z' SET IF CHARACTER = ':'
                        *
                        *	THE USER ROUTINE CAN DECODE SWITCH SUB-OPTIONS, IF DESIRED.
                        *	THE USER ROUTINE MAY USE ALL REGISTERS.
                        *
                        *	ENTRY	(DE) = SWITCH TABLE FWA
                        *		(HL) = LINE FWA
                        *	EXIT	'C' CLEAR IF OK
                        *		'C' SET IF ERROR
                        *		 (HL) = ADDRESS OF START OF BAD SWITCH
                        *		 (A) = ERROR CODE
                        *	USES	ALL

      = 3479            $DRS	EQU	*

                        *	LOOK FOR SWITCHES

3479  7E                $DRS1	MOV	A,M
347A  A7                	ANA	A
347B  C8                	RZ			END;OF LINE
347C  23                	INX	H
347D  FE 2F             	CPI	'/'
347F  C2 7934           	JNE	$DRS1	;NOT A SWITCH
3482  22 FE34           	SHLD	$DRSB	;($DRSB) = SWITCH FWA (AFTER '/')

                        *	GOT A SWITCH. LOOK FOR A MATCH IN THE CALLER'S TABLE

3485  D5                	PUSH	D	;SAVE TABLE FWA
3486  2A FE34           $DRS2	LHLD	$DRSB	;(HL) = SWITCH FWA
3489  1A                $DRS3	LDAX	D	;(A) = TABLE ENTRY
348A  E6 7F             	ANI	177Q
348C  CA B434           	JZ	$DRS6	;GOT A MATCH
348F  BE                	CMP	M
3490  C2 9834           	JNE	$DRS4	;NO MATCH
3493  13                	INX	D
3494  23                	INX	H
3495  C3 8934           	JMP	$DRS3	;SEE IF MORE MATCH

                        *	HAVE MIS-MATCH. SEE IF THE MISSING CHARACTER IS SIGNIFICANT

3498  7E                $DRS4	MOV	A,M	;(A) = LINE CHARACTER WE COULDNT MATCH
3499  CD DC34           	CALL	$DRS15	;SEE IF OK TERMINATOR
349C  C2 A434           	JNE	$DRS4.5	;NO MATCH ON THIS SWITCH
349F  1A                	LDAX	D	;(A) = NEXT CHARACTER IN SWITCH PATTERN
34A0  A7                	ANA	A
34A1  FA B434           	JM	$DRS6	;HAVE SUFFICIENT MATCH
34A4  CD F034           $DRS4.5	CALL	$DRS20	;SKIP TABLE ENTRY
34A7  1A                	LDAX	D
34A8  A7                	ANA	A
34A9  C2 8634           	JNZ	$DRS2	;MORE SWITCHES IN TABLE TO CHECK

                        *	BAD SWITCH

34AC  D1                $DRS5	POP	D	;RESTORE STACK
34AD  2A FE34           	LHLD	$DRSB	;POINT TO BAD SWITCH
34B0  37                	STC
34B1  3E 1A             	MVI	A,EC.IS	;ILLEGAL SWITCH
34B3  C9                	RET

                        *	HAVE SWITCH. CHECK IT'S FOLLOWING CHARACTER

34B4  CD 6E2F           $DRS6	CALL	$SOB	;SKIP OVER BLANKS
34B7  CD DC34           	CALL	$DRS15	;CHECK CHARACTER
34BA  C2 AC34           	JNE	$DRS5	;IN ERROR
34BD  CD F034           	CALL	$DRS20	;GET PROCESSOR ADDRESS
34C0  11 CA34           	LXI	D,$DRS7
34C3  E5                	PUSH	H	;SAVE (HL)
34C4  D5                	PUSH	D	;SET RETURN ADDRESS FOR TABLE CODE
34C5  C5                	PUSH	B	;SAVE PROCESSOR ADDRESS
34C6  7E                	MOV	A,M	;(A) = NEXT CHARACTER
34C7  FE 3A             	CPI	':'	;SET CONDITION CODES
34C9  C9                	RET			CALL;USER PROCESS

                        *	USER PROCESS RETURNS HERE

34CA  D1                $DRS7	POP	D	;(DE) = LAST CHARACTER OF SWITCH+1
34CB  2A FE34           	LHLD	$DRSB	;(HL) = FIRST CHARACTER OF SWITCH AFTER /
34CE  2B                	DCX	H	;(HL) = ADDRESS OF '/'

                        *	REPLACE SWITCH WITH BLANKS

34CF  36 20             $DRS8	MVI	M,' '
34D1  23                	INX	H
34D2  CD 8E18           	CALL	$CDEHL
34D5  C2 CF34           	JNE	$DRS8	;NOT THERE YET
34D8  D1                	POP	D	;(DE) = SWITCH TABLE FWA
34D9  C3 7934           	JMP	$DRS1	;LOOK FOR MORE SWITCHES
34DC                    	SPACE	2,10
                        **	$DRS15 - CHECK FOR VALID DELIMITER CHARACTER.
                        *
                        *	$DRS15 CHECKS THE NEXT TEXT CHARACTER TO SEE IF IT IS
                        *
                        *	00, '/', ' ', TAB, ',', ':'
                        *
                        *	ENTRY	(A) = CHARACTER
                        *	EXIT	'Z' SET IF CHARACTER IS ONE OF THE ABOVE
                        *	USES	F

34DC  A7                $DRS15	ANA	A
34DD  C8                	RZ			IS;00
34DE  FE 2F             	CPI	'/'
34E0  C8                	RE
34E1  FE 20             	CPI	' '						;/3.0a/
34E3  C8                	RE								/
34E4  FE 09             	CPI	TAB						;/
34E6  C8                	RE								/3.0a/
34E7  FE 2C             	CPI	','
34E9  C8                	RE
34EA  FE 3A             	CPI	':'
34EC  C8                	RE
34ED  FE 3D             	CPI	'='						;/3.0a/
34EF  C9                	RET
34F0                    	SPACE	2,10
                        **	$DRS20 - GET PROCESSOR ADDRESS.
                        *
                        *	$DRS20 IS CALLED TO GET THE PROCESSOR ADDRESS FIELD OUT OF
                        *	AN ENTRY IN THE SWITCH TABLE. THE CALLER SUPPLIES A POINTER
                        *	TO SOMEWHERE IN THE TEXT PART OF THE SWITCH DESCRIPTION;
                        *	$DRS20 ADVANCES THE POINTER TO THE PROCESSOR ADDRESS.
                        *
                        *	ENTRY	(DE) = POINTER TO TEXT PART OF SWITCH ENTRY
                        *	EXIT	(DE) = POINTER TO 1ST BYTE OF NEXT SWITCH TABLE ENTRY
                        *		(BC) = PROCESSOR ADDRESS FROM TABLE
                        *	USES	A,F,B,C,D,E

34F0  1A                $DRS20	LDAX	D
34F1  13                	INX	D
34F2  FE 80             	CPI	200Q
34F4  C2 F034           	JNE	$DRS20
34F7  1A                	LDAX	D	;(A) = LOW BYTE OF PROCESSOR ADDRESS
34F8  4F                	MOV	C,A
34F9  13                	INX	D
34FA  1A                	LDAX	D
34FB  47                	MOV	B,A	;(BC) = PROCESSOR ADDRESS
34FC  13                	INX	D
34FD  C9                	RET

34FE  0000              $DRSB	DW	0	;POINTER TO SWITCH BEING PROCESSED
3500                    	XTEXT	ITL
3500                    	SPACE	4,10
                        **	$ITL - INPUT TEXT LINE.
                        *
                        *	$ITL INPUTS A LINE FROM THE TERMINAL.
                        *
                        *	CHARACTER ARE ACCEPTED FROM THE TERMINAL, RUBOUT AND BACKSPACE
                        *	CHARACTERS ARE PROCESSED. WHEN A CARRIAGE RETURN IS ENTERED,
                        *	$ITL RETURNS.
                        *
                        *	ENTRY	NONE
                        *	EXIT	(HL) = #ITLA
                        *		(A) = TEXT LENGTH
                        *	USES	A,F,H,L

3500  CD 0635           $ITL.	CALL	$ITL			; INPUT LINE IN UPPER CASE
3503  C3 0C35           	JMP	$MLU			; MAP LINE TO UPPER

3506  21 5635           $ITL	LXI	H,ITLA
3509  C3 2335           	JMP	$RTL			; READ TEXT LINE
350C                    	XTEXT	MLU
350C                    	SPACE	4,10
                        **	MLU - MAP LOWER CASE LINE TO UPPER CASE.
                        *
                        *	MLU MAPS THE LOWER CASE ALPHABETICS IN A LINE TO UPPER CASE.
                        *
                        *	ENTRY	(HL)  = LINE FWA
                        *	EXIT	NONE
                        *	USES	NONE

350C  F5                $MLU	PUSH	PSW	;SAVE (PSW)
350D  E5                	PUSH	H	;SAVE FWA
350E  2B                	DCX	H	;ANTICIPATE INX H
350F  23                $MLU1	INX	H
3510  7E                	MOV	A,M	;(A)= CHARACTER
3511  CD 492F           	CALL	$MCU	;MAP CHAR TO UPPER
3514  77                	MOV	M,A
3515  A7                	ANA	A
3516  C2 0F35           	JNZ	$MLU1	;MORE TO GO
3519  E1                	POP	H	;RESTORE (HL)
351A  F1                	POP	PSW	;RESTORE (PSW)
351B  C9                	RET
351C                    	XTEXT	RTL
351C                    	SPACE	4,10
                        **	$RTL - READ TEXT LINE.
                        *
                        *	$RTL READS A LINE FROM THE TERMINAL.
                        *
                        *	CHARACTER ARE ACCEPTED FROM THE TERMINAL, RUBOUT AND BACKSPACE
                        *	CHARACTERS ARE PROCESSED. WHEN A CARRIAGE RETURN IS ENTERED,
                        *	$RTL RETURNS.
                        *
                        *	ENTRY	(HL) = BUFFER FWA
                        *	EXIT	'C' CLEAR IF OK
                        *		 DATA IN BUFFER
                        *		 (A) = TEXT LENGTH
                        *		'C' SET IF CTL-D STRUCK
                        *	USES	A,F

351C  CD 2335           $RTL.	CALL	$RTL			; $RTL IN UPPER CASE
351F  D8                	RC				; CTL-D
3520  C3 0C35           	JMP	$MLU			; MAP LINE TO UPPER CASE

      = 3523            $RTL	EQU	*

3523  E5                	PUSH	H			; SAVE FWA
3524  FF 01             $RTL1	SCALL	.SCIN
3526  DA 2435           	JC	$RTL1
3529  FE 04             	CPI	CTLD
352B  CA 4035           	JE	$RTL2			; CTL-D STRUCK
352E  77                	MOV	M,A
352F  23                	INX	H
3530  FE 0A             	CPI	NL
3532  C2 2435           	JNE	$RTL1
3535  2B                	DCX	H
3536  36 00             	MVI	M,0
3538  23                	INX	H

                        *	ALL DONE. COMPUTE LENGTH

3539  EB                	XCHG				; (DE) = LWA+1
353A  E3                	XTHL				; (HL) = FWA
353B  7B                	MOV	A,E
353C  95                	SUB	L			; (A) = LENGTH
353D  A7                	ANA	A			; CLEAR CARRY
353E  D1                	POP	D			; RESTORE (DE)
353F  C9                	RET

                        *	CTL-D STRUCK

3540  E1                $RTL2	POP	H			; (HL) = FWA
3541  37                	STC
3542  C9                	RET
3543                    	STL	'Overlaid Buffers and Data'
3543                    	EJECT
                        **	Overlaid Buffers and Data
                        *

3543   (0000)           SWTFWA	DS	0	;Switch Table FWA

3543  4D                	DB	'M'	;/M[INIMAL]
3544  C9CEC9CD C1CC80   	DB	'I'+200Q,'N'+200Q,'I'+200Q,'M'+200Q,'A'+200Q,'L'+200Q,200Q
354B  B133              	DW	P.MIN

354D  51                	DB	'Q'	;/Q[UERY]
354E  D5C5D2D9 80       	DB	'U'+200Q,'E'+200Q,'R'+200Q,'Y'+200Q,200Q
3553  B833              	DW	P.QUE

3555  00                	DB	0

      = 3556            ITLA	EQU	*	;Line buffer
3556                    	SPACE	4,8
                        **	"what" identification

3556  40282329 48444F53 	DB	'@(#)HDOS 3.0 System Generation Utility',NL
355E  20332E30 20537973
3566  74656D20 47656E65
356E  72617469 6F6E2055
3576  74696C69 74790A
357D  0100              	DW	.DATE.
357F  0200              	DW	.TIME.

3581   (0025)           	DS	80-(*-ITLA)		; make up to 80 character line buffer

      = 35A6            MEML	EQU	*	;MEMORY LENGTH
35A6                    	STL	'RUN-TIME WORK AREAS'
35A6                    	EJECT
                        **	THE FOLLOWING BUFFERS AND AREAS OVERLAY THE PRS CODE.

3229                    	ORG	PRS

3229   (0100)           DSTLAB	DS	256	;Saved Destination Label
3329   (0100)           SRCLAB	DS	256	;Saved Source Label
3429   (0100)           LABEL	DS	256	;Transient Label

3529   (0011)           MWNA	DS	FB.NAML	;MWN WORK AREA


                        **	* * NOTE * *
                        *
                        *	DIRWORK  USES THE SYSTEM SCRATCH AREA, SECSCR. DIRWORK WILL NOT
                        *	BE PRESERVED DURING A SYSCALL !!

      = 2151            DIRWRKP	EQU	S.SCR	;POINTER TO THE SCRATCH AREA
353A                    PIO.	SPACE	3,10
                        **	PIO.XXX - IMAGE OF SYSTEM AIO.XXX AREA
                        *
                        *	THESE CELLS MIRROR THE SYSTEM AIO.XXX AREA


353A   (0002)           PIO.DEV	DS	2	;DEVICE CODE
353C   (0001)           PIO.UNI	DS	1	;UNIT NUMBER (0-9)

353D   (0017)           PIO.DIR	DS	DIRELEN	;DIRECTORY ENTRY


3554   (0000)           NAMTAB	DS	0	;NAME TABLE


      = 0200            BUFMINL	EQU	512	;MINIMUM SIZE FOR BUFFER (WHEN IN USE)
      = 3554            BUFF	EQU	*	;BUFFER AREA STARTS AFTER NAMTAB

      = 3554            RMEML	EQU	*	;INITIAL RUNNING MEMORY LENGTH

35A6                    	ORG	MEML		; back to last code

35A6   (3229)           	END	ENTRY

00000 Total Errors


00000 Total Warnings

$CCO               33BF    $CDEHL             188E E  $CHL               1894 E
$CMP$              0001 E  $COMP              1830 E  $CRLF              2EAB
$DADA              183A E  $DADA.             1841 E  $DOS               341C
$DOS.              3476    $DRS               3479 E  $DRS1              3479
$DRS15             34DC    $DRS2              3486    $DRS20             34F0
$DRS3              3489    $DRS4              3498    $DRS4.5            34A4
$DRS5              34AC    $DRS6              34B4    $DRS7              34CA
$DRS8              34CF    $DRSB              34FE    $DTB               2EB1
$DTB1              2EB5    $DTB2              2EBC    $DTB3              2EC9
$DU66              1846 E  $FERR1             2EE9    $FERR2             2EF4
$FERROR            2ED2    $HLIHL             1889 E  $INDL              189C E
$INDLB             2F07    $INDS              2F18    $INDSB             2F33
$ITL               3506    $ITL.              3500    $MCU               2F49
$MLU               350C    $MLU1              350F    $MOVE              18AA E
$MOVEL             2F52    $MU86              1907 E  $RCHAR             2F65
$RSTALL            1927 E  $RTL               3523 E  $RTL.              351C
$RTL1              3524    $RTL2              3540    $SAVALL            192C E
$SOB               2F6E    $SOB1              2F6F    $TFN               2F7C
$TFN.              2F7F    $TFN1              2F8A    $TFN2              2F95
$TJMP              1931 E  $TJMP.             1932 E  $TYPC.             2FA8
$TYPCC             2F98 E  $TYPCH             2FA4    $TYPL.             2FB9 E
$TYPLN.            2FAB    $TYPTX             195E E  $TYPTX.            1964 E
$UDD               196F E  $UDDN              2FCB E  $WCHAR             2F6B
$ZERO              198A E  .CHFLG             0030    .CLEAR             002D
.CLEARA            002E    .CLOSE             0026    .CLRCO             0007
.CONSL             0006    .CRC16             000B    .CTLC              0021
.DAD               0086    .DATE.             0001 E  .DECODE            002B
.DELET             0028    .DELETE            0028 E  .DISMT             0031
.DLY               002B E  .DMNMS             0083    .DMOUN             0081
.DMOUNT            0081 E  .ERROR             002F    .EXIT              0000
.GDA               000A    .LINK              0020    .LOADD             0032
.LOADO             0008    .MONMS             0082    .MOUNT             0080
.NAME              002C    .OPENC             0025    .OPENR             0022
.OPENU             0024    .OPENW             0023    .POSIT             0027
.PRINT             0003    .READ              0004    .RENAM             0029
.RENAME            0029 E  .RESET             0084    .RESNMS            0085
.SCIN              0001    .SCOUT             0002    .SETTOP            002A E
.SETTP             002A    .SYSRES            000C    .TIME.             0002 E
.VERS              0009    .WRITE             0005    ABS.COD            0008
ABS.ENT            0006    ABS.ID             0000    ABS.LDA            0002
ABS.LEN            0004    AEN                2A94    AEN1               2AA6
AEN2               2AC5    AENA               2AC7    AIO.CGN            2127
AIO.CHA            214E    AIO.CNT            2149    AIO.CSI            2128
AIO.DDA            2121 E  AIO.DES            212D    AIO.DEV            212F
AIO.DIR            2132    AIO.DTA            212B    AIO.EOF            214B
AIO.EOM            214A    AIO.FLG            2123    AIO.GRT            2124
AIO.LGN            2129    AIO.LSI            212A    AIO.SPG            2126
AIO.TFP            214C    AIO.UNI            2131    AIO.VEC            2120
BELL               0007 E  BKSP               0008 E  BOOT.P             0001 E
BS                 0008 E  BSL                2AD8    BSL1               2ADE
BSL2               2AF2    BSLA               2AFA    BUFF               3554 E
BUFMINL            0200 E  BUFPTR             3060    BUFSIZ             3062
C.STX              0002 E  C.SYN              0016 E  CAD                2BEF
CAD.               2BF3    CAD0               2BF5    CAD1               2C2A
CAD2               2C4D    CAD2.4             2C63    CAD2.6             2C69
CAD3               2C88    CAD4               2C8A    CAD5               2C90
CADA               2C94    CBR                26BB    CCHIT              2302
CDA                2CFC    CDA5               2D20    CDA6               2D2E
CDA7               2D30    CDB.H84            0001 E  CDB.H85            0000 E
CFS.               2AFB    CFS1               2AFE    CMDLIN             3064
CN.170M            000C E  CN.174M            0003 E  CN.ABO             0080 E
CN.BAU             0040 E  CN.DES             0001 E  CN.DIR             0002 E
CN.MEM             0020 E  CN.PRI             0010 E  CN.SOU             0000 E
CND.H17            0000 E  CND.H47            0001 E  CND.NDI            0000 E
CO.FLG             0001 E  COF                23CE    COF1               23E3
COFA               23E9    CQF                2B06    CQF.               2B14
CQF1               2B32    CR                 000D E  CRF                230A
CRFA               232C    CRFB               2342    CS.FLG             0080 E
CSD                2359    CSD1               2381    CSDA               23A7
CSDB               23B2    CSDC               23B9    CSDD               23C0
CSF                2B3A    CSF1               2B40    CSF2               2B57
CSFA               2B5B    CSFB               2B7C    CSFC               2BA8
CSFD               2BB3    CSL.CHR            0001 E  CSL.ECH            0080 E
CSL.RAW            0004 E  CSL.WRP            0002 E  CTLA               0001 E
CTLB               0002 E  CTLC               0003 E  CTLD               0004 E
CTLE               0005 E  CTLO               000F E  CTLP               0010 E
CTLQ               0011 E  CTLR               0012 E  CTLS               0013 E
CTLX               0018 E  CTLZ               001A E  CTP.2SB            0008 E
CTP.BKM            0002 E  CTP.BKS            0080 E  CTP.FF             0040 E
CTP.HHS            0004 E  CTP.MLI            0020 E  CTP.MLO            0010 E
CTP.TAB            0001 E  CWM                2BBF    CWM1               2BC6
D.CON              2048    D.RAM              20A0    D.VEC              2058
DC.ABT             0007    DC.CLO             0006    DC.DSF             000E
DC.INT             000D    DC.LOD             0009    DC.MAX             000F
DC.MOU             0008    DC.OPR             0003    DC.OPU             0005
DC.OPW             0004    DC.RDY             000A    DC.REA             0000
DC.RER             0002    DC.SET             000B    DC.UNL             000C
DC.WRI             0001    DDF                2BCD    DDF.BOL            0009 E
DDF.BOO            0000    DDF.LAB            0009    DDF.USR            000A
DDF2               2BD0    DDS                33CC E  DDS1               33F7
DDS2               3405    DDS3               3414    DEFAULT            0000
DEL                007F E  DEST               307B E  DESTERR            29A9
DESTFB             309D    DEV.DDA            0004    DEV.DVG            000D
DEV.DVL            000B    DEV.FLG            0006    DEV.JMP            0003
DEV.MNU            0008    DEV.MUM            0007    DEV.NAM            0000
DEV.RES            0002    DEV.UNT            0009    DEVELEN            000E E
DEVICE             000C    DEVTAB             0006    DF.CLR             00FE E
DF.EMP             00FF E  DIF.ARC            0008 E  DIF.BAD            0004 E
DIF.CNT            0010 E  DIF.DL             0002 E  DIF.LOC            0040 E
DIF.SYS            0080 E  DIF.USR            0001 E  DIF.WP             0020 E
DIR.ACD            0015    DIR.CRD            0013    DIR.CTH            000B
DIR.CTM            000C    DIR.EXT            0008    DIR.FGN            0010
DIR.FLG            000E    DIR.LGN            0011    DIR.LSI            0012
DIR.NAM            0000    DIR.NOA            000D    DIR.USR            000F
DIRELEN            0017 E  DIRIDL             000B E  DIRNAM             306C
DIRWRKP            2151 E  DIS.ENL            01FB    DIS.ENT            0000 E
DIS.LNK            01FE    DIS.SEC            01FC    DMD                26C1
DMD.               26C4    DNT                2C95    DNT1               2C9C
DNT2               2CA5    DNT3               2CC7    DNT4               2CDA
DNT5               2CD1    DNTA               2CDF    DOS1               346C
DR.FX              0004 E  DR.IM              0001 E  DR.PR              0002 E
DR.SPL             00E0 E  DR.UNL             0008 E  DRIVER             0008
DRIVES2            3065    DSTDRVR            2BE4    DSTLAB             3229
DT.CH              0010 E  DT.CR              0002 E  DT.CW              0004 E
DT.DD              0001 E  DT.FX              0020 E  DT.P3              0040 E
DT.RN              0008 E  DT.UL              0080 E  DV.EL              0000 E
DV.NU              0001 E  DVCLEN             0011 E  EBM                2CE8
EC.CNA             0004    EC.CNR             0034    EC.CUI             0037
EC.DDA             0017    EC.DFM             0031    EC.DIF             000F
EC.DIW             001D    EC.DNI             0025    EC.DNL             002F
EC.DNP             0030    EC.DNR             0026    EC.DNS             0005
EC.DSC             0027    EC.EOF             0001    EC.EOM             0002
EC.FAO             0019    EC.FAP             0016    EC.FIX             002D
EC.FL              0018    EC.FNF             000C    EC.FNO             0009
EC.FNR             001C    EC.FOD             0023    EC.FUC             000B
EC.ICN             000E    EC.IDF             0032    EC.IDN             0006
EC.IFC             0010    EC.IFN             0007    EC.ILA             002E
EC.ILC             0003    EC.ILO             0020    EC.ILR             000A
EC.ILV             001F    EC.IOI             002A    EC.IS              001A
EC.ITS             0033    EC.LAD             002C    EC.LBO             0036
EC.NCV             0028    EC.NEM             0011    EC.NOS             0029
EC.NPM             0024    EC.NRD             0008    EC.NVM             0022
EC.OTL             002B    EC.RF              0012    EC.SDR             0035
EC.UNA             001E    EC.UND             000D    EC.UUN             001B
EC.VPM             0021    EC.WF              0013    EC.WP              0015
EC.WPV             0014    ENL                008A E  ENTRY              3229 E
EOL                0080 E  ERROR              2A3B    ERROR1             2A54
ERROR2             2A57    ERRORA             2A74    ESC                001B E
EWS                2D35    EWS1               2D7B    EWS3               2D95
EWS4               2DC4    EWS6               2DC5    EWS7               2DCB
EWSA               2DD0    EWSB               2DD6    EWSC               2DF4
EXIT               22FE    EXIT.              2300    FB.CHA             0000
FB.FLG             0001    FB.FWA             0002    FB.LIM             0006
FB.LWA             0008    FB.NAM             000A    FB.NAML            0011 E
FB.PTR             0004    FBENL              001B E  FDN                2FFA
FDN.1              2FFE    FDN.ADR            000A E  FDN.AIM            000B E
FDN.AMR            0006 E  FDN.AMW            0008 E  FDN.FLG            0003 E
FDN.LNK            0000 E  FDN.SIZ            0004 E  FDN.STA            0002 E
FDNCNT             0008 E  FDNELEN            000C E  FDNFREE            2FFA
FDNHED             2FFC    FF                 000C E  FT.ABS             0000 E
FT.BAC             0003 E  FT.DD              0001 E  FT.OC              0010 E
FT.OR              0002 E  FT.OU              0008 E  FT.OW              0004 E
FT.PIC             0001 E  FT.REL             0002 E  GETDLB             2803
GETDLB.            2806    GETSLB             2822    GETSLB.            2825
I.CONFL            0004 E  I.CONTY            0001 E  I.CONWI            0003 E
I.CSLMD            0000 E  I.CUSOR            0002 E  IERR1              29AF
IERR2              29B4    IERR3              29B9    IFL                26CA
IFL1               26D5    ILDEHL             2F02    INA                2DFF
INTERR             29BB    INTERRA            29DA    IOC.CGN            0008
IOC.CSI            0009    IOC.DDA            0002    IOC.DES            000E
IOC.DEV            0010    IOC.DIL            0011 E  IOC.DIR            0013
IOC.DRL            0008 E  IOC.DTA            000C    IOC.FLG            0004
IOC.GRT            0005    IOC.LGN            000A    IOC.LNK            0000
IOC.LSI            000B    IOC.SPG            0007    IOC.SQL            0003 E
IOC.UNI            0012    IOCCTD             0001 E  IOCELEN            002A E
IP.CON             00F2 E  IP.PAD             00F0 E  ISDEHL             2F44
ITLA               3556 E  LAB.AUX            004F E  LAB.AXL            0001 E
LAB.DAT            0000 E  LAB.DIS            0003    LAB.GRT            0005
LAB.IND            0001    LAB.LAB            0011    LAB.LBL            003C E
LAB.LVN            0050    LAB.NOD            0002 E  LAB.PSS            000E
LAB.RGT            000A    LAB.SER            0000    LAB.SIZ            000C
LAB.SPG            0007    LAB.SPT            004F    LAB.SYS            0001 E
LAB.VER            0009    LAB.VFL            0010    LAB.VLT            0008
LAB.VPL            0005 E  LAB.VPR            000C E  LABEL              3429
LF                 000A E  LINEP              3066    LSN                2E19
LSN1               2E1C    M.FOX              00C3 E  M.PAM8             0011 E
MAD                26F4 E  MAD2               26FB    MAD3               2703
MDD                2712    MDD1               272F    MDD2               2736
MDD3               273C    MDD4               275A    MDD5               2775
MDDA               2780    MDDB               2795    MEML               35A6 E
MINIMUM            3068    MND                2796    MND.               2799
MSD                279F    MSD.               27C9 E  MSD1               27BC
MSD2               27C3    MSD3               27C9    MSD4               27E7
MSDA               27F2    MSDB               2802    MWN                2E29
MWN1               2E44    MWN2               2E4A    MWNA               3529
NAMERR             299F    NAMTAB             3554    NAMTLEN            30B8
NAMTMAX            30BA    NAMTPTR            30BC    NL                 000A E
NUL                0000 E  NUL2               0000 E  NULL               0080 E
OBUFLIM            305E    OBUFPTR            305F    OCOPY              2453 E
OCOPY1             2478    OCOPYA             249C    OCOPYC             249D
OCOPYD             249E    OCOPYDL            0011 E  OCOPYF             24AF
OFILES             30BE    OFILESA            30C2    OFILESL            0054 E
OP.CTL             00F0 E  OP.DIG             00F0 E  OP.SEG             00F1 E
OP2.CTL            00F2 E  OVL.COD            0000    OVL.ENS            0008 E
OVL.ENT            0004    OVL.FLB            0006    OVL.SIZ            0002
OVL0               0000    P.MIN              33B1    P.QUE              33B8
PATCH              3113    PCL                3133    PCL1               316D
PDN                317C    PDN.               31A7    PDN1               31D7
PDN2               3205    PDNA               321D    PDNAL              0003 E
PDNB               321F    PDNC               3220    PDND               3226
PEC.CO             0087 E  PEC.CS             0084 E  PEC.DF             0080 E
PEC.DNC            0081 E  PEC.IDF            0086 E  PEC.IUW            0085 E
PEC.RSE            0082 E  PEC.TFI            0083 E  PIO.DEV            353A
PIO.DIR            353D    PIO.UNI            353C    PRS                3229
PRS1               32BE    PRS2               330D    PRS3               3341
PRS4               338F    PRS5               339D    PRSA               32EF
PRSB               3371    PRSERR             33AB    QUERY              3069
QUOTE              0027 E  RDD                2841    RDD1               287F
RDD2               28C3    REN                2E55    RESTART            22FB E
RMEML              3554 E  RPH                24B0 E  RPH1               24C9
RPH2               24D8    RPH2.2             24EB    RPH2.5             2519
RPH3               257C    RPH4               25B6    RPHA               25D2
RSD                290E    RUBOUT             007F E  S.BAUD             20E4
S.BDA              2150    S.BOOTF            211C    S.CAADR            20DB
S.CACC             2106    S.CCTAB            20DD    S.CDB              20E3
S.CFWA             20EA    S.CLKTR            20CD    S.CODE             2107
S.CONFL            20DA    S.CONTY            20D7    S.CONWI            20D9
S.CSLMD            20D6    S.CUSOR            20D8    S.DATC             20C8
S.DATE             20BF    S.DDDTA            20F6    S.DDGRP            20F4
S.DDLDA            20F0    S.DDLEN            20F2    S.DDOPC            20F8
S.DFWA             20EC    S.DIREA            210E    S.DLINK            20E6
S.EXITA            2040    S.FASER            210B    S.FCI              2111
S.GUP              2117    S.HIMEM            20CE    S.INT              20E3
S.JUMPS            2108    S.MOUNT            211A    S.OSI              2156
S.OSO              2157    S.OSZ              2158    S.RFWA             20EE
S.SCI              2114    S.SCR              2151    S.SDD              2108
S.SOVR             2176    S.SYSM             20D0    S.TFWA             20E8
S.TIME             20CA    S.USRM             20D2    S.VAL              20BF
SBE                2E6A    SFS                2E7B    SFS1               2E85
SND                2E88    SOURCE             308C E  SRCDRVR            2EA0
SRCLAB             3329    SRCSPG             306A    SSL                2973
ST.CNT             0010 E  ST.OPR             0002 E  ST.OPW             0001 E
STACK              2280 E  STACKL             010A E  START              2280
SWTFWA             3543    SYDD               2058 E  SYSA               22DC
SYSCALL            00FF E  TAB                0009 E  TPL1               2FC5
UDDN1              2FCF    UDDN1.5            2FE9    UDDN2              2FEB
UDDN3              2FEC    UNIT               000B    UNT.DIS            0006
UNT.FLG            0000    UNT.GRT            0002    UNT.GTS            0004
UNT.SIZ            0008 E  UNT.SPG            0001    USERFWA            2280 E
VERS               0030 E  VFL.80T            0002 E  VFL.DTD            0002 E
VFL.FIX            0004 E  VFL.NSD            0001 E  VOLFLAG            306B
WPH                25D3 E  WPH0               25EE    WPH1               2619
WPH1.5             2630    WPH2               263E    WPH3               2658
WPH4               2683    XCHGBC             2FF6
